
Robopuff.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00002f2c  00002fc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000070  00800112  00800112  00002fd2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002fd2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000368  00000000  00000000  0000302e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004a64  00000000  00000000  00003396  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001042  00000000  00000000  00007dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001525  00000000  00000000  00008e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000cc8  00000000  00000000  0000a364  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b50  00000000  00000000  0000b02c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004960  00000000  00000000  0000bb7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000310  00000000  00000000  000104dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#define MIMU            0x69

// private function prototypes

unsigned char m_imu_init(unsigned char accel_scale, unsigned char gyro_scale)
{	    
       0:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__ctors_end>
       4:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>
    // ensure that scales are within range
    if( (accel_scale < 0) || (accel_scale > 3) ) return 0;
       8:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>
       c:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>
    if( (gyro_scale < 0) || (gyro_scale > 3) ) return 0;
      10:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>

	m_bus_init();
      14:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      18:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>
      1c:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>
      20:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>
      24:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>
      28:	0c 94 2f 08 	jmp	0x105e	; 0x105e <__vector_10>
    m_wait(300);

	// confirm device is connected
    if(m_read_register(MIMU,0x75) != 0x68) return 0;
      2c:	0c 94 6d 08 	jmp	0x10da	; 0x10da <__vector_11>
      30:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>
      34:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>
    
    // SET THE CLOCK SOURCE TO X-AXIS GYRO
    // reg: 0x68 (PWR_MGMT_1)
    // bits 0-2 control clock source
    // value: 0x01 (clock to PLL on X-axis gyro reference)
    m_write_register(MIMU,0x6B,0x01);
      38:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>
      3c:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>
      40:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>

    // SET THE ACCEL FULL-SCALE +/- RANGE (0=2G, 1=4G, 2=8G, 3=16G)
    // reg: 0x1C (ACCEL_CONFIG)
    // bits: 3-4 set +/- full-scale range
    m_write_register(MIMU,0x1C,accel_scale<<3);
      44:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>
      48:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>
      4c:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>
      50:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>

    // SET THE GYRO FULL-SCALE +/- RANGE (0=250, 1=500, 2=1000, 3=2000 DEG/SEC)
    // reg: 0x1B (GYRO_CONFIG)
    // bits: 3-4 set +/- full-scale range
    // value: 0x00
    m_write_register(MIMU,0x1B,gyro_scale<<3); // this shouldn't be doing anything
      54:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>
      58:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>
      5c:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>
      60:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>
      
    // SET THE MPU INTO I2C BYPASS MODE
    // reg: 0x37 (INT_PIN_CFG)
    // bit: 1 (1=bypass, 0=normal op)
    m_write_register(MIMU,0x37,0x02); // switch the MPU into bypass mode
      64:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>
      68:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>
    
    // CONFIGURE THE MAGNETOMETER
    // address: 0x1E (for the magnetometer)
    // reg: 2 (mode register)
    // val: 0 (continuous output)
    m_write_register(0x1E,2,0); // set the mag. to continuous output mode
      6c:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>
      70:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>
      74:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>
    
    // SET THE MPU TO NORMAL I2C MODE
    // reg: 0x37 (INT_PIN_CFG)
    // bit: 5 (1=master, 0=passthrough)
    m_write_register(MIMU,0x37,0);    // switch the MPU out of bypass mode
      78:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>
      7c:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>
    // SET THE AUXILLIARY I2C SAMPLE RATE
    // reg: 0x34 (I2C_SLC4_CTRL) 
    // value: 0x1E (30 > 8000/30 = 266.6Hz)
    // reg: 0x67 (MST_DELAY_CTRL)
    // bit: 0 (1=slowed down, 0=full speed)
    m_write_register(MIMU,0x34,0x1E);
      80:	0c 94 c5 0e 	jmp	0x1d8a	; 0x1d8a <__vector_32>
      84:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>
      88:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>
    m_write_register(MIMU,0x67,0x01);
      8c:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>
      90:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>
    // ADJUST the auxilliary I2C port clock speed, etc.
    // reg: 0x24 (MST_CTRL)
    // bit: 4 = 1 (stop then start), 2 (restart)
    // bit: 0-3 = clock prescaler (0x0D = 400kHz)
    // not necessary, perhaps.  We shall see?
    m_write_register(MIMU,0x24,0x1D);
      94:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>
      98:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>
      9c:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>

    // SET THE MAGNETOMETER ADDRESS
    // reg: 0x25 (I2C_SLC0_ADDR)
    // value: 0x1E (from the magnetometer datasheet)
    // notes: for read from slave, set bit 7 to 1; to write, set bit 7 to 0
    m_write_register(MIMU,0x25,0x9E);
      a0:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>
      a4:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>

    // SET THE MAGNETOMETER DATA START ADDRESS
    // reg: 0x26 (I2C_SLV0_REG)
    // val: 3 (X high byte)
    m_write_register(MIMU,0x26,3);
      a8:	0c 94 98 01 	jmp	0x330	; 0x330 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
    // reg: 0x27 (I2C_SLV0_CTRL
    // bit: 0-3 (# of bytes to ingest) = 6
    //      4: byte/word grouping control
    //      6: swap bytes
    //      7: enable slave (1=on, 0=off)
    m_write_register(MIMU,0x27,0x96);
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
    
    // START THE AUXILLIARY I2C PORT
    // reg: 0x6A (USER_CTRL)
    m_write_register(MIMU,0x6A,0x20); // enable master mode
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
    
    return 1;   // SUCCESS!
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
// private function prototypes

unsigned char m_imu_init(unsigned char accel_scale, unsigned char gyro_scale)
{	    
    // ensure that scales are within range
    if( (accel_scale < 0) || (accel_scale > 3) ) return 0;
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
    if( (gyro_scale < 0) || (gyro_scale > 3) ) return 0;
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33

	m_bus_init();
    m_wait(300);

	// confirm device is connected
    if(m_read_register(MIMU,0x75) != 0x68) return 0;
      d2:	aa be       	out	0x3a, r10	; 58
    // START THE AUXILLIARY I2C PORT
    // reg: 0x6A (USER_CTRL)
    m_write_register(MIMU,0x6A,0x20); // enable master mode
    
    return 1;   // SUCCESS!
}
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 00       	.word	0x003f	; ????

000000f8 <__trampolines_end>:
      f8:	00 01       	movw	r0, r0
      fa:	00 00       	nop
      fc:	8f 01       	movw	r16, r30
      fe:	12 00       	.word	0x0012	; ????
     100:	02 00       	.word	0x0002	; ????
     102:	00 4c       	sbci	r16, 0xC0	; 192
     104:	01 43       	sbci	r16, 0x31	; 49
     106:	00 03       	mulsu	r16, r16
     108:	00 00       	nop
     10a:	48 01       	movw	r8, r16
     10c:	04 01       	movw	r0, r8
     10e:	03 09       	sbc	r16, r3
     110:	04 34       	cpi	r16, 0x44	; 68
     112:	01 12       	cpse	r0, r17
     114:	02 03       	mulsu	r16, r18
     116:	09 04       	cpc	r0, r9
     118:	2c 01       	movw	r4, r24
     11a:	06 03       	mulsu	r16, r22
     11c:	03 09       	sbc	r16, r3
     11e:	04 22       	and	r0, r20
     120:	01 08       	sbc	r0, r1

00000122 <string3>:
     122:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

0000012c <string2>:
     12c:	06 03 4d 00 32 00 00 00                             ..M.2...

00000134 <string1>:
     134:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     144:	65 00 00 00                                         e...

00000148 <string0>:
     148:	04 03 09 04                                         ....

0000014c <config1_descriptor>:
     14c:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     15c:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     16c:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     17c:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     18c:	40 00 00                                            @..

0000018f <device_descriptor>:
     18f:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     19f:	03 01                                               ..

000001a1 <endpoint_config_table>:
     1a1:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

000001ab <__c.2359>:
     1ab:	09 31 30 30 20 78 20 52 20 54 68 3a 20 00           .100 x R Th: .

000001b9 <__c.2357>:
     1b9:	09 31 30 30 20 78 20 52 20 79 3a 20 00              .100 x R y: .

000001c6 <__c.2355>:
     1c6:	0a 31 30 30 20 78 20 52 20 78 3a 20 00              .100 x R x: .

000001d3 <__c.2353>:
     1d3:	0a 72 6f 62 6f 20 79 20 00                          .robo y .

000001dc <__c.2350>:
     1dc:	0a 72 6f 62 6f 20 78 20 00                          .robo x .

000001e5 <__c.2347>:
     1e5:	0a 72 6f 62 6f 20 74 68 20 00                       .robo th .

000001ef <__c.2344>:
     1ef:	0a 69 6e 76 20 00                                   .inv .

000001f5 <__c.2342>:
     1f5:	0a 48 20 73 20 72 20 00                             .H s r .

000001fd <__c.2340>:
     1fd:	0a 63 6f 73 20 74 68 20 00                          .cos th .

00000206 <__c.2337>:
     206:	0a 73 69 6e 20 74 68 20 00                          .sin th .

0000020f <__c.2334>:
     20f:	0a 79 20 00                                         .y .

00000213 <__c.2331>:
     213:	0a 78 20 00                                         .x .

00000217 <__c.2328>:
     217:	0a 54 68 65 74 61 20 78 20 31 30 30 3a 20 00        .Theta x 100: .

00000226 <__c.2325>:
     226:	0a 76 65 63 74 6f 72 20 00                          .vector .

0000022f <__c.2323>:
     22f:	0a 6f 66 66 73 65 74 20 00                          .offset .

00000238 <__c.2321>:
     238:	0a 6f 72 69 67 69 6e 20 00                          .origin .

00000241 <__c.2319>:
     241:	0a 73 6f 75 74 68 20 00                             .south .

00000249 <__c.2316>:
     249:	0a 43 6f 75 6c 64 6e 27 74 20 66 69 6e 64 20 69     .Couldn't find i
     259:	6e 74 65 72 73 65 63 74 69 6f 6e 20 00              ntersection .

00000266 <__c.2314>:
     266:	0a 69 6e 74 65 72 73 65 63 74 20 00                 .intersect .

00000272 <__c.2311>:
     272:	0a 66 69 6e 64 20 6d 61 78 20 00                    .find max .

0000027d <__c.2309>:
     27d:	0a 66 69 6e 64 20 6d 69 6e 20 00                    .find min .

00000288 <__c.2305>:
     288:	0a 64 69 73 74 61 6e 63 65 5f 6d 61 74 72 69 78     .distance_matrix
     298:	20 00                                                .

0000029a <__c.2303>:
     29a:	0a 49 67 6e 6f 72 69 6e 67 20 62 65 63 61 75 73     .Ignoring becaus
     2aa:	65 20 74 68 65 72 65 20 61 72 65 20 62 61 64 20     e there are bad 
     2ba:	73 74 61 72 73 20 00                                stars .

000002c1 <__c.2300>:
     2c1:	29 00                                               ).

000002c3 <__c.2298>:
     2c3:	2c 00                                               ,.

000002c5 <__c.2296>:
     2c5:	29 09 20 50 33 3a 20 28 00                          ). P3: (.

000002ce <__c.2294>:
     2ce:	2c 00                                               ,.

000002d0 <__c.2292>:
     2d0:	29 09 20 50 32 3a 20 28 00                          ). P2: (.

000002d9 <__c.2290>:
     2d9:	2c 00                                               ,.

000002db <__c.2288>:
     2db:	29 09 20 50 31 3a 20 28 00                          ). P1: (.

000002e4 <__c.2286>:
     2e4:	2c 00                                               ,.

000002e6 <__c.2284>:
     2e6:	09 50 30 3a 20 28 00                                .P0: (.

000002ed <__c.2282>:
     2ed:	0a 53 61 6d 70 6c 65 20 00                          .Sample .

000002f6 <__ctors_end>:
     2f6:	11 24       	eor	r1, r1
     2f8:	1f be       	out	0x3f, r1	; 63
     2fa:	cf ef       	ldi	r28, 0xFF	; 255
     2fc:	da e0       	ldi	r29, 0x0A	; 10
     2fe:	de bf       	out	0x3e, r29	; 62
     300:	cd bf       	out	0x3d, r28	; 61

00000302 <__do_copy_data>:
     302:	11 e0       	ldi	r17, 0x01	; 1
     304:	a0 e0       	ldi	r26, 0x00	; 0
     306:	b1 e0       	ldi	r27, 0x01	; 1
     308:	ec e2       	ldi	r30, 0x2C	; 44
     30a:	ff e2       	ldi	r31, 0x2F	; 47
     30c:	02 c0       	rjmp	.+4      	; 0x312 <__do_copy_data+0x10>
     30e:	05 90       	lpm	r0, Z+
     310:	0d 92       	st	X+, r0
     312:	a2 31       	cpi	r26, 0x12	; 18
     314:	b1 07       	cpc	r27, r17
     316:	d9 f7       	brne	.-10     	; 0x30e <__do_copy_data+0xc>

00000318 <__do_clear_bss>:
     318:	21 e0       	ldi	r18, 0x01	; 1
     31a:	a2 e1       	ldi	r26, 0x12	; 18
     31c:	b1 e0       	ldi	r27, 0x01	; 1
     31e:	01 c0       	rjmp	.+2      	; 0x322 <.do_clear_bss_start>

00000320 <.do_clear_bss_loop>:
     320:	1d 92       	st	X+, r1

00000322 <.do_clear_bss_start>:
     322:	a2 38       	cpi	r26, 0x82	; 130
     324:	b2 07       	cpc	r27, r18
     326:	e1 f7       	brne	.-8      	; 0x320 <.do_clear_bss_loop>
     328:	0e 94 9e 12 	call	0x253c	; 0x253c <main>
     32c:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <_exit>

00000330 <__bad_interrupt>:
     330:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000334 <Util_get_distance_matrix>:
#include "m_usb.h"

/**Calculates the distance matrix from an array of 4 points
 */

void Util_get_distance_matrix(Point * PointArr, Matrix* DM){
     334:	2f 92       	push	r2
     336:	3f 92       	push	r3
     338:	4f 92       	push	r4
     33a:	5f 92       	push	r5
     33c:	6f 92       	push	r6
     33e:	7f 92       	push	r7
     340:	8f 92       	push	r8
     342:	9f 92       	push	r9
     344:	af 92       	push	r10
     346:	bf 92       	push	r11
     348:	cf 92       	push	r12
     34a:	df 92       	push	r13
     34c:	ef 92       	push	r14
     34e:	ff 92       	push	r15
     350:	0f 93       	push	r16
     352:	1f 93       	push	r17
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
     358:	cd b7       	in	r28, 0x3d	; 61
     35a:	de b7       	in	r29, 0x3e	; 62
     35c:	2e 97       	sbiw	r28, 0x0e	; 14
     35e:	0f b6       	in	r0, 0x3f	; 63
     360:	f8 94       	cli
     362:	de bf       	out	0x3e, r29	; 62
     364:	0f be       	out	0x3f, r0	; 63
     366:	cd bf       	out	0x3d, r28	; 61
     368:	7c 01       	movw	r14, r24
     36a:	7e 87       	std	Y+14, r23	; 0x0e
     36c:	6d 87       	std	Y+13, r22	; 0x0d
    
	
    double d0 = NAN;
    double d01 = Point_get_distance_between(&PointArr[0], &PointArr[1]);
     36e:	8c 01       	movw	r16, r24
     370:	08 5f       	subi	r16, 0xF8	; 248
     372:	1f 4f       	sbci	r17, 0xFF	; 255
     374:	b8 01       	movw	r22, r16
     376:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <Point_get_distance_between>
     37a:	2b 01       	movw	r4, r22
     37c:	3c 01       	movw	r6, r24
    double d02 = Point_get_distance_between(&PointArr[0], &PointArr[2]);
     37e:	17 01       	movw	r2, r14
     380:	80 e1       	ldi	r24, 0x10	; 16
     382:	28 0e       	add	r2, r24
     384:	31 1c       	adc	r3, r1
     386:	b1 01       	movw	r22, r2
     388:	c7 01       	movw	r24, r14
     38a:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <Point_get_distance_between>
     38e:	4b 01       	movw	r8, r22
     390:	5c 01       	movw	r10, r24
    double d03 = Point_get_distance_between(&PointArr[0], &PointArr[3]);
     392:	f7 01       	movw	r30, r14
     394:	78 96       	adiw	r30, 0x18	; 24
     396:	fa 83       	std	Y+2, r31	; 0x02
     398:	e9 83       	std	Y+1, r30	; 0x01
     39a:	bf 01       	movw	r22, r30
     39c:	c7 01       	movw	r24, r14
     39e:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <Point_get_distance_between>
     3a2:	6b 01       	movw	r12, r22
     3a4:	7c 01       	movw	r14, r24
    double d12 = Point_get_distance_between(&PointArr[1], &PointArr[2]);
     3a6:	b1 01       	movw	r22, r2
     3a8:	c8 01       	movw	r24, r16
     3aa:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <Point_get_distance_between>
     3ae:	6d 83       	std	Y+5, r22	; 0x05
     3b0:	7e 83       	std	Y+6, r23	; 0x06
     3b2:	8f 83       	std	Y+7, r24	; 0x07
     3b4:	98 87       	std	Y+8, r25	; 0x08
    double d13 = Point_get_distance_between(&PointArr[1], &PointArr[3]);
     3b6:	69 81       	ldd	r22, Y+1	; 0x01
     3b8:	7a 81       	ldd	r23, Y+2	; 0x02
     3ba:	c8 01       	movw	r24, r16
     3bc:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <Point_get_distance_between>
     3c0:	69 87       	std	Y+9, r22	; 0x09
     3c2:	7a 87       	std	Y+10, r23	; 0x0a
     3c4:	8b 87       	std	Y+11, r24	; 0x0b
     3c6:	9c 87       	std	Y+12, r25	; 0x0c
    double d23 = Point_get_distance_between(&PointArr[2], &PointArr[3]);
     3c8:	69 81       	ldd	r22, Y+1	; 0x01
     3ca:	7a 81       	ldd	r23, Y+2	; 0x02
     3cc:	c1 01       	movw	r24, r2
     3ce:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <Point_get_distance_between>
     3d2:	69 83       	std	Y+1, r22	; 0x01
     3d4:	7a 83       	std	Y+2, r23	; 0x02
     3d6:	8b 83       	std	Y+3, r24	; 0x03
     3d8:	9c 83       	std	Y+4, r25	; 0x04

    //diagonals
    Matrix_set(DM, 0, 0, d0);
     3da:	00 e0       	ldi	r16, 0x00	; 0
     3dc:	10 e0       	ldi	r17, 0x00	; 0
     3de:	20 ec       	ldi	r18, 0xC0	; 192
     3e0:	3f e7       	ldi	r19, 0x7F	; 127
     3e2:	40 e0       	ldi	r20, 0x00	; 0
     3e4:	50 e0       	ldi	r21, 0x00	; 0
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	70 e0       	ldi	r23, 0x00	; 0
     3ea:	8d 85       	ldd	r24, Y+13	; 0x0d
     3ec:	9e 85       	ldd	r25, Y+14	; 0x0e
     3ee:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <Matrix_set>
    Matrix_set(DM, 1, 1, d0);
     3f2:	00 e0       	ldi	r16, 0x00	; 0
     3f4:	10 e0       	ldi	r17, 0x00	; 0
     3f6:	20 ec       	ldi	r18, 0xC0	; 192
     3f8:	3f e7       	ldi	r19, 0x7F	; 127
     3fa:	41 e0       	ldi	r20, 0x01	; 1
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	61 e0       	ldi	r22, 0x01	; 1
     400:	70 e0       	ldi	r23, 0x00	; 0
     402:	8d 85       	ldd	r24, Y+13	; 0x0d
     404:	9e 85       	ldd	r25, Y+14	; 0x0e
     406:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <Matrix_set>
    Matrix_set(DM, 2, 2, d0);
     40a:	00 e0       	ldi	r16, 0x00	; 0
     40c:	10 e0       	ldi	r17, 0x00	; 0
     40e:	20 ec       	ldi	r18, 0xC0	; 192
     410:	3f e7       	ldi	r19, 0x7F	; 127
     412:	42 e0       	ldi	r20, 0x02	; 2
     414:	50 e0       	ldi	r21, 0x00	; 0
     416:	62 e0       	ldi	r22, 0x02	; 2
     418:	70 e0       	ldi	r23, 0x00	; 0
     41a:	8d 85       	ldd	r24, Y+13	; 0x0d
     41c:	9e 85       	ldd	r25, Y+14	; 0x0e
     41e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <Matrix_set>
    Matrix_set(DM, 3, 3, d0);
     422:	00 e0       	ldi	r16, 0x00	; 0
     424:	10 e0       	ldi	r17, 0x00	; 0
     426:	20 ec       	ldi	r18, 0xC0	; 192
     428:	3f e7       	ldi	r19, 0x7F	; 127
     42a:	43 e0       	ldi	r20, 0x03	; 3
     42c:	50 e0       	ldi	r21, 0x00	; 0
     42e:	63 e0       	ldi	r22, 0x03	; 3
     430:	70 e0       	ldi	r23, 0x00	; 0
     432:	8d 85       	ldd	r24, Y+13	; 0x0d
     434:	9e 85       	ldd	r25, Y+14	; 0x0e
     436:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <Matrix_set>
    
    Matrix_set(DM,0,1, d01);
     43a:	93 01       	movw	r18, r6
     43c:	82 01       	movw	r16, r4
     43e:	41 e0       	ldi	r20, 0x01	; 1
     440:	50 e0       	ldi	r21, 0x00	; 0
     442:	60 e0       	ldi	r22, 0x00	; 0
     444:	70 e0       	ldi	r23, 0x00	; 0
     446:	8d 85       	ldd	r24, Y+13	; 0x0d
     448:	9e 85       	ldd	r25, Y+14	; 0x0e
     44a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <Matrix_set>
    Matrix_set(DM,1,0, d01);
     44e:	93 01       	movw	r18, r6
     450:	82 01       	movw	r16, r4
     452:	40 e0       	ldi	r20, 0x00	; 0
     454:	50 e0       	ldi	r21, 0x00	; 0
     456:	61 e0       	ldi	r22, 0x01	; 1
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	8d 85       	ldd	r24, Y+13	; 0x0d
     45c:	9e 85       	ldd	r25, Y+14	; 0x0e
     45e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <Matrix_set>
    Matrix_set(DM,0,2, d02);
     462:	95 01       	movw	r18, r10
     464:	84 01       	movw	r16, r8
     466:	42 e0       	ldi	r20, 0x02	; 2
     468:	50 e0       	ldi	r21, 0x00	; 0
     46a:	60 e0       	ldi	r22, 0x00	; 0
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	8d 85       	ldd	r24, Y+13	; 0x0d
     470:	9e 85       	ldd	r25, Y+14	; 0x0e
     472:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <Matrix_set>
    Matrix_set(DM,2,0, d02);
     476:	95 01       	movw	r18, r10
     478:	84 01       	movw	r16, r8
     47a:	40 e0       	ldi	r20, 0x00	; 0
     47c:	50 e0       	ldi	r21, 0x00	; 0
     47e:	62 e0       	ldi	r22, 0x02	; 2
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	8d 85       	ldd	r24, Y+13	; 0x0d
     484:	9e 85       	ldd	r25, Y+14	; 0x0e
     486:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <Matrix_set>
    
    Matrix_set(DM,0,3, d03);
     48a:	97 01       	movw	r18, r14
     48c:	86 01       	movw	r16, r12
     48e:	43 e0       	ldi	r20, 0x03	; 3
     490:	50 e0       	ldi	r21, 0x00	; 0
     492:	60 e0       	ldi	r22, 0x00	; 0
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	8d 85       	ldd	r24, Y+13	; 0x0d
     498:	9e 85       	ldd	r25, Y+14	; 0x0e
     49a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <Matrix_set>
    Matrix_set(DM,3,0, d03);
     49e:	97 01       	movw	r18, r14
     4a0:	86 01       	movw	r16, r12
     4a2:	40 e0       	ldi	r20, 0x00	; 0
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	63 e0       	ldi	r22, 0x03	; 3
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	8d 85       	ldd	r24, Y+13	; 0x0d
     4ac:	9e 85       	ldd	r25, Y+14	; 0x0e
     4ae:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <Matrix_set>
    Matrix_set(DM,1,2, d12);
     4b2:	0d 81       	ldd	r16, Y+5	; 0x05
     4b4:	1e 81       	ldd	r17, Y+6	; 0x06
     4b6:	2f 81       	ldd	r18, Y+7	; 0x07
     4b8:	38 85       	ldd	r19, Y+8	; 0x08
     4ba:	42 e0       	ldi	r20, 0x02	; 2
     4bc:	50 e0       	ldi	r21, 0x00	; 0
     4be:	61 e0       	ldi	r22, 0x01	; 1
     4c0:	70 e0       	ldi	r23, 0x00	; 0
     4c2:	8d 85       	ldd	r24, Y+13	; 0x0d
     4c4:	9e 85       	ldd	r25, Y+14	; 0x0e
     4c6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <Matrix_set>
    Matrix_set(DM,2,1, d12);
     4ca:	0d 81       	ldd	r16, Y+5	; 0x05
     4cc:	1e 81       	ldd	r17, Y+6	; 0x06
     4ce:	2f 81       	ldd	r18, Y+7	; 0x07
     4d0:	38 85       	ldd	r19, Y+8	; 0x08
     4d2:	41 e0       	ldi	r20, 0x01	; 1
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	62 e0       	ldi	r22, 0x02	; 2
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	8d 85       	ldd	r24, Y+13	; 0x0d
     4dc:	9e 85       	ldd	r25, Y+14	; 0x0e
     4de:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <Matrix_set>
    
    Matrix_set(DM,1,3, d13);
     4e2:	09 85       	ldd	r16, Y+9	; 0x09
     4e4:	1a 85       	ldd	r17, Y+10	; 0x0a
     4e6:	2b 85       	ldd	r18, Y+11	; 0x0b
     4e8:	3c 85       	ldd	r19, Y+12	; 0x0c
     4ea:	43 e0       	ldi	r20, 0x03	; 3
     4ec:	50 e0       	ldi	r21, 0x00	; 0
     4ee:	61 e0       	ldi	r22, 0x01	; 1
     4f0:	70 e0       	ldi	r23, 0x00	; 0
     4f2:	8d 85       	ldd	r24, Y+13	; 0x0d
     4f4:	9e 85       	ldd	r25, Y+14	; 0x0e
     4f6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <Matrix_set>
    Matrix_set(DM,3,1, d13);
     4fa:	09 85       	ldd	r16, Y+9	; 0x09
     4fc:	1a 85       	ldd	r17, Y+10	; 0x0a
     4fe:	2b 85       	ldd	r18, Y+11	; 0x0b
     500:	3c 85       	ldd	r19, Y+12	; 0x0c
     502:	41 e0       	ldi	r20, 0x01	; 1
     504:	50 e0       	ldi	r21, 0x00	; 0
     506:	63 e0       	ldi	r22, 0x03	; 3
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	8d 85       	ldd	r24, Y+13	; 0x0d
     50c:	9e 85       	ldd	r25, Y+14	; 0x0e
     50e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <Matrix_set>
    Matrix_set(DM,2,3, d23);
     512:	09 81       	ldd	r16, Y+1	; 0x01
     514:	1a 81       	ldd	r17, Y+2	; 0x02
     516:	2b 81       	ldd	r18, Y+3	; 0x03
     518:	3c 81       	ldd	r19, Y+4	; 0x04
     51a:	43 e0       	ldi	r20, 0x03	; 3
     51c:	50 e0       	ldi	r21, 0x00	; 0
     51e:	62 e0       	ldi	r22, 0x02	; 2
     520:	70 e0       	ldi	r23, 0x00	; 0
     522:	8d 85       	ldd	r24, Y+13	; 0x0d
     524:	9e 85       	ldd	r25, Y+14	; 0x0e
     526:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <Matrix_set>
    Matrix_set(DM,3,2, d23);
     52a:	09 81       	ldd	r16, Y+1	; 0x01
     52c:	1a 81       	ldd	r17, Y+2	; 0x02
     52e:	2b 81       	ldd	r18, Y+3	; 0x03
     530:	3c 81       	ldd	r19, Y+4	; 0x04
     532:	42 e0       	ldi	r20, 0x02	; 2
     534:	50 e0       	ldi	r21, 0x00	; 0
     536:	63 e0       	ldi	r22, 0x03	; 3
     538:	70 e0       	ldi	r23, 0x00	; 0
     53a:	8d 85       	ldd	r24, Y+13	; 0x0d
     53c:	9e 85       	ldd	r25, Y+14	; 0x0e
     53e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <Matrix_set>
}
     542:	2e 96       	adiw	r28, 0x0e	; 14
     544:	0f b6       	in	r0, 0x3f	; 63
     546:	f8 94       	cli
     548:	de bf       	out	0x3e, r29	; 62
     54a:	0f be       	out	0x3f, r0	; 63
     54c:	cd bf       	out	0x3d, r28	; 61
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	1f 91       	pop	r17
     554:	0f 91       	pop	r16
     556:	ff 90       	pop	r15
     558:	ef 90       	pop	r14
     55a:	df 90       	pop	r13
     55c:	cf 90       	pop	r12
     55e:	bf 90       	pop	r11
     560:	af 90       	pop	r10
     562:	9f 90       	pop	r9
     564:	8f 90       	pop	r8
     566:	7f 90       	pop	r7
     568:	6f 90       	pop	r6
     56a:	5f 90       	pop	r5
     56c:	4f 90       	pop	r4
     56e:	3f 90       	pop	r3
     570:	2f 90       	pop	r2
     572:	08 95       	ret

00000574 <Util_is_bad_star>:


int Util_is_bad_star(Point *star_wannabe){
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	ec 01       	movw	r28, r24
    if (Point_get_x(star_wannabe)==1023 && Point_get_y(star_wannabe)== 1023)
     57a:	0e 94 65 0d 	call	0x1aca	; 0x1aca <Point_get_x>
     57e:	20 e0       	ldi	r18, 0x00	; 0
     580:	30 ec       	ldi	r19, 0xC0	; 192
     582:	4f e7       	ldi	r20, 0x7F	; 127
     584:	54 e4       	ldi	r21, 0x44	; 68
     586:	0e 94 74 13 	call	0x26e8	; 0x26e8 <__cmpsf2>
     58a:	81 11       	cpse	r24, r1
     58c:	10 c0       	rjmp	.+32     	; 0x5ae <Util_is_bad_star+0x3a>
     58e:	ce 01       	movw	r24, r28
     590:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <Point_get_y>
     594:	d1 e0       	ldi	r29, 0x01	; 1
     596:	c0 e0       	ldi	r28, 0x00	; 0
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 ec       	ldi	r19, 0xC0	; 192
     59c:	4f e7       	ldi	r20, 0x7F	; 127
     59e:	54 e4       	ldi	r21, 0x44	; 68
     5a0:	0e 94 74 13 	call	0x26e8	; 0x26e8 <__cmpsf2>
     5a4:	81 11       	cpse	r24, r1
     5a6:	d0 e0       	ldi	r29, 0x00	; 0
        {return 1;}
     5a8:	8d 2f       	mov	r24, r29
     5aa:	9c 2f       	mov	r25, r28
     5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <Util_is_bad_star+0x3e>
    return 0;
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	90 e0       	ldi	r25, 0x00	; 0
}
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	08 95       	ret

000005b8 <Util_find_intersection>:

int  Util_find_intersection(int *r_c_min,int * r_c_max){
    int p_i1 = r_c_min[0];
     5b8:	fc 01       	movw	r30, r24
     5ba:	20 81       	ld	r18, Z
     5bc:	31 81       	ldd	r19, Z+1	; 0x01
    int p_i2 = r_c_min[1];
     5be:	42 81       	ldd	r20, Z+2	; 0x02
     5c0:	53 81       	ldd	r21, Z+3	; 0x03
    
    if(p_i1== r_c_max[0]||p_i1== r_c_max[1]){
     5c2:	fb 01       	movw	r30, r22
     5c4:	80 81       	ld	r24, Z
     5c6:	91 81       	ldd	r25, Z+1	; 0x01
     5c8:	82 17       	cp	r24, r18
     5ca:	93 07       	cpc	r25, r19
     5cc:	99 f0       	breq	.+38     	; 0x5f4 <Util_find_intersection+0x3c>
     5ce:	62 81       	ldd	r22, Z+2	; 0x02
     5d0:	73 81       	ldd	r23, Z+3	; 0x03
     5d2:	62 17       	cp	r22, r18
     5d4:	73 07       	cpc	r23, r19
     5d6:	49 f0       	breq	.+18     	; 0x5ea <Util_find_intersection+0x32>
        return p_i1;}
    
    else if(p_i2== r_c_max[0]||p_i2== r_c_max[1]){
     5d8:	48 17       	cp	r20, r24
     5da:	59 07       	cpc	r21, r25
     5dc:	41 f0       	breq	.+16     	; 0x5ee <Util_find_intersection+0x36>
     5de:	46 17       	cp	r20, r22
     5e0:	57 07       	cpc	r21, r23
     5e2:	39 f0       	breq	.+14     	; 0x5f2 <Util_find_intersection+0x3a>
        return p_i2;}
    
    //no intersection
    else return NAN;
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	08 95       	ret
int  Util_find_intersection(int *r_c_min,int * r_c_max){
    int p_i1 = r_c_min[0];
    int p_i2 = r_c_min[1];
    
    if(p_i1== r_c_max[0]||p_i1== r_c_max[1]){
        return p_i1;}
     5ea:	cb 01       	movw	r24, r22
     5ec:	08 95       	ret
    
    else if(p_i2== r_c_max[0]||p_i2== r_c_max[1]){
        return p_i2;}
     5ee:	ca 01       	movw	r24, r20
     5f0:	08 95       	ret
     5f2:	ca 01       	movw	r24, r20
    
    //no intersection
    else return NAN;
}
     5f4:	08 95       	ret

000005f6 <Util_find_other_star>:



int Util_find_other_star(int y_pos_star, int * r_c_max){
    if(r_c_max[0]==y_pos_star){
     5f6:	fb 01       	movw	r30, r22
     5f8:	20 81       	ld	r18, Z
     5fa:	31 81       	ldd	r19, Z+1	; 0x01
     5fc:	28 17       	cp	r18, r24
     5fe:	39 07       	cpc	r19, r25
     600:	11 f4       	brne	.+4      	; 0x606 <Util_find_other_star+0x10>
        return r_c_max[1];
     602:	22 81       	ldd	r18, Z+2	; 0x02
     604:	33 81       	ldd	r19, Z+3	; 0x03
    }
    
    else return r_c_max[0];
     606:	c9 01       	movw	r24, r18
     608:	08 95       	ret

0000060a <Matrix_create>:
#include <stdlib.h>
#include <math.h>
#include "matrix.h"
#include "m_general.h"

Matrix *Matrix_create(int rows, int cols){
     60a:	cf 92       	push	r12
     60c:	df 92       	push	r13
     60e:	ef 92       	push	r14
     610:	ff 92       	push	r15
     612:	0f 93       	push	r16
     614:	1f 93       	push	r17
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	7c 01       	movw	r14, r24
     61c:	6b 01       	movw	r12, r22
    int i;
    int total=rows*cols;
     61e:	86 9f       	mul	r24, r22
     620:	80 01       	movw	r16, r0
     622:	87 9f       	mul	r24, r23
     624:	10 0d       	add	r17, r0
     626:	96 9f       	mul	r25, r22
     628:	10 0d       	add	r17, r0
     62a:	11 24       	eor	r1, r1
    Matrix *m=(Matrix*)malloc(sizeof(Matrix));
     62c:	86 e0       	ldi	r24, 0x06	; 6
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <malloc>
     634:	ec 01       	movw	r28, r24
    m->cols=cols;
     636:	d9 82       	std	Y+1, r13	; 0x01
     638:	c8 82       	st	Y, r12
    m->rows=rows;
     63a:	fb 82       	std	Y+3, r15	; 0x03
     63c:	ea 82       	std	Y+2, r14	; 0x02
    m->data=(double*)malloc(sizeof(double)*total);
     63e:	c8 01       	movw	r24, r16
     640:	88 0f       	add	r24, r24
     642:	99 1f       	adc	r25, r25
     644:	88 0f       	add	r24, r24
     646:	99 1f       	adc	r25, r25
     648:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <malloc>
     64c:	9d 83       	std	Y+5, r25	; 0x05
     64e:	8c 83       	std	Y+4, r24	; 0x04
    for (i=0;i<total;i++)m->data[i]=0.0;
     650:	10 16       	cp	r1, r16
     652:	11 06       	cpc	r1, r17
     654:	9c f4       	brge	.+38     	; 0x67c <Matrix_create+0x72>
     656:	40 e0       	ldi	r20, 0x00	; 0
     658:	50 e0       	ldi	r21, 0x00	; 0
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	ec 81       	ldd	r30, Y+4	; 0x04
     660:	fd 81       	ldd	r31, Y+5	; 0x05
     662:	e4 0f       	add	r30, r20
     664:	f5 1f       	adc	r31, r21
     666:	10 82       	st	Z, r1
     668:	11 82       	std	Z+1, r1	; 0x01
     66a:	12 82       	std	Z+2, r1	; 0x02
     66c:	13 82       	std	Z+3, r1	; 0x03
     66e:	2f 5f       	subi	r18, 0xFF	; 255
     670:	3f 4f       	sbci	r19, 0xFF	; 255
     672:	4c 5f       	subi	r20, 0xFC	; 252
     674:	5f 4f       	sbci	r21, 0xFF	; 255
     676:	20 17       	cp	r18, r16
     678:	31 07       	cpc	r19, r17
     67a:	89 f7       	brne	.-30     	; 0x65e <Matrix_create+0x54>
    return(m);
}
     67c:	ce 01       	movw	r24, r28
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	1f 91       	pop	r17
     684:	0f 91       	pop	r16
     686:	ff 90       	pop	r15
     688:	ef 90       	pop	r14
     68a:	df 90       	pop	r13
     68c:	cf 90       	pop	r12
     68e:	08 95       	ret

00000690 <Matrix_get>:
        printf("\n");
    }
}

double Matrix_get(Matrix *m, int i, int j){
    return(m->data[i*m->cols+j]);
     690:	dc 01       	movw	r26, r24
     692:	2d 91       	ld	r18, X+
     694:	3c 91       	ld	r19, X
     696:	11 97       	sbiw	r26, 0x01	; 1
     698:	62 9f       	mul	r22, r18
     69a:	f0 01       	movw	r30, r0
     69c:	63 9f       	mul	r22, r19
     69e:	f0 0d       	add	r31, r0
     6a0:	72 9f       	mul	r23, r18
     6a2:	f0 0d       	add	r31, r0
     6a4:	11 24       	eor	r1, r1
     6a6:	4e 0f       	add	r20, r30
     6a8:	5f 1f       	adc	r21, r31
     6aa:	44 0f       	add	r20, r20
     6ac:	55 1f       	adc	r21, r21
     6ae:	44 0f       	add	r20, r20
     6b0:	55 1f       	adc	r21, r21
     6b2:	14 96       	adiw	r26, 0x04	; 4
     6b4:	ed 91       	ld	r30, X+
     6b6:	fc 91       	ld	r31, X
     6b8:	15 97       	sbiw	r26, 0x05	; 5
     6ba:	e4 0f       	add	r30, r20
     6bc:	f5 1f       	adc	r31, r21
     6be:	60 81       	ld	r22, Z
     6c0:	71 81       	ldd	r23, Z+1	; 0x01
     6c2:	82 81       	ldd	r24, Z+2	; 0x02
     6c4:	93 81       	ldd	r25, Z+3	; 0x03
}
     6c6:	08 95       	ret

000006c8 <Matrix_find_min>:

void Matrix_find_min(int row_col[], Matrix *m){
     6c8:	2f 92       	push	r2
     6ca:	3f 92       	push	r3
     6cc:	4f 92       	push	r4
     6ce:	5f 92       	push	r5
     6d0:	6f 92       	push	r6
     6d2:	7f 92       	push	r7
     6d4:	8f 92       	push	r8
     6d6:	9f 92       	push	r9
     6d8:	af 92       	push	r10
     6da:	bf 92       	push	r11
     6dc:	cf 92       	push	r12
     6de:	df 92       	push	r13
     6e0:	ef 92       	push	r14
     6e2:	ff 92       	push	r15
     6e4:	0f 93       	push	r16
     6e6:	1f 93       	push	r17
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	cd b7       	in	r28, 0x3d	; 61
     6ee:	de b7       	in	r29, 0x3e	; 62
     6f0:	2e 97       	sbiw	r28, 0x0e	; 14
     6f2:	0f b6       	in	r0, 0x3f	; 63
     6f4:	f8 94       	cli
     6f6:	de bf       	out	0x3e, r29	; 62
     6f8:	0f be       	out	0x3f, r0	; 63
     6fa:	cd bf       	out	0x3d, r28	; 61
     6fc:	9c 87       	std	Y+12, r25	; 0x0c
     6fe:	8b 87       	std	Y+11, r24	; 0x0b
     700:	8b 01       	movw	r16, r22
    
    int row=0;
    int col=0;
    
    double min_so_far = Matrix_get(m, 0, 1);
     702:	41 e0       	ldi	r20, 0x01	; 1
     704:	50 e0       	ldi	r21, 0x00	; 0
     706:	60 e0       	ldi	r22, 0x00	; 0
     708:	70 e0       	ldi	r23, 0x00	; 0
     70a:	c8 01       	movw	r24, r16
     70c:	0e 94 48 03 	call	0x690	; 0x690 <Matrix_get>
     710:	96 2e       	mov	r9, r22
     712:	87 2e       	mov	r8, r23
     714:	78 2e       	mov	r7, r24
     716:	69 2e       	mov	r6, r25
    double *p=m->data;
     718:	f8 01       	movw	r30, r16
     71a:	04 80       	ldd	r0, Z+4	; 0x04
     71c:	f5 81       	ldd	r31, Z+5	; 0x05
     71e:	e0 2d       	mov	r30, r0
     720:	fe 83       	std	Y+6, r31	; 0x06
     722:	ed 83       	std	Y+5, r30	; 0x05
    int i,j,d1=m->rows, d2=m->cols;
     724:	f8 01       	movw	r30, r16
     726:	02 80       	ldd	r0, Z+2	; 0x02
     728:	f3 81       	ldd	r31, Z+3	; 0x03
     72a:	e0 2d       	mov	r30, r0
     72c:	f8 87       	std	Y+8, r31	; 0x08
     72e:	ef 83       	std	Y+7, r30	; 0x07
     730:	f8 01       	movw	r30, r16
     732:	a0 80       	ld	r10, Z
     734:	b1 80       	ldd	r11, Z+1	; 0x01
    
    for (i=0;i<d1;i++){
     736:	2f 81       	ldd	r18, Y+7	; 0x07
     738:	38 85       	ldd	r19, Y+8	; 0x08
     73a:	12 16       	cp	r1, r18
     73c:	13 06       	cpc	r1, r19
     73e:	0c f0       	brlt	.+2      	; 0x742 <Matrix_find_min+0x7a>
     740:	56 c0       	rjmp	.+172    	; 0x7ee <Matrix_find_min+0x126>
     742:	c5 01       	movw	r24, r10
     744:	88 0f       	add	r24, r24
     746:	99 1f       	adc	r25, r25
     748:	88 0f       	add	r24, r24
     74a:	99 1f       	adc	r25, r25
     74c:	9a 87       	std	Y+10, r25	; 0x0a
     74e:	89 87       	std	Y+9, r24	; 0x09
     750:	1a 82       	std	Y+2, r1	; 0x02
     752:	19 82       	std	Y+1, r1	; 0x01
}

void Matrix_find_min(int row_col[], Matrix *m){
    
    int row=0;
    int col=0;
     754:	1b 82       	std	Y+3, r1	; 0x03
     756:	1c 82       	std	Y+4, r1	; 0x04
    return(m->data[i*m->cols+j]);
}

void Matrix_find_min(int row_col[], Matrix *m){
    
    int row=0;
     758:	21 2c       	mov	r2, r1
     75a:	31 2c       	mov	r3, r1
     75c:	3c c0       	rjmp	.+120    	; 0x7d6 <Matrix_find_min+0x10e>
    double *p=m->data;
    int i,j,d1=m->rows, d2=m->cols;
    
    for (i=0;i<d1;i++){
        for (j=0;j<d2;j++){
            if((!isnan(*p)) && (*p<min_so_far)){
     75e:	f8 01       	movw	r30, r16
     760:	c1 90       	ld	r12, Z+
     762:	d1 90       	ld	r13, Z+
     764:	e1 90       	ld	r14, Z+
     766:	f1 90       	ld	r15, Z+
     768:	8f 01       	movw	r16, r30
     76a:	a7 01       	movw	r20, r14
     76c:	96 01       	movw	r18, r12
     76e:	c7 01       	movw	r24, r14
     770:	b6 01       	movw	r22, r12
     772:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__unordsf2>
     776:	81 11       	cpse	r24, r1
     778:	14 c0       	rjmp	.+40     	; 0x7a2 <Matrix_find_min+0xda>
     77a:	29 2d       	mov	r18, r9
     77c:	38 2d       	mov	r19, r8
     77e:	47 2d       	mov	r20, r7
     780:	56 2d       	mov	r21, r6
     782:	c7 01       	movw	r24, r14
     784:	b6 01       	movw	r22, r12
     786:	0e 94 74 13 	call	0x26e8	; 0x26e8 <__cmpsf2>
     78a:	88 23       	and	r24, r24
     78c:	54 f4       	brge	.+20     	; 0x7a2 <Matrix_find_min+0xda>
                min_so_far=*p;
     78e:	9c 2c       	mov	r9, r12
     790:	8d 2c       	mov	r8, r13
     792:	7e 2c       	mov	r7, r14
     794:	6f 2c       	mov	r6, r15
     796:	fd 85       	ldd	r31, Y+13	; 0x0d
     798:	fb 83       	std	Y+3, r31	; 0x03
     79a:	2e 85       	ldd	r18, Y+14	; 0x0e
     79c:	2c 83       	std	Y+4, r18	; 0x04
     79e:	24 2c       	mov	r2, r4
     7a0:	35 2c       	mov	r3, r5
    double min_so_far = Matrix_get(m, 0, 1);
    double *p=m->data;
    int i,j,d1=m->rows, d2=m->cols;
    
    for (i=0;i<d1;i++){
        for (j=0;j<d2;j++){
     7a2:	8d 85       	ldd	r24, Y+13	; 0x0d
     7a4:	9e 85       	ldd	r25, Y+14	; 0x0e
     7a6:	01 96       	adiw	r24, 0x01	; 1
     7a8:	9e 87       	std	Y+14, r25	; 0x0e
     7aa:	8d 87       	std	Y+13, r24	; 0x0d
     7ac:	8a 15       	cp	r24, r10
     7ae:	9b 05       	cpc	r25, r11
     7b0:	b1 f6       	brne	.-84     	; 0x75e <Matrix_find_min+0x96>
     7b2:	ed 81       	ldd	r30, Y+5	; 0x05
     7b4:	fe 81       	ldd	r31, Y+6	; 0x06
     7b6:	29 85       	ldd	r18, Y+9	; 0x09
     7b8:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ba:	e2 0f       	add	r30, r18
     7bc:	f3 1f       	adc	r31, r19
     7be:	fe 83       	std	Y+6, r31	; 0x06
     7c0:	ed 83       	std	Y+5, r30	; 0x05
    
    double min_so_far = Matrix_get(m, 0, 1);
    double *p=m->data;
    int i,j,d1=m->rows, d2=m->cols;
    
    for (i=0;i<d1;i++){
     7c2:	89 81       	ldd	r24, Y+1	; 0x01
     7c4:	9a 81       	ldd	r25, Y+2	; 0x02
     7c6:	01 96       	adiw	r24, 0x01	; 1
     7c8:	9a 83       	std	Y+2, r25	; 0x02
     7ca:	89 83       	std	Y+1, r24	; 0x01
     7cc:	ef 81       	ldd	r30, Y+7	; 0x07
     7ce:	f8 85       	ldd	r31, Y+8	; 0x08
     7d0:	8e 17       	cp	r24, r30
     7d2:	9f 07       	cpc	r25, r31
     7d4:	81 f0       	breq	.+32     	; 0x7f6 <Matrix_find_min+0x12e>
        for (j=0;j<d2;j++){
     7d6:	1a 14       	cp	r1, r10
     7d8:	1b 04       	cpc	r1, r11
     7da:	9c f7       	brge	.-26     	; 0x7c2 <Matrix_find_min+0xfa>
     7dc:	0d 81       	ldd	r16, Y+5	; 0x05
     7de:	1e 81       	ldd	r17, Y+6	; 0x06
     7e0:	e1 2c       	mov	r14, r1
     7e2:	f1 2c       	mov	r15, r1
     7e4:	49 80       	ldd	r4, Y+1	; 0x01
     7e6:	5a 80       	ldd	r5, Y+2	; 0x02
     7e8:	fe 86       	std	Y+14, r15	; 0x0e
     7ea:	ed 86       	std	Y+13, r14	; 0x0d
     7ec:	b8 cf       	rjmp	.-144    	; 0x75e <Matrix_find_min+0x96>
}

void Matrix_find_min(int row_col[], Matrix *m){
    
    int row=0;
    int col=0;
     7ee:	1b 82       	std	Y+3, r1	; 0x03
     7f0:	1c 82       	std	Y+4, r1	; 0x04
    return(m->data[i*m->cols+j]);
}

void Matrix_find_min(int row_col[], Matrix *m){
    
    int row=0;
     7f2:	21 2c       	mov	r2, r1
     7f4:	31 2c       	mov	r3, r1
            }
            p++;
        }
    }
    
    row_col[0] = row;
     7f6:	eb 85       	ldd	r30, Y+11	; 0x0b
     7f8:	fc 85       	ldd	r31, Y+12	; 0x0c
     7fa:	20 82       	st	Z, r2
     7fc:	31 82       	std	Z+1, r3	; 0x01
    row_col[1]= col;
     7fe:	2b 81       	ldd	r18, Y+3	; 0x03
     800:	22 83       	std	Z+2, r18	; 0x02
     802:	3c 81       	ldd	r19, Y+4	; 0x04
     804:	33 83       	std	Z+3, r19	; 0x03
}
     806:	2e 96       	adiw	r28, 0x0e	; 14
     808:	0f b6       	in	r0, 0x3f	; 63
     80a:	f8 94       	cli
     80c:	de bf       	out	0x3e, r29	; 62
     80e:	0f be       	out	0x3f, r0	; 63
     810:	cd bf       	out	0x3d, r28	; 61
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	1f 91       	pop	r17
     818:	0f 91       	pop	r16
     81a:	ff 90       	pop	r15
     81c:	ef 90       	pop	r14
     81e:	df 90       	pop	r13
     820:	cf 90       	pop	r12
     822:	bf 90       	pop	r11
     824:	af 90       	pop	r10
     826:	9f 90       	pop	r9
     828:	8f 90       	pop	r8
     82a:	7f 90       	pop	r7
     82c:	6f 90       	pop	r6
     82e:	5f 90       	pop	r5
     830:	4f 90       	pop	r4
     832:	3f 90       	pop	r3
     834:	2f 90       	pop	r2
     836:	08 95       	ret

00000838 <Matrix_find_max>:


void Matrix_find_max(int row_col[], Matrix *m){
     838:	2f 92       	push	r2
     83a:	3f 92       	push	r3
     83c:	4f 92       	push	r4
     83e:	5f 92       	push	r5
     840:	6f 92       	push	r6
     842:	7f 92       	push	r7
     844:	8f 92       	push	r8
     846:	9f 92       	push	r9
     848:	af 92       	push	r10
     84a:	bf 92       	push	r11
     84c:	cf 92       	push	r12
     84e:	df 92       	push	r13
     850:	ef 92       	push	r14
     852:	ff 92       	push	r15
     854:	0f 93       	push	r16
     856:	1f 93       	push	r17
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	cd b7       	in	r28, 0x3d	; 61
     85e:	de b7       	in	r29, 0x3e	; 62
     860:	2e 97       	sbiw	r28, 0x0e	; 14
     862:	0f b6       	in	r0, 0x3f	; 63
     864:	f8 94       	cli
     866:	de bf       	out	0x3e, r29	; 62
     868:	0f be       	out	0x3f, r0	; 63
     86a:	cd bf       	out	0x3d, r28	; 61
     86c:	9c 87       	std	Y+12, r25	; 0x0c
     86e:	8b 87       	std	Y+11, r24	; 0x0b
     870:	8b 01       	movw	r16, r22
    int row=0;
    int col=0;
    
    double max_so_far = Matrix_get(m, 0, 1);
     872:	41 e0       	ldi	r20, 0x01	; 1
     874:	50 e0       	ldi	r21, 0x00	; 0
     876:	60 e0       	ldi	r22, 0x00	; 0
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	c8 01       	movw	r24, r16
     87c:	0e 94 48 03 	call	0x690	; 0x690 <Matrix_get>
     880:	96 2e       	mov	r9, r22
     882:	87 2e       	mov	r8, r23
     884:	78 2e       	mov	r7, r24
     886:	69 2e       	mov	r6, r25
    double *p=m->data;
     888:	f8 01       	movw	r30, r16
     88a:	04 80       	ldd	r0, Z+4	; 0x04
     88c:	f5 81       	ldd	r31, Z+5	; 0x05
     88e:	e0 2d       	mov	r30, r0
     890:	fe 83       	std	Y+6, r31	; 0x06
     892:	ed 83       	std	Y+5, r30	; 0x05
    int i,j,d1=m->rows, d2=m->cols;
     894:	f8 01       	movw	r30, r16
     896:	02 80       	ldd	r0, Z+2	; 0x02
     898:	f3 81       	ldd	r31, Z+3	; 0x03
     89a:	e0 2d       	mov	r30, r0
     89c:	f8 87       	std	Y+8, r31	; 0x08
     89e:	ef 83       	std	Y+7, r30	; 0x07
     8a0:	f8 01       	movw	r30, r16
     8a2:	a0 80       	ld	r10, Z
     8a4:	b1 80       	ldd	r11, Z+1	; 0x01
    
    for (i=0;i<d1;i++){
     8a6:	2f 81       	ldd	r18, Y+7	; 0x07
     8a8:	38 85       	ldd	r19, Y+8	; 0x08
     8aa:	12 16       	cp	r1, r18
     8ac:	13 06       	cpc	r1, r19
     8ae:	0c f0       	brlt	.+2      	; 0x8b2 <Matrix_find_max+0x7a>
     8b0:	56 c0       	rjmp	.+172    	; 0x95e <Matrix_find_max+0x126>
     8b2:	c5 01       	movw	r24, r10
     8b4:	88 0f       	add	r24, r24
     8b6:	99 1f       	adc	r25, r25
     8b8:	88 0f       	add	r24, r24
     8ba:	99 1f       	adc	r25, r25
     8bc:	9a 87       	std	Y+10, r25	; 0x0a
     8be:	89 87       	std	Y+9, r24	; 0x09
     8c0:	1a 82       	std	Y+2, r1	; 0x02
     8c2:	19 82       	std	Y+1, r1	; 0x01
}


void Matrix_find_max(int row_col[], Matrix *m){
    int row=0;
    int col=0;
     8c4:	1b 82       	std	Y+3, r1	; 0x03
     8c6:	1c 82       	std	Y+4, r1	; 0x04
    row_col[1]= col;
}


void Matrix_find_max(int row_col[], Matrix *m){
    int row=0;
     8c8:	21 2c       	mov	r2, r1
     8ca:	31 2c       	mov	r3, r1
     8cc:	3c c0       	rjmp	.+120    	; 0x946 <Matrix_find_max+0x10e>
    double *p=m->data;
    int i,j,d1=m->rows, d2=m->cols;
    
    for (i=0;i<d1;i++){
        for (j=0;j<d2;j++){
            if((!isnan(*p)) && (*p>max_so_far)){
     8ce:	f8 01       	movw	r30, r16
     8d0:	c1 90       	ld	r12, Z+
     8d2:	d1 90       	ld	r13, Z+
     8d4:	e1 90       	ld	r14, Z+
     8d6:	f1 90       	ld	r15, Z+
     8d8:	8f 01       	movw	r16, r30
     8da:	a7 01       	movw	r20, r14
     8dc:	96 01       	movw	r18, r12
     8de:	c7 01       	movw	r24, r14
     8e0:	b6 01       	movw	r22, r12
     8e2:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__unordsf2>
     8e6:	81 11       	cpse	r24, r1
     8e8:	14 c0       	rjmp	.+40     	; 0x912 <Matrix_find_max+0xda>
     8ea:	29 2d       	mov	r18, r9
     8ec:	38 2d       	mov	r19, r8
     8ee:	47 2d       	mov	r20, r7
     8f0:	56 2d       	mov	r21, r6
     8f2:	c7 01       	movw	r24, r14
     8f4:	b6 01       	movw	r22, r12
     8f6:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__gesf2>
     8fa:	18 16       	cp	r1, r24
     8fc:	54 f4       	brge	.+20     	; 0x912 <Matrix_find_max+0xda>
                max_so_far=*p;
     8fe:	9c 2c       	mov	r9, r12
     900:	8d 2c       	mov	r8, r13
     902:	7e 2c       	mov	r7, r14
     904:	6f 2c       	mov	r6, r15
     906:	fd 85       	ldd	r31, Y+13	; 0x0d
     908:	fb 83       	std	Y+3, r31	; 0x03
     90a:	2e 85       	ldd	r18, Y+14	; 0x0e
     90c:	2c 83       	std	Y+4, r18	; 0x04
     90e:	24 2c       	mov	r2, r4
     910:	35 2c       	mov	r3, r5
    double max_so_far = Matrix_get(m, 0, 1);
    double *p=m->data;
    int i,j,d1=m->rows, d2=m->cols;
    
    for (i=0;i<d1;i++){
        for (j=0;j<d2;j++){
     912:	8d 85       	ldd	r24, Y+13	; 0x0d
     914:	9e 85       	ldd	r25, Y+14	; 0x0e
     916:	01 96       	adiw	r24, 0x01	; 1
     918:	9e 87       	std	Y+14, r25	; 0x0e
     91a:	8d 87       	std	Y+13, r24	; 0x0d
     91c:	8a 15       	cp	r24, r10
     91e:	9b 05       	cpc	r25, r11
     920:	b1 f6       	brne	.-84     	; 0x8ce <Matrix_find_max+0x96>
     922:	ed 81       	ldd	r30, Y+5	; 0x05
     924:	fe 81       	ldd	r31, Y+6	; 0x06
     926:	29 85       	ldd	r18, Y+9	; 0x09
     928:	3a 85       	ldd	r19, Y+10	; 0x0a
     92a:	e2 0f       	add	r30, r18
     92c:	f3 1f       	adc	r31, r19
     92e:	fe 83       	std	Y+6, r31	; 0x06
     930:	ed 83       	std	Y+5, r30	; 0x05
    
    double max_so_far = Matrix_get(m, 0, 1);
    double *p=m->data;
    int i,j,d1=m->rows, d2=m->cols;
    
    for (i=0;i<d1;i++){
     932:	89 81       	ldd	r24, Y+1	; 0x01
     934:	9a 81       	ldd	r25, Y+2	; 0x02
     936:	01 96       	adiw	r24, 0x01	; 1
     938:	9a 83       	std	Y+2, r25	; 0x02
     93a:	89 83       	std	Y+1, r24	; 0x01
     93c:	ef 81       	ldd	r30, Y+7	; 0x07
     93e:	f8 85       	ldd	r31, Y+8	; 0x08
     940:	8e 17       	cp	r24, r30
     942:	9f 07       	cpc	r25, r31
     944:	81 f0       	breq	.+32     	; 0x966 <Matrix_find_max+0x12e>
        for (j=0;j<d2;j++){
     946:	1a 14       	cp	r1, r10
     948:	1b 04       	cpc	r1, r11
     94a:	9c f7       	brge	.-26     	; 0x932 <Matrix_find_max+0xfa>
     94c:	0d 81       	ldd	r16, Y+5	; 0x05
     94e:	1e 81       	ldd	r17, Y+6	; 0x06
     950:	e1 2c       	mov	r14, r1
     952:	f1 2c       	mov	r15, r1
     954:	49 80       	ldd	r4, Y+1	; 0x01
     956:	5a 80       	ldd	r5, Y+2	; 0x02
     958:	fe 86       	std	Y+14, r15	; 0x0e
     95a:	ed 86       	std	Y+13, r14	; 0x0d
     95c:	b8 cf       	rjmp	.-144    	; 0x8ce <Matrix_find_max+0x96>
}


void Matrix_find_max(int row_col[], Matrix *m){
    int row=0;
    int col=0;
     95e:	1b 82       	std	Y+3, r1	; 0x03
     960:	1c 82       	std	Y+4, r1	; 0x04
    row_col[1]= col;
}


void Matrix_find_max(int row_col[], Matrix *m){
    int row=0;
     962:	21 2c       	mov	r2, r1
     964:	31 2c       	mov	r3, r1
            }
            p++;
        }
    }
    
    row_col[0] = row;
     966:	eb 85       	ldd	r30, Y+11	; 0x0b
     968:	fc 85       	ldd	r31, Y+12	; 0x0c
     96a:	20 82       	st	Z, r2
     96c:	31 82       	std	Z+1, r3	; 0x01
    row_col[1]= col;
     96e:	2b 81       	ldd	r18, Y+3	; 0x03
     970:	22 83       	std	Z+2, r18	; 0x02
     972:	3c 81       	ldd	r19, Y+4	; 0x04
     974:	33 83       	std	Z+3, r19	; 0x03
}
     976:	2e 96       	adiw	r28, 0x0e	; 14
     978:	0f b6       	in	r0, 0x3f	; 63
     97a:	f8 94       	cli
     97c:	de bf       	out	0x3e, r29	; 62
     97e:	0f be       	out	0x3f, r0	; 63
     980:	cd bf       	out	0x3d, r28	; 61
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	1f 91       	pop	r17
     988:	0f 91       	pop	r16
     98a:	ff 90       	pop	r15
     98c:	ef 90       	pop	r14
     98e:	df 90       	pop	r13
     990:	cf 90       	pop	r12
     992:	bf 90       	pop	r11
     994:	af 90       	pop	r10
     996:	9f 90       	pop	r9
     998:	8f 90       	pop	r8
     99a:	7f 90       	pop	r7
     99c:	6f 90       	pop	r6
     99e:	5f 90       	pop	r5
     9a0:	4f 90       	pop	r4
     9a2:	3f 90       	pop	r3
     9a4:	2f 90       	pop	r2
     9a6:	08 95       	ret

000009a8 <Matrix_set>:

void Matrix_set(Matrix *m, int i, int j, double value){
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
    m->data[i*m->cols+j]=value;
     9ac:	fc 01       	movw	r30, r24
     9ae:	a0 81       	ld	r26, Z
     9b0:	b1 81       	ldd	r27, Z+1	; 0x01
     9b2:	6a 9f       	mul	r22, r26
     9b4:	f0 01       	movw	r30, r0
     9b6:	6b 9f       	mul	r22, r27
     9b8:	f0 0d       	add	r31, r0
     9ba:	7a 9f       	mul	r23, r26
     9bc:	f0 0d       	add	r31, r0
     9be:	11 24       	eor	r1, r1
     9c0:	4e 0f       	add	r20, r30
     9c2:	5f 1f       	adc	r21, r31
     9c4:	44 0f       	add	r20, r20
     9c6:	55 1f       	adc	r21, r21
     9c8:	44 0f       	add	r20, r20
     9ca:	55 1f       	adc	r21, r21
     9cc:	dc 01       	movw	r26, r24
     9ce:	14 96       	adiw	r26, 0x04	; 4
     9d0:	ed 91       	ld	r30, X+
     9d2:	fc 91       	ld	r31, X
     9d4:	15 97       	sbiw	r26, 0x05	; 5
     9d6:	e4 0f       	add	r30, r20
     9d8:	f5 1f       	adc	r31, r21
     9da:	00 83       	st	Z, r16
     9dc:	11 83       	std	Z+1, r17	; 0x01
     9de:	22 83       	std	Z+2, r18	; 0x02
     9e0:	33 83       	std	Z+3, r19	; 0x03
}
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	08 95       	ret

000009e8 <Matrix_inverse_3_by_3_H>:


//calculates the inverse of a 3 by 3 matrix m, where the last line is 0 0 1 and stores it in inverse
void Matrix_inverse_3_by_3_H(Matrix *m, Matrix *inverse){
     9e8:	2f 92       	push	r2
     9ea:	3f 92       	push	r3
     9ec:	4f 92       	push	r4
     9ee:	5f 92       	push	r5
     9f0:	6f 92       	push	r6
     9f2:	7f 92       	push	r7
     9f4:	8f 92       	push	r8
     9f6:	9f 92       	push	r9
     9f8:	af 92       	push	r10
     9fa:	bf 92       	push	r11
     9fc:	cf 92       	push	r12
     9fe:	df 92       	push	r13
     a00:	ef 92       	push	r14
     a02:	ff 92       	push	r15
     a04:	0f 93       	push	r16
     a06:	1f 93       	push	r17
     a08:	cf 93       	push	r28
     a0a:	df 93       	push	r29
     a0c:	cd b7       	in	r28, 0x3d	; 61
     a0e:	de b7       	in	r29, 0x3e	; 62
     a10:	a0 97       	sbiw	r28, 0x20	; 32
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	f8 94       	cli
     a16:	de bf       	out	0x3e, r29	; 62
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	cd bf       	out	0x3d, r28	; 61
     a1c:	1c 01       	movw	r2, r24
     a1e:	8b 01       	movw	r16, r22
	float detMat = (Matrix_get(m,0,0)*Matrix_get(m,1,1)*Matrix_get(m,2,2))
     a20:	40 e0       	ldi	r20, 0x00	; 0
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	0e 94 48 03 	call	0x690	; 0x690 <Matrix_get>
     a2c:	6b 01       	movw	r12, r22
     a2e:	7c 01       	movw	r14, r24
     a30:	41 e0       	ldi	r20, 0x01	; 1
     a32:	50 e0       	ldi	r21, 0x00	; 0
     a34:	61 e0       	ldi	r22, 0x01	; 1
     a36:	70 e0       	ldi	r23, 0x00	; 0
     a38:	c1 01       	movw	r24, r2
     a3a:	0e 94 48 03 	call	0x690	; 0x690 <Matrix_get>
     a3e:	9b 01       	movw	r18, r22
     a40:	ac 01       	movw	r20, r24
     a42:	c7 01       	movw	r24, r14
     a44:	b6 01       	movw	r22, r12
     a46:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
     a4a:	4b 01       	movw	r8, r22
     a4c:	5c 01       	movw	r10, r24
     a4e:	42 e0       	ldi	r20, 0x02	; 2
     a50:	50 e0       	ldi	r21, 0x00	; 0
     a52:	62 e0       	ldi	r22, 0x02	; 2
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	c1 01       	movw	r24, r2
     a58:	0e 94 48 03 	call	0x690	; 0x690 <Matrix_get>
     a5c:	6b 01       	movw	r12, r22
     a5e:	7c 01       	movw	r14, r24
     a60:	9b 01       	movw	r18, r22
     a62:	ac 01       	movw	r20, r24
     a64:	c5 01       	movw	r24, r10
     a66:	b4 01       	movw	r22, r8
     a68:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
     a6c:	4b 01       	movw	r8, r22
     a6e:	5c 01       	movw	r10, r24
				-  (Matrix_get(m,0,1)*Matrix_get(m,1,0)*Matrix_get(m,2,2));
     a70:	41 e0       	ldi	r20, 0x01	; 1
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	c1 01       	movw	r24, r2
     a7a:	0e 94 48 03 	call	0x690	; 0x690 <Matrix_get>
     a7e:	2b 01       	movw	r4, r22
     a80:	3c 01       	movw	r6, r24
     a82:	40 e0       	ldi	r20, 0x00	; 0
     a84:	50 e0       	ldi	r21, 0x00	; 0
     a86:	61 e0       	ldi	r22, 0x01	; 1
     a88:	70 e0       	ldi	r23, 0x00	; 0
     a8a:	c1 01       	movw	r24, r2
     a8c:	0e 94 48 03 	call	0x690	; 0x690 <Matrix_get>
     a90:	9b 01       	movw	r18, r22
     a92:	ac 01       	movw	r20, r24
     a94:	c3 01       	movw	r24, r6
     a96:	b2 01       	movw	r22, r4
     a98:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
     a9c:	9b 01       	movw	r18, r22
     a9e:	ac 01       	movw	r20, r24
     aa0:	c7 01       	movw	r24, r14
     aa2:	b6 01       	movw	r22, r12
     aa4:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
     aa8:	9b 01       	movw	r18, r22
     aaa:	ac 01       	movw	r20, r24
}


//calculates the inverse of a 3 by 3 matrix m, where the last line is 0 0 1 and stores it in inverse
void Matrix_inverse_3_by_3_H(Matrix *m, Matrix *inverse){
	float detMat = (Matrix_get(m,0,0)*Matrix_get(m,1,1)*Matrix_get(m,2,2))
     aac:	c5 01       	movw	r24, r10
     aae:	b4 01       	movw	r22, r8
     ab0:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
     ab4:	6b 01       	movw	r12, r22
     ab6:	7c 01       	movw	r14, r24
				-  (Matrix_get(m,0,1)*Matrix_get(m,1,0)*Matrix_get(m,2,2));
				
	float a00 = m->data[0*m->cols+0];
     ab8:	d1 01       	movw	r26, r2
     aba:	14 96       	adiw	r26, 0x04	; 4
     abc:	ad 90       	ld	r10, X+
     abe:	bc 90       	ld	r11, X
     ac0:	15 97       	sbiw	r26, 0x05	; 5
     ac2:	d5 01       	movw	r26, r10
     ac4:	4d 91       	ld	r20, X+
     ac6:	5d 91       	ld	r21, X+
     ac8:	6d 91       	ld	r22, X+
     aca:	7c 91       	ld	r23, X
     acc:	13 97       	sbiw	r26, 0x03	; 3
     ace:	49 83       	std	Y+1, r20	; 0x01
     ad0:	5a 83       	std	Y+2, r21	; 0x02
     ad2:	6b 83       	std	Y+3, r22	; 0x03
     ad4:	7c 83       	std	Y+4, r23	; 0x04
	float a01 = m->data[0*m->cols+1];
     ad6:	14 96       	adiw	r26, 0x04	; 4
     ad8:	4d 91       	ld	r20, X+
     ada:	5d 91       	ld	r21, X+
     adc:	6d 91       	ld	r22, X+
     ade:	7c 91       	ld	r23, X
     ae0:	17 97       	sbiw	r26, 0x07	; 7
     ae2:	4d 83       	std	Y+5, r20	; 0x05
     ae4:	5e 83       	std	Y+6, r21	; 0x06
     ae6:	6f 83       	std	Y+7, r22	; 0x07
     ae8:	78 87       	std	Y+8, r23	; 0x08
	float a02 = m->data[0*m->cols+2];
     aea:	18 96       	adiw	r26, 0x08	; 8
     aec:	4d 91       	ld	r20, X+
     aee:	5d 91       	ld	r21, X+
     af0:	6d 91       	ld	r22, X+
     af2:	7c 91       	ld	r23, X
     af4:	1b 97       	sbiw	r26, 0x0b	; 11
     af6:	49 87       	std	Y+9, r20	; 0x09
     af8:	5a 87       	std	Y+10, r21	; 0x0a
     afa:	6b 87       	std	Y+11, r22	; 0x0b
     afc:	7c 87       	std	Y+12, r23	; 0x0c
	
	float a10 = m->data[1*m->cols+0];
     afe:	f1 01       	movw	r30, r2
     b00:	20 81       	ld	r18, Z
     b02:	31 81       	ldd	r19, Z+1	; 0x01
     b04:	c9 01       	movw	r24, r18
     b06:	88 0f       	add	r24, r24
     b08:	99 1f       	adc	r25, r25
     b0a:	88 0f       	add	r24, r24
     b0c:	99 1f       	adc	r25, r25
     b0e:	a8 0f       	add	r26, r24
     b10:	b9 1f       	adc	r27, r25
     b12:	4d 91       	ld	r20, X+
     b14:	5d 91       	ld	r21, X+
     b16:	6d 91       	ld	r22, X+
     b18:	7c 91       	ld	r23, X
     b1a:	13 97       	sbiw	r26, 0x03	; 3
     b1c:	4d 87       	std	Y+13, r20	; 0x0d
     b1e:	5e 87       	std	Y+14, r21	; 0x0e
     b20:	6f 87       	std	Y+15, r22	; 0x0f
     b22:	78 8b       	std	Y+16, r23	; 0x10
	float a11 = m->data[1*m->cols+1];
     b24:	14 96       	adiw	r26, 0x04	; 4
     b26:	4d 91       	ld	r20, X+
     b28:	5d 91       	ld	r21, X+
     b2a:	6d 91       	ld	r22, X+
     b2c:	7c 91       	ld	r23, X
     b2e:	17 97       	sbiw	r26, 0x07	; 7
     b30:	49 8b       	std	Y+17, r20	; 0x11
     b32:	5a 8b       	std	Y+18, r21	; 0x12
     b34:	6b 8b       	std	Y+19, r22	; 0x13
     b36:	7c 8b       	std	Y+20, r23	; 0x14
	float a12 = m->data[1*m->cols+2];
     b38:	18 96       	adiw	r26, 0x08	; 8
     b3a:	4d 91       	ld	r20, X+
     b3c:	5d 91       	ld	r21, X+
     b3e:	6d 91       	ld	r22, X+
     b40:	7c 91       	ld	r23, X
     b42:	1b 97       	sbiw	r26, 0x0b	; 11
     b44:	4d 8b       	std	Y+21, r20	; 0x15
     b46:	5e 8b       	std	Y+22, r21	; 0x16
     b48:	6f 8b       	std	Y+23, r22	; 0x17
     b4a:	78 8f       	std	Y+24, r23	; 0x18
	
	float a20 = m->data[2*m->cols+0];
     b4c:	22 0f       	add	r18, r18
     b4e:	33 1f       	adc	r19, r19
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	22 0f       	add	r18, r18
     b56:	33 1f       	adc	r19, r19
     b58:	a8 0f       	add	r26, r24
     b5a:	b9 1f       	adc	r27, r25
     b5c:	6d 91       	ld	r22, X+
     b5e:	7d 91       	ld	r23, X+
     b60:	8d 91       	ld	r24, X+
     b62:	9c 91       	ld	r25, X
     b64:	69 8f       	std	Y+25, r22	; 0x19
     b66:	7a 8f       	std	Y+26, r23	; 0x1a
     b68:	8b 8f       	std	Y+27, r24	; 0x1b
     b6a:	9c 8f       	std	Y+28, r25	; 0x1c
	float a21 = m->data[2*m->cols+1];
     b6c:	2a 0d       	add	r18, r10
     b6e:	3b 1d       	adc	r19, r11
     b70:	d9 01       	movw	r26, r18
     b72:	14 96       	adiw	r26, 0x04	; 4
     b74:	8d 91       	ld	r24, X+
     b76:	9d 91       	ld	r25, X+
     b78:	0d 90       	ld	r0, X+
     b7a:	bc 91       	ld	r27, X
     b7c:	a0 2d       	mov	r26, r0
     b7e:	8d 8f       	std	Y+29, r24	; 0x1d
     b80:	9e 8f       	std	Y+30, r25	; 0x1e
     b82:	af 8f       	std	Y+31, r26	; 0x1f
     b84:	b8 a3       	std	Y+32, r27	; 0x20
	float a22 = m->data[2*m->cols+2];
     b86:	f9 01       	movw	r30, r18
     b88:	80 84       	ldd	r8, Z+8	; 0x08
     b8a:	91 84       	ldd	r9, Z+9	; 0x09
     b8c:	a2 84       	ldd	r10, Z+10	; 0x0a
     b8e:	b3 84       	ldd	r11, Z+11	; 0x0b
	
	//inverse->data[i*inverse->cols+j]=value;
	
	inverse->data[0*inverse->cols+0] =Matrix_determinant_2_by_2(a11,a12,a21,a22)/detMat;
     b90:	d8 01       	movw	r26, r16
     b92:	14 96       	adiw	r26, 0x04	; 4
     b94:	2d 90       	ld	r2, X+
     b96:	3c 90       	ld	r3, X
     b98:	15 97       	sbiw	r26, 0x05	; 5
	
}


float Matrix_determinant_2_by_2(float a, float b, float c, float d){
	return a*d - c*b;
     b9a:	a5 01       	movw	r20, r10
     b9c:	94 01       	movw	r18, r8
     b9e:	69 89       	ldd	r22, Y+17	; 0x11
     ba0:	7a 89       	ldd	r23, Y+18	; 0x12
     ba2:	8b 89       	ldd	r24, Y+19	; 0x13
     ba4:	9c 89       	ldd	r25, Y+20	; 0x14
     ba6:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
     baa:	2b 01       	movw	r4, r22
     bac:	3c 01       	movw	r6, r24
     bae:	2d 8d       	ldd	r18, Y+29	; 0x1d
     bb0:	3e 8d       	ldd	r19, Y+30	; 0x1e
     bb2:	4f 8d       	ldd	r20, Y+31	; 0x1f
     bb4:	58 a1       	ldd	r21, Y+32	; 0x20
     bb6:	6d 89       	ldd	r22, Y+21	; 0x15
     bb8:	7e 89       	ldd	r23, Y+22	; 0x16
     bba:	8f 89       	ldd	r24, Y+23	; 0x17
     bbc:	98 8d       	ldd	r25, Y+24	; 0x18
     bbe:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
     bc2:	9b 01       	movw	r18, r22
     bc4:	ac 01       	movw	r20, r24
     bc6:	c3 01       	movw	r24, r6
     bc8:	b2 01       	movw	r22, r4
     bca:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
	float a21 = m->data[2*m->cols+1];
	float a22 = m->data[2*m->cols+2];
	
	//inverse->data[i*inverse->cols+j]=value;
	
	inverse->data[0*inverse->cols+0] =Matrix_determinant_2_by_2(a11,a12,a21,a22)/detMat;
     bce:	a7 01       	movw	r20, r14
     bd0:	96 01       	movw	r18, r12
     bd2:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__divsf3>
     bd6:	f1 01       	movw	r30, r2
     bd8:	60 83       	st	Z, r22
     bda:	71 83       	std	Z+1, r23	; 0x01
     bdc:	82 83       	std	Z+2, r24	; 0x02
     bde:	93 83       	std	Z+3, r25	; 0x03
	inverse->data[0*inverse->cols+1]=Matrix_determinant_2_by_2(a02,a01,a22,a21)/detMat;
     be0:	d8 01       	movw	r26, r16
     be2:	14 96       	adiw	r26, 0x04	; 4
     be4:	2d 90       	ld	r2, X+
     be6:	3c 90       	ld	r3, X
     be8:	15 97       	sbiw	r26, 0x05	; 5
	
}


float Matrix_determinant_2_by_2(float a, float b, float c, float d){
	return a*d - c*b;
     bea:	2d 8d       	ldd	r18, Y+29	; 0x1d
     bec:	3e 8d       	ldd	r19, Y+30	; 0x1e
     bee:	4f 8d       	ldd	r20, Y+31	; 0x1f
     bf0:	58 a1       	ldd	r21, Y+32	; 0x20
     bf2:	69 85       	ldd	r22, Y+9	; 0x09
     bf4:	7a 85       	ldd	r23, Y+10	; 0x0a
     bf6:	8b 85       	ldd	r24, Y+11	; 0x0b
     bf8:	9c 85       	ldd	r25, Y+12	; 0x0c
     bfa:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
     bfe:	2b 01       	movw	r4, r22
     c00:	3c 01       	movw	r6, r24
     c02:	a5 01       	movw	r20, r10
     c04:	94 01       	movw	r18, r8
     c06:	6d 81       	ldd	r22, Y+5	; 0x05
     c08:	7e 81       	ldd	r23, Y+6	; 0x06
     c0a:	8f 81       	ldd	r24, Y+7	; 0x07
     c0c:	98 85       	ldd	r25, Y+8	; 0x08
     c0e:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
     c12:	9b 01       	movw	r18, r22
     c14:	ac 01       	movw	r20, r24
     c16:	c3 01       	movw	r24, r6
     c18:	b2 01       	movw	r22, r4
     c1a:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
	float a22 = m->data[2*m->cols+2];
	
	//inverse->data[i*inverse->cols+j]=value;
	
	inverse->data[0*inverse->cols+0] =Matrix_determinant_2_by_2(a11,a12,a21,a22)/detMat;
	inverse->data[0*inverse->cols+1]=Matrix_determinant_2_by_2(a02,a01,a22,a21)/detMat;
     c1e:	a7 01       	movw	r20, r14
     c20:	96 01       	movw	r18, r12
     c22:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__divsf3>
     c26:	f1 01       	movw	r30, r2
     c28:	64 83       	std	Z+4, r22	; 0x04
     c2a:	75 83       	std	Z+5, r23	; 0x05
     c2c:	86 83       	std	Z+6, r24	; 0x06
     c2e:	97 83       	std	Z+7, r25	; 0x07
	inverse->data[0*inverse->cols+2]=Matrix_determinant_2_by_2(a01,a02,a11,a12)/detMat;
     c30:	d8 01       	movw	r26, r16
     c32:	14 96       	adiw	r26, 0x04	; 4
     c34:	2d 90       	ld	r2, X+
     c36:	3c 90       	ld	r3, X
     c38:	15 97       	sbiw	r26, 0x05	; 5
	
}


float Matrix_determinant_2_by_2(float a, float b, float c, float d){
	return a*d - c*b;
     c3a:	2d 89       	ldd	r18, Y+21	; 0x15
     c3c:	3e 89       	ldd	r19, Y+22	; 0x16
     c3e:	4f 89       	ldd	r20, Y+23	; 0x17
     c40:	58 8d       	ldd	r21, Y+24	; 0x18
     c42:	6d 81       	ldd	r22, Y+5	; 0x05
     c44:	7e 81       	ldd	r23, Y+6	; 0x06
     c46:	8f 81       	ldd	r24, Y+7	; 0x07
     c48:	98 85       	ldd	r25, Y+8	; 0x08
     c4a:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
     c4e:	2b 01       	movw	r4, r22
     c50:	3c 01       	movw	r6, r24
     c52:	29 89       	ldd	r18, Y+17	; 0x11
     c54:	3a 89       	ldd	r19, Y+18	; 0x12
     c56:	4b 89       	ldd	r20, Y+19	; 0x13
     c58:	5c 89       	ldd	r21, Y+20	; 0x14
     c5a:	69 85       	ldd	r22, Y+9	; 0x09
     c5c:	7a 85       	ldd	r23, Y+10	; 0x0a
     c5e:	8b 85       	ldd	r24, Y+11	; 0x0b
     c60:	9c 85       	ldd	r25, Y+12	; 0x0c
     c62:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
     c66:	9b 01       	movw	r18, r22
     c68:	ac 01       	movw	r20, r24
     c6a:	c3 01       	movw	r24, r6
     c6c:	b2 01       	movw	r22, r4
     c6e:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
	
	//inverse->data[i*inverse->cols+j]=value;
	
	inverse->data[0*inverse->cols+0] =Matrix_determinant_2_by_2(a11,a12,a21,a22)/detMat;
	inverse->data[0*inverse->cols+1]=Matrix_determinant_2_by_2(a02,a01,a22,a21)/detMat;
	inverse->data[0*inverse->cols+2]=Matrix_determinant_2_by_2(a01,a02,a11,a12)/detMat;
     c72:	a7 01       	movw	r20, r14
     c74:	96 01       	movw	r18, r12
     c76:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__divsf3>
     c7a:	f1 01       	movw	r30, r2
     c7c:	60 87       	std	Z+8, r22	; 0x08
     c7e:	71 87       	std	Z+9, r23	; 0x09
     c80:	82 87       	std	Z+10, r24	; 0x0a
     c82:	93 87       	std	Z+11, r25	; 0x0b
	
	inverse->data[1*inverse->cols+0]=Matrix_determinant_2_by_2(a12,a10,a22,a20)/detMat;
     c84:	d8 01       	movw	r26, r16
     c86:	8d 91       	ld	r24, X+
     c88:	9c 91       	ld	r25, X
     c8a:	11 97       	sbiw	r26, 0x01	; 1
     c8c:	9c 01       	movw	r18, r24
     c8e:	22 0f       	add	r18, r18
     c90:	33 1f       	adc	r19, r19
     c92:	22 0f       	add	r18, r18
     c94:	33 1f       	adc	r19, r19
     c96:	14 96       	adiw	r26, 0x04	; 4
     c98:	8d 91       	ld	r24, X+
     c9a:	9c 91       	ld	r25, X
     c9c:	15 97       	sbiw	r26, 0x05	; 5
     c9e:	19 01       	movw	r2, r18
     ca0:	28 0e       	add	r2, r24
     ca2:	39 1e       	adc	r3, r25
	
}


float Matrix_determinant_2_by_2(float a, float b, float c, float d){
	return a*d - c*b;
     ca4:	29 8d       	ldd	r18, Y+25	; 0x19
     ca6:	3a 8d       	ldd	r19, Y+26	; 0x1a
     ca8:	4b 8d       	ldd	r20, Y+27	; 0x1b
     caa:	5c 8d       	ldd	r21, Y+28	; 0x1c
     cac:	6d 89       	ldd	r22, Y+21	; 0x15
     cae:	7e 89       	ldd	r23, Y+22	; 0x16
     cb0:	8f 89       	ldd	r24, Y+23	; 0x17
     cb2:	98 8d       	ldd	r25, Y+24	; 0x18
     cb4:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
     cb8:	2b 01       	movw	r4, r22
     cba:	3c 01       	movw	r6, r24
     cbc:	a5 01       	movw	r20, r10
     cbe:	94 01       	movw	r18, r8
     cc0:	6d 85       	ldd	r22, Y+13	; 0x0d
     cc2:	7e 85       	ldd	r23, Y+14	; 0x0e
     cc4:	8f 85       	ldd	r24, Y+15	; 0x0f
     cc6:	98 89       	ldd	r25, Y+16	; 0x10
     cc8:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
     ccc:	9b 01       	movw	r18, r22
     cce:	ac 01       	movw	r20, r24
     cd0:	c3 01       	movw	r24, r6
     cd2:	b2 01       	movw	r22, r4
     cd4:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
	
	inverse->data[0*inverse->cols+0] =Matrix_determinant_2_by_2(a11,a12,a21,a22)/detMat;
	inverse->data[0*inverse->cols+1]=Matrix_determinant_2_by_2(a02,a01,a22,a21)/detMat;
	inverse->data[0*inverse->cols+2]=Matrix_determinant_2_by_2(a01,a02,a11,a12)/detMat;
	
	inverse->data[1*inverse->cols+0]=Matrix_determinant_2_by_2(a12,a10,a22,a20)/detMat;
     cd8:	a7 01       	movw	r20, r14
     cda:	96 01       	movw	r18, r12
     cdc:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__divsf3>
     ce0:	f1 01       	movw	r30, r2
     ce2:	60 83       	st	Z, r22
     ce4:	71 83       	std	Z+1, r23	; 0x01
     ce6:	82 83       	std	Z+2, r24	; 0x02
     ce8:	93 83       	std	Z+3, r25	; 0x03
	inverse->data[1*inverse->cols+1]=Matrix_determinant_2_by_2(a00,a02,a20,a22)/detMat;
     cea:	d8 01       	movw	r26, r16
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	11 97       	sbiw	r26, 0x01	; 1
     cf2:	9c 01       	movw	r18, r24
     cf4:	22 0f       	add	r18, r18
     cf6:	33 1f       	adc	r19, r19
     cf8:	22 0f       	add	r18, r18
     cfa:	33 1f       	adc	r19, r19
     cfc:	14 96       	adiw	r26, 0x04	; 4
     cfe:	8d 91       	ld	r24, X+
     d00:	9c 91       	ld	r25, X
     d02:	15 97       	sbiw	r26, 0x05	; 5
     d04:	39 01       	movw	r6, r18
     d06:	68 0e       	add	r6, r24
     d08:	79 1e       	adc	r7, r25
	
}


float Matrix_determinant_2_by_2(float a, float b, float c, float d){
	return a*d - c*b;
     d0a:	a5 01       	movw	r20, r10
     d0c:	94 01       	movw	r18, r8
     d0e:	69 81       	ldd	r22, Y+1	; 0x01
     d10:	7a 81       	ldd	r23, Y+2	; 0x02
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	9c 81       	ldd	r25, Y+4	; 0x04
     d16:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
     d1a:	4b 01       	movw	r8, r22
     d1c:	5c 01       	movw	r10, r24
     d1e:	29 8d       	ldd	r18, Y+25	; 0x19
     d20:	3a 8d       	ldd	r19, Y+26	; 0x1a
     d22:	4b 8d       	ldd	r20, Y+27	; 0x1b
     d24:	5c 8d       	ldd	r21, Y+28	; 0x1c
     d26:	69 85       	ldd	r22, Y+9	; 0x09
     d28:	7a 85       	ldd	r23, Y+10	; 0x0a
     d2a:	8b 85       	ldd	r24, Y+11	; 0x0b
     d2c:	9c 85       	ldd	r25, Y+12	; 0x0c
     d2e:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
     d32:	9b 01       	movw	r18, r22
     d34:	ac 01       	movw	r20, r24
     d36:	c5 01       	movw	r24, r10
     d38:	b4 01       	movw	r22, r8
     d3a:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
	inverse->data[0*inverse->cols+0] =Matrix_determinant_2_by_2(a11,a12,a21,a22)/detMat;
	inverse->data[0*inverse->cols+1]=Matrix_determinant_2_by_2(a02,a01,a22,a21)/detMat;
	inverse->data[0*inverse->cols+2]=Matrix_determinant_2_by_2(a01,a02,a11,a12)/detMat;
	
	inverse->data[1*inverse->cols+0]=Matrix_determinant_2_by_2(a12,a10,a22,a20)/detMat;
	inverse->data[1*inverse->cols+1]=Matrix_determinant_2_by_2(a00,a02,a20,a22)/detMat;
     d3e:	a7 01       	movw	r20, r14
     d40:	96 01       	movw	r18, r12
     d42:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__divsf3>
     d46:	f3 01       	movw	r30, r6
     d48:	64 83       	std	Z+4, r22	; 0x04
     d4a:	75 83       	std	Z+5, r23	; 0x05
     d4c:	86 83       	std	Z+6, r24	; 0x06
     d4e:	97 83       	std	Z+7, r25	; 0x07
	inverse->data[1*inverse->cols+2]=Matrix_determinant_2_by_2(a02,a00,a12,a10)/detMat;
     d50:	d8 01       	movw	r26, r16
     d52:	8d 91       	ld	r24, X+
     d54:	9c 91       	ld	r25, X
     d56:	11 97       	sbiw	r26, 0x01	; 1
     d58:	9c 01       	movw	r18, r24
     d5a:	22 0f       	add	r18, r18
     d5c:	33 1f       	adc	r19, r19
     d5e:	22 0f       	add	r18, r18
     d60:	33 1f       	adc	r19, r19
     d62:	14 96       	adiw	r26, 0x04	; 4
     d64:	8d 91       	ld	r24, X+
     d66:	9c 91       	ld	r25, X
     d68:	15 97       	sbiw	r26, 0x05	; 5
     d6a:	39 01       	movw	r6, r18
     d6c:	68 0e       	add	r6, r24
     d6e:	79 1e       	adc	r7, r25
	
}


float Matrix_determinant_2_by_2(float a, float b, float c, float d){
	return a*d - c*b;
     d70:	2d 85       	ldd	r18, Y+13	; 0x0d
     d72:	3e 85       	ldd	r19, Y+14	; 0x0e
     d74:	4f 85       	ldd	r20, Y+15	; 0x0f
     d76:	58 89       	ldd	r21, Y+16	; 0x10
     d78:	69 85       	ldd	r22, Y+9	; 0x09
     d7a:	7a 85       	ldd	r23, Y+10	; 0x0a
     d7c:	8b 85       	ldd	r24, Y+11	; 0x0b
     d7e:	9c 85       	ldd	r25, Y+12	; 0x0c
     d80:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
     d84:	4b 01       	movw	r8, r22
     d86:	5c 01       	movw	r10, r24
     d88:	2d 89       	ldd	r18, Y+21	; 0x15
     d8a:	3e 89       	ldd	r19, Y+22	; 0x16
     d8c:	4f 89       	ldd	r20, Y+23	; 0x17
     d8e:	58 8d       	ldd	r21, Y+24	; 0x18
     d90:	69 81       	ldd	r22, Y+1	; 0x01
     d92:	7a 81       	ldd	r23, Y+2	; 0x02
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	9c 81       	ldd	r25, Y+4	; 0x04
     d98:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
     d9c:	9b 01       	movw	r18, r22
     d9e:	ac 01       	movw	r20, r24
     da0:	c5 01       	movw	r24, r10
     da2:	b4 01       	movw	r22, r8
     da4:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
	inverse->data[0*inverse->cols+1]=Matrix_determinant_2_by_2(a02,a01,a22,a21)/detMat;
	inverse->data[0*inverse->cols+2]=Matrix_determinant_2_by_2(a01,a02,a11,a12)/detMat;
	
	inverse->data[1*inverse->cols+0]=Matrix_determinant_2_by_2(a12,a10,a22,a20)/detMat;
	inverse->data[1*inverse->cols+1]=Matrix_determinant_2_by_2(a00,a02,a20,a22)/detMat;
	inverse->data[1*inverse->cols+2]=Matrix_determinant_2_by_2(a02,a00,a12,a10)/detMat;
     da8:	a7 01       	movw	r20, r14
     daa:	96 01       	movw	r18, r12
     dac:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__divsf3>
     db0:	f3 01       	movw	r30, r6
     db2:	60 87       	std	Z+8, r22	; 0x08
     db4:	71 87       	std	Z+9, r23	; 0x09
     db6:	82 87       	std	Z+10, r24	; 0x0a
     db8:	93 87       	std	Z+11, r25	; 0x0b
	
	inverse->data[2*inverse->cols+0]=Matrix_determinant_2_by_2(a10,a11,a20,a21)/detMat;
     dba:	d8 01       	movw	r26, r16
     dbc:	8d 91       	ld	r24, X+
     dbe:	9c 91       	ld	r25, X
     dc0:	11 97       	sbiw	r26, 0x01	; 1
     dc2:	9c 01       	movw	r18, r24
     dc4:	22 0f       	add	r18, r18
     dc6:	33 1f       	adc	r19, r19
     dc8:	22 0f       	add	r18, r18
     dca:	33 1f       	adc	r19, r19
     dcc:	22 0f       	add	r18, r18
     dce:	33 1f       	adc	r19, r19
     dd0:	14 96       	adiw	r26, 0x04	; 4
     dd2:	8d 91       	ld	r24, X+
     dd4:	9c 91       	ld	r25, X
     dd6:	15 97       	sbiw	r26, 0x05	; 5
     dd8:	39 01       	movw	r6, r18
     dda:	68 0e       	add	r6, r24
     ddc:	79 1e       	adc	r7, r25
	
}


float Matrix_determinant_2_by_2(float a, float b, float c, float d){
	return a*d - c*b;
     dde:	2d 8d       	ldd	r18, Y+29	; 0x1d
     de0:	3e 8d       	ldd	r19, Y+30	; 0x1e
     de2:	4f 8d       	ldd	r20, Y+31	; 0x1f
     de4:	58 a1       	ldd	r21, Y+32	; 0x20
     de6:	6d 85       	ldd	r22, Y+13	; 0x0d
     de8:	7e 85       	ldd	r23, Y+14	; 0x0e
     dea:	8f 85       	ldd	r24, Y+15	; 0x0f
     dec:	98 89       	ldd	r25, Y+16	; 0x10
     dee:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
     df2:	4b 01       	movw	r8, r22
     df4:	5c 01       	movw	r10, r24
     df6:	29 8d       	ldd	r18, Y+25	; 0x19
     df8:	3a 8d       	ldd	r19, Y+26	; 0x1a
     dfa:	4b 8d       	ldd	r20, Y+27	; 0x1b
     dfc:	5c 8d       	ldd	r21, Y+28	; 0x1c
     dfe:	69 89       	ldd	r22, Y+17	; 0x11
     e00:	7a 89       	ldd	r23, Y+18	; 0x12
     e02:	8b 89       	ldd	r24, Y+19	; 0x13
     e04:	9c 89       	ldd	r25, Y+20	; 0x14
     e06:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
     e0a:	9b 01       	movw	r18, r22
     e0c:	ac 01       	movw	r20, r24
     e0e:	c5 01       	movw	r24, r10
     e10:	b4 01       	movw	r22, r8
     e12:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
	
	inverse->data[1*inverse->cols+0]=Matrix_determinant_2_by_2(a12,a10,a22,a20)/detMat;
	inverse->data[1*inverse->cols+1]=Matrix_determinant_2_by_2(a00,a02,a20,a22)/detMat;
	inverse->data[1*inverse->cols+2]=Matrix_determinant_2_by_2(a02,a00,a12,a10)/detMat;
	
	inverse->data[2*inverse->cols+0]=Matrix_determinant_2_by_2(a10,a11,a20,a21)/detMat;
     e16:	a7 01       	movw	r20, r14
     e18:	96 01       	movw	r18, r12
     e1a:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__divsf3>
     e1e:	f3 01       	movw	r30, r6
     e20:	60 83       	st	Z, r22
     e22:	71 83       	std	Z+1, r23	; 0x01
     e24:	82 83       	std	Z+2, r24	; 0x02
     e26:	93 83       	std	Z+3, r25	; 0x03
	inverse->data[2*inverse->cols+1]=Matrix_determinant_2_by_2(a01,a00,a21,a20)/detMat;
     e28:	d8 01       	movw	r26, r16
     e2a:	8d 91       	ld	r24, X+
     e2c:	9c 91       	ld	r25, X
     e2e:	11 97       	sbiw	r26, 0x01	; 1
     e30:	9c 01       	movw	r18, r24
     e32:	22 0f       	add	r18, r18
     e34:	33 1f       	adc	r19, r19
     e36:	22 0f       	add	r18, r18
     e38:	33 1f       	adc	r19, r19
     e3a:	22 0f       	add	r18, r18
     e3c:	33 1f       	adc	r19, r19
     e3e:	14 96       	adiw	r26, 0x04	; 4
     e40:	8d 91       	ld	r24, X+
     e42:	9c 91       	ld	r25, X
     e44:	15 97       	sbiw	r26, 0x05	; 5
     e46:	39 01       	movw	r6, r18
     e48:	68 0e       	add	r6, r24
     e4a:	79 1e       	adc	r7, r25
	
}


float Matrix_determinant_2_by_2(float a, float b, float c, float d){
	return a*d - c*b;
     e4c:	29 8d       	ldd	r18, Y+25	; 0x19
     e4e:	3a 8d       	ldd	r19, Y+26	; 0x1a
     e50:	4b 8d       	ldd	r20, Y+27	; 0x1b
     e52:	5c 8d       	ldd	r21, Y+28	; 0x1c
     e54:	6d 81       	ldd	r22, Y+5	; 0x05
     e56:	7e 81       	ldd	r23, Y+6	; 0x06
     e58:	8f 81       	ldd	r24, Y+7	; 0x07
     e5a:	98 85       	ldd	r25, Y+8	; 0x08
     e5c:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
     e60:	4b 01       	movw	r8, r22
     e62:	5c 01       	movw	r10, r24
     e64:	2d 8d       	ldd	r18, Y+29	; 0x1d
     e66:	3e 8d       	ldd	r19, Y+30	; 0x1e
     e68:	4f 8d       	ldd	r20, Y+31	; 0x1f
     e6a:	58 a1       	ldd	r21, Y+32	; 0x20
     e6c:	69 81       	ldd	r22, Y+1	; 0x01
     e6e:	7a 81       	ldd	r23, Y+2	; 0x02
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	9c 81       	ldd	r25, Y+4	; 0x04
     e74:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
     e78:	9b 01       	movw	r18, r22
     e7a:	ac 01       	movw	r20, r24
     e7c:	c5 01       	movw	r24, r10
     e7e:	b4 01       	movw	r22, r8
     e80:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
	inverse->data[1*inverse->cols+0]=Matrix_determinant_2_by_2(a12,a10,a22,a20)/detMat;
	inverse->data[1*inverse->cols+1]=Matrix_determinant_2_by_2(a00,a02,a20,a22)/detMat;
	inverse->data[1*inverse->cols+2]=Matrix_determinant_2_by_2(a02,a00,a12,a10)/detMat;
	
	inverse->data[2*inverse->cols+0]=Matrix_determinant_2_by_2(a10,a11,a20,a21)/detMat;
	inverse->data[2*inverse->cols+1]=Matrix_determinant_2_by_2(a01,a00,a21,a20)/detMat;
     e84:	a7 01       	movw	r20, r14
     e86:	96 01       	movw	r18, r12
     e88:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__divsf3>
     e8c:	f3 01       	movw	r30, r6
     e8e:	64 83       	std	Z+4, r22	; 0x04
     e90:	75 83       	std	Z+5, r23	; 0x05
     e92:	86 83       	std	Z+6, r24	; 0x06
     e94:	97 83       	std	Z+7, r25	; 0x07
	inverse->data[2*inverse->cols+2]=Matrix_determinant_2_by_2(a00,a01,a10,a11)/detMat;
     e96:	d8 01       	movw	r26, r16
     e98:	8d 91       	ld	r24, X+
     e9a:	9c 91       	ld	r25, X
     e9c:	11 97       	sbiw	r26, 0x01	; 1
     e9e:	9c 01       	movw	r18, r24
     ea0:	22 0f       	add	r18, r18
     ea2:	33 1f       	adc	r19, r19
     ea4:	22 0f       	add	r18, r18
     ea6:	33 1f       	adc	r19, r19
     ea8:	22 0f       	add	r18, r18
     eaa:	33 1f       	adc	r19, r19
     eac:	14 96       	adiw	r26, 0x04	; 4
     eae:	8d 91       	ld	r24, X+
     eb0:	9c 91       	ld	r25, X
     eb2:	15 97       	sbiw	r26, 0x05	; 5
     eb4:	89 01       	movw	r16, r18
     eb6:	08 0f       	add	r16, r24
     eb8:	19 1f       	adc	r17, r25
	
}


float Matrix_determinant_2_by_2(float a, float b, float c, float d){
	return a*d - c*b;
     eba:	29 89       	ldd	r18, Y+17	; 0x11
     ebc:	3a 89       	ldd	r19, Y+18	; 0x12
     ebe:	4b 89       	ldd	r20, Y+19	; 0x13
     ec0:	5c 89       	ldd	r21, Y+20	; 0x14
     ec2:	69 81       	ldd	r22, Y+1	; 0x01
     ec4:	7a 81       	ldd	r23, Y+2	; 0x02
     ec6:	8b 81       	ldd	r24, Y+3	; 0x03
     ec8:	9c 81       	ldd	r25, Y+4	; 0x04
     eca:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
     ece:	4b 01       	movw	r8, r22
     ed0:	5c 01       	movw	r10, r24
     ed2:	2d 85       	ldd	r18, Y+13	; 0x0d
     ed4:	3e 85       	ldd	r19, Y+14	; 0x0e
     ed6:	4f 85       	ldd	r20, Y+15	; 0x0f
     ed8:	58 89       	ldd	r21, Y+16	; 0x10
     eda:	6d 81       	ldd	r22, Y+5	; 0x05
     edc:	7e 81       	ldd	r23, Y+6	; 0x06
     ede:	8f 81       	ldd	r24, Y+7	; 0x07
     ee0:	98 85       	ldd	r25, Y+8	; 0x08
     ee2:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
     ee6:	9b 01       	movw	r18, r22
     ee8:	ac 01       	movw	r20, r24
     eea:	c5 01       	movw	r24, r10
     eec:	b4 01       	movw	r22, r8
     eee:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
	inverse->data[1*inverse->cols+1]=Matrix_determinant_2_by_2(a00,a02,a20,a22)/detMat;
	inverse->data[1*inverse->cols+2]=Matrix_determinant_2_by_2(a02,a00,a12,a10)/detMat;
	
	inverse->data[2*inverse->cols+0]=Matrix_determinant_2_by_2(a10,a11,a20,a21)/detMat;
	inverse->data[2*inverse->cols+1]=Matrix_determinant_2_by_2(a01,a00,a21,a20)/detMat;
	inverse->data[2*inverse->cols+2]=Matrix_determinant_2_by_2(a00,a01,a10,a11)/detMat;
     ef2:	a7 01       	movw	r20, r14
     ef4:	96 01       	movw	r18, r12
     ef6:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__divsf3>
     efa:	f8 01       	movw	r30, r16
     efc:	60 87       	std	Z+8, r22	; 0x08
     efe:	71 87       	std	Z+9, r23	; 0x09
     f00:	82 87       	std	Z+10, r24	; 0x0a
     f02:	93 87       	std	Z+11, r25	; 0x0b
	
}
     f04:	a0 96       	adiw	r28, 0x20	; 32
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	f8 94       	cli
     f0a:	de bf       	out	0x3e, r29	; 62
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	cd bf       	out	0x3d, r28	; 61
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
     f14:	1f 91       	pop	r17
     f16:	0f 91       	pop	r16
     f18:	ff 90       	pop	r15
     f1a:	ef 90       	pop	r14
     f1c:	df 90       	pop	r13
     f1e:	cf 90       	pop	r12
     f20:	bf 90       	pop	r11
     f22:	af 90       	pop	r10
     f24:	9f 90       	pop	r9
     f26:	8f 90       	pop	r8
     f28:	7f 90       	pop	r7
     f2a:	6f 90       	pop	r6
     f2c:	5f 90       	pop	r5
     f2e:	4f 90       	pop	r4
     f30:	3f 90       	pop	r3
     f32:	2f 90       	pop	r2
     f34:	08 95       	ret

00000f36 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
     f36:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
     f38:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
     f3a:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
     f3c:	8c e0       	ldi	r24, 0x0C	; 12
     f3e:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
     f42:	e9 e6       	ldi	r30, 0x69	; 105
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	80 62       	ori	r24, 0x20	; 32
     f4a:	80 83       	st	Z, r24
     f4c:	80 81       	ld	r24, Z
     f4e:	8f 7e       	andi	r24, 0xEF	; 239
     f50:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
     f52:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
     f54:	78 94       	sei
     f56:	08 95       	ret

00000f58 <m_usb_init>:
 **************************************************************************/

// initialize USB serial
void m_usb_init(void)
{
	HW_CONFIG();
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
     f5e:	80 ea       	ldi	r24, 0xA0	; 160
     f60:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
     f64:	82 e1       	ldi	r24, 0x12	; 18
     f66:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
     f68:	09 b4       	in	r0, 0x29	; 41
     f6a:	00 fe       	sbrs	r0, 0
     f6c:	fd cf       	rjmp	.-6      	; 0xf68 <m_usb_init+0x10>
        USB_CONFIG();				// start USB clock
     f6e:	80 e9       	ldi	r24, 0x90	; 144
     f70:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
     f74:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
     f78:	10 92 15 01 	sts	0x0115, r1
	cdc_line_rtsdtr = 0;
     f7c:	10 92 12 01 	sts	0x0112, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
     f80:	8c e0       	ldi	r24, 0x0C	; 12
     f82:	80 93 e2 00 	sts	0x00E2, r24
	sei();
     f86:	78 94       	sei
     f88:	08 95       	ret

00000f8a <m_usb_rx_available>:
// number of bytes available in the receive buffer
unsigned char m_usb_rx_available(void)
{
	uint8_t n=0, intr_state;

	intr_state = SREG;
     f8a:	9f b7       	in	r25, 0x3f	; 63
	cli();
     f8c:	f8 94       	cli
	if (usb_configuration) {
     f8e:	80 91 15 01 	lds	r24, 0x0115
     f92:	88 23       	and	r24, r24
     f94:	31 f0       	breq	.+12     	; 0xfa2 <m_usb_rx_available+0x18>
		UENUM = CDC_RX_ENDPOINT;
     f96:	83 e0       	ldi	r24, 0x03	; 3
     f98:	80 93 e9 00 	sts	0x00E9, r24
		n = UEBCLX;
     f9c:	80 91 f2 00 	lds	r24, 0x00F2
     fa0:	01 c0       	rjmp	.+2      	; 0xfa4 <m_usb_rx_available+0x1a>
}

// number of bytes available in the receive buffer
unsigned char m_usb_rx_available(void)
{
	uint8_t n=0, intr_state;
     fa2:	80 e0       	ldi	r24, 0x00	; 0
	cli();
	if (usb_configuration) {
		UENUM = CDC_RX_ENDPOINT;
		n = UEBCLX;
	}
	SREG = intr_state;
     fa4:	9f bf       	out	0x3f, r25	; 63
	return (unsigned char)n;
}
     fa6:	08 95       	ret

00000fa8 <m_usb_tx_char>:
	}
}

// transmit a character.  0 returned on success, -1 on error
char m_usb_tx_char(unsigned char c)
{
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     fac:	90 91 15 01 	lds	r25, 0x0115
     fb0:	99 23       	and	r25, r25
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <m_usb_tx_char+0xe>
     fb4:	4c c0       	rjmp	.+152    	; 0x104e <m_usb_tx_char+0xa6>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     fb6:	9f b7       	in	r25, 0x3f	; 63
	cli();
     fb8:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     fba:	24 e0       	ldi	r18, 0x04	; 4
     fbc:	20 93 e9 00 	sts	0x00E9, r18
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
     fc0:	20 91 13 01 	lds	r18, 0x0113
     fc4:	22 23       	and	r18, r18
     fc6:	49 f0       	breq	.+18     	; 0xfda <m_usb_tx_char+0x32>
		if (!(UEINTX & (1<<RWAL))) {
     fc8:	20 91 e8 00 	lds	r18, 0x00E8
     fcc:	25 fd       	sbrc	r18, 5
     fce:	03 c0       	rjmp	.+6      	; 0xfd6 <m_usb_tx_char+0x2e>
			SREG = intr_state;
     fd0:	9f bf       	out	0x3f, r25	; 63
			return -1;
     fd2:	8f ef       	ldi	r24, 0xFF	; 255
     fd4:	41 c0       	rjmp	.+130    	; 0x1058 <m_usb_tx_char+0xb0>
		}
		transmit_previous_timeout = 0;
     fd6:	10 92 13 01 	sts	0x0113, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
     fda:	30 91 e4 00 	lds	r19, 0x00E4
     fde:	37 5e       	subi	r19, 0xE7	; 231
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     fe0:	20 91 e8 00 	lds	r18, 0x00E8
     fe4:	25 fd       	sbrc	r18, 5
     fe6:	24 c0       	rjmp	.+72     	; 0x1030 <m_usb_tx_char+0x88>
		SREG = intr_state;
     fe8:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     fea:	90 91 e4 00 	lds	r25, 0x00E4
     fee:	93 17       	cp	r25, r19
     ff0:	81 f0       	breq	.+32     	; 0x1012 <m_usb_tx_char+0x6a>
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     ff2:	90 91 15 01 	lds	r25, 0x0115
     ff6:	99 23       	and	r25, r25
     ff8:	61 f1       	breq	.+88     	; 0x1052 <m_usb_tx_char+0xaa>
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
     ffa:	a9 ee       	ldi	r26, 0xE9	; 233
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	44 e0       	ldi	r20, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    1000:	e8 ee       	ldi	r30, 0xE8	; 232
    1002:	f0 e0       	ldi	r31, 0x00	; 0
		SREG = intr_state;
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    1004:	c4 ee       	ldi	r28, 0xE4	; 228
    1006:	d0 e0       	ldi	r29, 0x00	; 0
    1008:	0d c0       	rjmp	.+26     	; 0x1024 <m_usb_tx_char+0x7c>
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
		SREG = intr_state;
    100a:	9f bf       	out	0x3f, r25	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
    100c:	98 81       	ld	r25, Y
    100e:	93 13       	cpse	r25, r19
    1010:	05 c0       	rjmp	.+10     	; 0x101c <m_usb_tx_char+0x74>
			transmit_previous_timeout = 1;
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	80 93 13 01 	sts	0x0113, r24
			return -1;
    1018:	8f ef       	ldi	r24, 0xFF	; 255
    101a:	1e c0       	rjmp	.+60     	; 0x1058 <m_usb_tx_char+0xb0>
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    101c:	90 91 15 01 	lds	r25, 0x0115
    1020:	99 23       	and	r25, r25
    1022:	c9 f0       	breq	.+50     	; 0x1056 <m_usb_tx_char+0xae>
		// get ready to try checking again
		intr_state = SREG;
    1024:	9f b7       	in	r25, 0x3f	; 63
		cli();
    1026:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
    1028:	4c 93       	st	X, r20
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
    102a:	20 81       	ld	r18, Z
    102c:	25 ff       	sbrs	r18, 5
    102e:	ed cf       	rjmp	.-38     	; 0x100a <m_usb_tx_char+0x62>
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
	}
	// actually write the byte into the FIFO
	UEDATX = (uint8_t)c;
    1030:	80 93 f1 00 	sts	0x00F1, r24
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    1034:	80 91 e8 00 	lds	r24, 0x00E8
    1038:	85 fd       	sbrc	r24, 5
    103a:	03 c0       	rjmp	.+6      	; 0x1042 <m_usb_tx_char+0x9a>
    103c:	8a e3       	ldi	r24, 0x3A	; 58
    103e:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    1042:	85 e0       	ldi	r24, 0x05	; 5
    1044:	80 93 14 01 	sts	0x0114, r24
	SREG = intr_state;
    1048:	9f bf       	out	0x3f, r25	; 63
	return 0;
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	05 c0       	rjmp	.+10     	; 0x1058 <m_usb_tx_char+0xb0>
char m_usb_tx_char(unsigned char c)
{
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
    104e:	8f ef       	ldi	r24, 0xFF	; 255
    1050:	03 c0       	rjmp	.+6      	; 0x1058 <m_usb_tx_char+0xb0>
		if (UDFNUML == timeout) {
			transmit_previous_timeout = 1;
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
    1052:	8f ef       	ldi	r24, 0xFF	; 255
    1054:	01 c0       	rjmp	.+2      	; 0x1058 <m_usb_tx_char+0xb0>
    1056:	8f ef       	ldi	r24, 0xFF	; 255
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	SREG = intr_state;
	return 0;
}
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	08 95       	ret

0000105e <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    105e:	1f 92       	push	r1
    1060:	0f 92       	push	r0
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	0f 92       	push	r0
    1066:	11 24       	eor	r1, r1
    1068:	8f 93       	push	r24
    106a:	9f 93       	push	r25
    106c:	ef 93       	push	r30
    106e:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    1070:	e1 ee       	ldi	r30, 0xE1	; 225
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
        UDINT = 0;
    1076:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    1078:	83 ff       	sbrs	r24, 3
    107a:	11 c0       	rjmp	.+34     	; 0x109e <__vector_10+0x40>
		UENUM = 0;
    107c:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    1080:	91 e0       	ldi	r25, 0x01	; 1
    1082:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    1086:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    108a:	92 e1       	ldi	r25, 0x12	; 18
    108c:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    1090:	98 e0       	ldi	r25, 0x08	; 8
    1092:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    1096:	10 92 15 01 	sts	0x0115, r1
		cdc_line_rtsdtr = 0;
    109a:	10 92 12 01 	sts	0x0112, r1
        }
	if (intbits & (1<<SOFI)) {
    109e:	82 ff       	sbrs	r24, 2
    10a0:	13 c0       	rjmp	.+38     	; 0x10c8 <__vector_10+0x6a>
		if (usb_configuration) {
    10a2:	80 91 15 01 	lds	r24, 0x0115
    10a6:	88 23       	and	r24, r24
    10a8:	79 f0       	breq	.+30     	; 0x10c8 <__vector_10+0x6a>
			t = transmit_flush_timer;
    10aa:	80 91 14 01 	lds	r24, 0x0114
			if (t) {
    10ae:	88 23       	and	r24, r24
    10b0:	59 f0       	breq	.+22     	; 0x10c8 <__vector_10+0x6a>
				transmit_flush_timer = --t;
    10b2:	81 50       	subi	r24, 0x01	; 1
    10b4:	80 93 14 01 	sts	0x0114, r24
				if (!t) {
    10b8:	81 11       	cpse	r24, r1
    10ba:	06 c0       	rjmp	.+12     	; 0x10c8 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    10bc:	84 e0       	ldi	r24, 0x04	; 4
    10be:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    10c2:	8a e3       	ldi	r24, 0x3A	; 58
    10c4:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    10c8:	ff 91       	pop	r31
    10ca:	ef 91       	pop	r30
    10cc:	9f 91       	pop	r25
    10ce:	8f 91       	pop	r24
    10d0:	0f 90       	pop	r0
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	0f 90       	pop	r0
    10d6:	1f 90       	pop	r1
    10d8:	18 95       	reti

000010da <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    10da:	1f 92       	push	r1
    10dc:	0f 92       	push	r0
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	0f 92       	push	r0
    10e2:	11 24       	eor	r1, r1
    10e4:	0f 93       	push	r16
    10e6:	1f 93       	push	r17
    10e8:	2f 93       	push	r18
    10ea:	3f 93       	push	r19
    10ec:	4f 93       	push	r20
    10ee:	5f 93       	push	r21
    10f0:	6f 93       	push	r22
    10f2:	7f 93       	push	r23
    10f4:	8f 93       	push	r24
    10f6:	9f 93       	push	r25
    10f8:	af 93       	push	r26
    10fa:	bf 93       	push	r27
    10fc:	cf 93       	push	r28
    10fe:	df 93       	push	r29
    1100:	ef 93       	push	r30
    1102:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    1104:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    1108:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    110c:	83 ff       	sbrs	r24, 3
    110e:	4e c1       	rjmp	.+668    	; 0x13ac <__vector_11+0x2d2>
                bmRequestType = UEDATX;
    1110:	e1 ef       	ldi	r30, 0xF1	; 241
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	c0 81       	ld	r28, Z
                bRequest = UEDATX;
    1116:	40 81       	ld	r20, Z
                wValue = UEDATX;
    1118:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    111a:	80 81       	ld	r24, Z
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	38 2b       	or	r19, r24
                wIndex = UEDATX;
    1120:	80 81       	ld	r24, Z
                wIndex |= (UEDATX << 8);
    1122:	50 81       	ld	r21, Z
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	bc 01       	movw	r22, r24
    1128:	75 2b       	or	r23, r21
                wLength = UEDATX;
    112a:	b0 81       	ld	r27, Z
                wLength |= (UEDATX << 8);
    112c:	a0 81       	ld	r26, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    112e:	82 ef       	ldi	r24, 0xF2	; 242
    1130:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
    1134:	46 30       	cpi	r20, 0x06	; 6
    1136:	09 f0       	breq	.+2      	; 0x113a <__vector_11+0x60>
    1138:	58 c0       	rjmp	.+176    	; 0x11ea <__vector_11+0x110>
    113a:	04 c0       	rjmp	.+8      	; 0x1144 <__vector_11+0x6a>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    113c:	81 e2       	ldi	r24, 0x21	; 33
    113e:	80 93 eb 00 	sts	0x00EB, r24
					return;
    1142:	3b c1       	rjmp	.+630    	; 0x13ba <__vector_11+0x2e0>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
    1144:	c6 e0       	ldi	r28, 0x06	; 6
    1146:	88 ef       	ldi	r24, 0xF8	; 248
    1148:	90 e0       	ldi	r25, 0x00	; 0
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    114a:	fc 01       	movw	r30, r24
    114c:	45 91       	lpm	r20, Z+
    114e:	54 91       	lpm	r21, Z
				if (desc_val != wValue) {
    1150:	24 17       	cp	r18, r20
    1152:	35 07       	cpc	r19, r21
    1154:	11 f0       	breq	.+4      	; 0x115a <__vector_11+0x80>
					list += sizeof(struct descriptor_list_struct);
    1156:	07 96       	adiw	r24, 0x07	; 7
					continue;
    1158:	23 c0       	rjmp	.+70     	; 0x11a0 <__vector_11+0xc6>
				}
				list += 2;
    115a:	fc 01       	movw	r30, r24
    115c:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    115e:	45 91       	lpm	r20, Z+
    1160:	54 91       	lpm	r21, Z
				if (desc_val != wIndex) {
    1162:	64 17       	cp	r22, r20
    1164:	75 07       	cpc	r23, r21
    1166:	11 f0       	breq	.+4      	; 0x116c <__vector_11+0x92>
					list += sizeof(struct descriptor_list_struct)-2;
    1168:	07 96       	adiw	r24, 0x07	; 7
					continue;
    116a:	1a c0       	rjmp	.+52     	; 0x11a0 <__vector_11+0xc6>
				}
				list += 2;
    116c:	fc 01       	movw	r30, r24
    116e:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    1170:	25 91       	lpm	r18, Z+
    1172:	34 91       	lpm	r19, Z
				list += 2;
    1174:	fc 01       	movw	r30, r24
    1176:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    1178:	54 91       	lpm	r21, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    117a:	8b 2f       	mov	r24, r27
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	9a 2b       	or	r25, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    1180:	8f 3f       	cpi	r24, 0xFF	; 255
    1182:	91 05       	cpc	r25, r1
    1184:	19 f0       	breq	.+6      	; 0x118c <__vector_11+0xb2>
    1186:	10 f0       	brcs	.+4      	; 0x118c <__vector_11+0xb2>
    1188:	8f ef       	ldi	r24, 0xFF	; 255
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	85 17       	cp	r24, r21
    118e:	08 f4       	brcc	.+2      	; 0x1192 <__vector_11+0xb8>
    1190:	58 2f       	mov	r21, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1192:	a8 ee       	ldi	r26, 0xE8	; 232
    1194:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1196:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1198:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    119a:	c1 ef       	ldi	r28, 0xF1	; 241
    119c:	d0 e0       	ldi	r29, 0x00	; 0
    119e:	03 c0       	rjmp	.+6      	; 0x11a6 <__vector_11+0xcc>
    11a0:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    11a2:	99 f6       	brne	.-90     	; 0x114a <__vector_11+0x70>
    11a4:	cb cf       	rjmp	.-106    	; 0x113c <__vector_11+0x62>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    11a6:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    11a8:	98 2f       	mov	r25, r24
    11aa:	95 70       	andi	r25, 0x05	; 5
    11ac:	e1 f3       	breq	.-8      	; 0x11a6 <__vector_11+0xcc>
				if (i & (1<<RXOUTI)) return;	// abort
    11ae:	82 fd       	sbrc	r24, 2
    11b0:	04 c1       	rjmp	.+520    	; 0x13ba <__vector_11+0x2e0>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    11b2:	45 2f       	mov	r20, r21
    11b4:	51 31       	cpi	r21, 0x11	; 17
    11b6:	08 f0       	brcs	.+2      	; 0x11ba <__vector_11+0xe0>
    11b8:	47 2f       	mov	r20, r23
				for (i = n; i; i--) {
    11ba:	44 23       	and	r20, r20
    11bc:	09 f4       	brne	.+2      	; 0x11c0 <__vector_11+0xe6>
    11be:	fa c0       	rjmp	.+500    	; 0x13b4 <__vector_11+0x2da>
    11c0:	f9 01       	movw	r30, r18
    11c2:	84 2f       	mov	r24, r20
					UEDATX = pgm_read_byte(desc_addr++);
    11c4:	94 91       	lpm	r25, Z
    11c6:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    11c8:	81 50       	subi	r24, 0x01	; 1
    11ca:	31 96       	adiw	r30, 0x01	; 1
    11cc:	81 11       	cpse	r24, r1
    11ce:	fa cf       	rjmp	.-12     	; 0x11c4 <__vector_11+0xea>
    11d0:	8f ef       	ldi	r24, 0xFF	; 255
    11d2:	84 0f       	add	r24, r20
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	28 0f       	add	r18, r24
    11da:	39 1f       	adc	r19, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    11dc:	54 1b       	sub	r21, r20
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    11de:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    11e0:	51 11       	cpse	r21, r1
    11e2:	e1 cf       	rjmp	.-62     	; 0x11a6 <__vector_11+0xcc>
    11e4:	40 31       	cpi	r20, 0x10	; 16
    11e6:	f9 f2       	breq	.-66     	; 0x11a6 <__vector_11+0xcc>
    11e8:	e8 c0       	rjmp	.+464    	; 0x13ba <__vector_11+0x2e0>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    11ea:	45 30       	cpi	r20, 0x05	; 5
    11ec:	61 f4       	brne	.+24     	; 0x1206 <__vector_11+0x12c>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    11ee:	8e ef       	ldi	r24, 0xFE	; 254
    11f0:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    11f4:	e8 ee       	ldi	r30, 0xE8	; 232
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	80 ff       	sbrs	r24, 0
    11fc:	fd cf       	rjmp	.-6      	; 0x11f8 <__vector_11+0x11e>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    11fe:	20 68       	ori	r18, 0x80	; 128
    1200:	20 93 e3 00 	sts	0x00E3, r18
			return;
    1204:	da c0       	rjmp	.+436    	; 0x13ba <__vector_11+0x2e0>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    1206:	49 30       	cpi	r20, 0x09	; 9
    1208:	09 f0       	breq	.+2      	; 0x120c <__vector_11+0x132>
    120a:	36 c0       	rjmp	.+108    	; 0x1278 <__vector_11+0x19e>
    120c:	c1 11       	cpse	r28, r1
    120e:	5f c0       	rjmp	.+190    	; 0x12ce <__vector_11+0x1f4>
			usb_configuration = wValue;
    1210:	20 93 15 01 	sts	0x0115, r18
			cdc_line_rtsdtr = 0;
    1214:	10 92 12 01 	sts	0x0112, r1
			transmit_flush_timer = 0;
    1218:	10 92 14 01 	sts	0x0114, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    121c:	8e ef       	ldi	r24, 0xFE	; 254
    121e:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1222:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    1224:	81 ea       	ldi	r24, 0xA1	; 161
    1226:	91 e0       	ldi	r25, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    1228:	c9 ee       	ldi	r28, 0xE9	; 233
    122a:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    122c:	ab ee       	ldi	r26, 0xEB	; 235
    122e:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    1230:	6c ee       	ldi	r22, 0xEC	; 236
    1232:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    1234:	4d ee       	ldi	r20, 0xED	; 237
    1236:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    1238:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
    123a:	9c 01       	movw	r18, r24
    123c:	2f 5f       	subi	r18, 0xFF	; 255
    123e:	3f 4f       	sbci	r19, 0xFF	; 255
    1240:	fc 01       	movw	r30, r24
    1242:	04 91       	lpm	r16, Z
				UECONX = en;
    1244:	0c 93       	st	X, r16
				if (en) {
    1246:	00 23       	and	r16, r16
    1248:	61 f0       	breq	.+24     	; 0x1262 <__vector_11+0x188>
					UECFG0X = pgm_read_byte(cfg++);
    124a:	f9 01       	movw	r30, r18
    124c:	24 91       	lpm	r18, Z
    124e:	fb 01       	movw	r30, r22
    1250:	20 83       	st	Z, r18
					UECFG1X = pgm_read_byte(cfg++);
    1252:	9c 01       	movw	r18, r24
    1254:	2d 5f       	subi	r18, 0xFD	; 253
    1256:	3f 4f       	sbci	r19, 0xFF	; 255
    1258:	fc 01       	movw	r30, r24
    125a:	32 96       	adiw	r30, 0x02	; 2
    125c:	84 91       	lpm	r24, Z
    125e:	fa 01       	movw	r30, r20
    1260:	80 83       	st	Z, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1262:	1f 5f       	subi	r17, 0xFF	; 255
    1264:	15 30       	cpi	r17, 0x05	; 5
    1266:	11 f0       	breq	.+4      	; 0x126c <__vector_11+0x192>
    1268:	c9 01       	movw	r24, r18
    126a:	e6 cf       	rjmp	.-52     	; 0x1238 <__vector_11+0x15e>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    126c:	ea ee       	ldi	r30, 0xEA	; 234
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	8e e1       	ldi	r24, 0x1E	; 30
    1272:	80 83       	st	Z, r24
        		UERST = 0;
    1274:	10 82       	st	Z, r1
			return;
    1276:	a1 c0       	rjmp	.+322    	; 0x13ba <__vector_11+0x2e0>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    1278:	48 30       	cpi	r20, 0x08	; 8
    127a:	81 f4       	brne	.+32     	; 0x129c <__vector_11+0x1c2>
    127c:	c0 38       	cpi	r28, 0x80	; 128
    127e:	09 f0       	breq	.+2      	; 0x1282 <__vector_11+0x1a8>
    1280:	42 c0       	rjmp	.+132    	; 0x1306 <__vector_11+0x22c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1282:	e8 ee       	ldi	r30, 0xE8	; 232
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	80 ff       	sbrs	r24, 0
    128a:	fd cf       	rjmp	.-6      	; 0x1286 <__vector_11+0x1ac>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    128c:	80 91 15 01 	lds	r24, 0x0115
    1290:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1294:	8e ef       	ldi	r24, 0xFE	; 254
    1296:	80 93 e8 00 	sts	0x00E8, r24
    129a:	8f c0       	rjmp	.+286    	; 0x13ba <__vector_11+0x2e0>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    129c:	41 32       	cpi	r20, 0x21	; 33
    129e:	b9 f4       	brne	.+46     	; 0x12ce <__vector_11+0x1f4>
    12a0:	c1 3a       	cpi	r28, 0xA1	; 161
    12a2:	09 f0       	breq	.+2      	; 0x12a6 <__vector_11+0x1cc>
    12a4:	40 c0       	rjmp	.+128    	; 0x1326 <__vector_11+0x24c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    12a6:	e8 ee       	ldi	r30, 0xE8	; 232
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	80 ff       	sbrs	r24, 0
    12ae:	fd cf       	rjmp	.-6      	; 0x12aa <__vector_11+0x1d0>
    12b0:	e6 e0       	ldi	r30, 0x06	; 6
    12b2:	f1 e0       	ldi	r31, 0x01	; 1
    12b4:	8d e0       	ldi	r24, 0x0D	; 13
    12b6:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    12b8:	a1 ef       	ldi	r26, 0xF1	; 241
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	21 91       	ld	r18, Z+
    12be:	2c 93       	st	X, r18
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    12c0:	e8 17       	cp	r30, r24
    12c2:	f9 07       	cpc	r31, r25
    12c4:	d9 f7       	brne	.-10     	; 0x12bc <__vector_11+0x1e2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    12c6:	8e ef       	ldi	r24, 0xFE	; 254
    12c8:	80 93 e8 00 	sts	0x00E8, r24
    12cc:	76 c0       	rjmp	.+236    	; 0x13ba <__vector_11+0x2e0>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    12ce:	40 32       	cpi	r20, 0x20	; 32
    12d0:	d1 f4       	brne	.+52     	; 0x1306 <__vector_11+0x22c>
    12d2:	c1 32       	cpi	r28, 0x21	; 33
    12d4:	09 f0       	breq	.+2      	; 0x12d8 <__vector_11+0x1fe>
    12d6:	43 c0       	rjmp	.+134    	; 0x135e <__vector_11+0x284>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    12d8:	e8 ee       	ldi	r30, 0xE8	; 232
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	82 ff       	sbrs	r24, 2
    12e0:	fd cf       	rjmp	.-6      	; 0x12dc <__vector_11+0x202>
    12e2:	e6 e0       	ldi	r30, 0x06	; 6
    12e4:	f1 e0       	ldi	r31, 0x01	; 1
    12e6:	8d e0       	ldi	r24, 0x0D	; 13
    12e8:	91 e0       	ldi	r25, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    12ea:	a1 ef       	ldi	r26, 0xF1	; 241
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	2c 91       	ld	r18, X
    12f0:	21 93       	st	Z+, r18
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    12f2:	e8 17       	cp	r30, r24
    12f4:	f9 07       	cpc	r31, r25
    12f6:	d9 f7       	brne	.-10     	; 0x12ee <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    12f8:	e8 ee       	ldi	r30, 0xE8	; 232
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	8b ef       	ldi	r24, 0xFB	; 251
    12fe:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1300:	8e ef       	ldi	r24, 0xFE	; 254
    1302:	80 83       	st	Z, r24
    1304:	5a c0       	rjmp	.+180    	; 0x13ba <__vector_11+0x2e0>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    1306:	42 32       	cpi	r20, 0x22	; 34
    1308:	71 f4       	brne	.+28     	; 0x1326 <__vector_11+0x24c>
    130a:	c1 32       	cpi	r28, 0x21	; 33
    130c:	09 f0       	breq	.+2      	; 0x1310 <__vector_11+0x236>
    130e:	4e c0       	rjmp	.+156    	; 0x13ac <__vector_11+0x2d2>
			cdc_line_rtsdtr = wValue;
    1310:	20 93 12 01 	sts	0x0112, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1314:	e8 ee       	ldi	r30, 0xE8	; 232
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	80 ff       	sbrs	r24, 0
    131c:	fd cf       	rjmp	.-6      	; 0x1318 <__vector_11+0x23e>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    131e:	8e ef       	ldi	r24, 0xFE	; 254
    1320:	80 93 e8 00 	sts	0x00E8, r24
    1324:	4a c0       	rjmp	.+148    	; 0x13ba <__vector_11+0x2e0>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    1326:	41 11       	cpse	r20, r1
    1328:	1a c0       	rjmp	.+52     	; 0x135e <__vector_11+0x284>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    132a:	e8 ee       	ldi	r30, 0xE8	; 232
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	80 ff       	sbrs	r24, 0
    1332:	fd cf       	rjmp	.-6      	; 0x132e <__vector_11+0x254>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    1334:	c2 38       	cpi	r28, 0x82	; 130
    1336:	51 f4       	brne	.+20     	; 0x134c <__vector_11+0x272>
				UENUM = wIndex;
    1338:	e9 ee       	ldi	r30, 0xE9	; 233
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	60 83       	st	Z, r22
				if (UECONX & (1<<STALLRQ)) i = 1;
    133e:	80 91 eb 00 	lds	r24, 0x00EB
    1342:	85 fb       	bst	r24, 5
    1344:	88 27       	eor	r24, r24
    1346:	80 f9       	bld	r24, 0
				UENUM = 0;
    1348:	10 82       	st	Z, r1
    134a:	01 c0       	rjmp	.+2      	; 0x134e <__vector_11+0x274>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    134c:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    134e:	e1 ef       	ldi	r30, 0xF1	; 241
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 83       	st	Z, r24
			UEDATX = 0;
    1354:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1356:	8e ef       	ldi	r24, 0xFE	; 254
    1358:	80 93 e8 00 	sts	0x00E8, r24
    135c:	2e c0       	rjmp	.+92     	; 0x13ba <__vector_11+0x2e0>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    135e:	84 2f       	mov	r24, r20
    1360:	8d 7f       	andi	r24, 0xFD	; 253
    1362:	81 30       	cpi	r24, 0x01	; 1
    1364:	19 f5       	brne	.+70     	; 0x13ac <__vector_11+0x2d2>
		  && bmRequestType == 0x02 && wValue == 0) {
    1366:	c2 30       	cpi	r28, 0x02	; 2
    1368:	09 f5       	brne	.+66     	; 0x13ac <__vector_11+0x2d2>
    136a:	23 2b       	or	r18, r19
    136c:	f9 f4       	brne	.+62     	; 0x13ac <__vector_11+0x2d2>
			i = wIndex & 0x7F;
    136e:	6f 77       	andi	r22, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    1370:	8f ef       	ldi	r24, 0xFF	; 255
    1372:	86 0f       	add	r24, r22
    1374:	84 30       	cpi	r24, 0x04	; 4
    1376:	d0 f4       	brcc	.+52     	; 0x13ac <__vector_11+0x2d2>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1378:	8e ef       	ldi	r24, 0xFE	; 254
    137a:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    137e:	60 93 e9 00 	sts	0x00E9, r22
				if (bRequest == SET_FEATURE) {
    1382:	43 30       	cpi	r20, 0x03	; 3
    1384:	21 f4       	brne	.+8      	; 0x138e <__vector_11+0x2b4>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    1386:	81 e2       	ldi	r24, 0x21	; 33
    1388:	80 93 eb 00 	sts	0x00EB, r24
    138c:	16 c0       	rjmp	.+44     	; 0x13ba <__vector_11+0x2e0>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    138e:	89 e1       	ldi	r24, 0x19	; 25
    1390:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	02 c0       	rjmp	.+4      	; 0x139e <__vector_11+0x2c4>
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	6a 95       	dec	r22
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <__vector_11+0x2c0>
    13a2:	ea ee       	ldi	r30, 0xEA	; 234
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 83       	st	Z, r24
					UERST = 0;
    13a8:	10 82       	st	Z, r1
    13aa:	07 c0       	rjmp	.+14     	; 0x13ba <__vector_11+0x2e0>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    13ac:	81 e2       	ldi	r24, 0x21	; 33
    13ae:	80 93 eb 00 	sts	0x00EB, r24
    13b2:	03 c0       	rjmp	.+6      	; 0x13ba <__vector_11+0x2e0>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    13b4:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    13b6:	51 11       	cpse	r21, r1
    13b8:	f6 ce       	rjmp	.-532    	; 0x11a6 <__vector_11+0xcc>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    13ba:	ff 91       	pop	r31
    13bc:	ef 91       	pop	r30
    13be:	df 91       	pop	r29
    13c0:	cf 91       	pop	r28
    13c2:	bf 91       	pop	r27
    13c4:	af 91       	pop	r26
    13c6:	9f 91       	pop	r25
    13c8:	8f 91       	pop	r24
    13ca:	7f 91       	pop	r23
    13cc:	6f 91       	pop	r22
    13ce:	5f 91       	pop	r21
    13d0:	4f 91       	pop	r20
    13d2:	3f 91       	pop	r19
    13d4:	2f 91       	pop	r18
    13d6:	1f 91       	pop	r17
    13d8:	0f 91       	pop	r16
    13da:	0f 90       	pop	r0
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	0f 90       	pop	r0
    13e0:	1f 90       	pop	r1
    13e2:	18 95       	reti

000013e4 <print_P>:


// BELOW FROM PRINT.C

void print_P(const char *s)
{
    13e4:	1f 93       	push	r17
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    13ea:	ec 01       	movw	r28, r24
    13ec:	21 96       	adiw	r28, 0x01	; 1
    13ee:	fc 01       	movw	r30, r24
    13f0:	14 91       	lpm	r17, Z
		if (!c) break;
    13f2:	11 23       	and	r17, r17
    13f4:	69 f0       	breq	.+26     	; 0x1410 <print_P+0x2c>
		if (c == '\n') usb_tx_char('\r');
    13f6:	1a 30       	cpi	r17, 0x0A	; 10
    13f8:	19 f4       	brne	.+6      	; 0x1400 <print_P+0x1c>
    13fa:	8d e0       	ldi	r24, 0x0D	; 13
    13fc:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <m_usb_tx_char>
		usb_tx_char(c);
    1400:	81 2f       	mov	r24, r17
    1402:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <m_usb_tx_char>
void print_P(const char *s)
{
	char c;

	while (1) {
		c = pgm_read_byte(s++);
    1406:	fe 01       	movw	r30, r28
    1408:	14 91       	lpm	r17, Z
    140a:	21 96       	adiw	r28, 0x01	; 1
		if (!c) break;
    140c:	11 11       	cpse	r17, r1
    140e:	f3 cf       	rjmp	.-26     	; 0x13f6 <print_P+0x12>
		if (c == '\n') usb_tx_char('\r');
		usb_tx_char(c);
	}
}
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	1f 91       	pop	r17
    1416:	08 95       	ret

00001418 <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
    1418:	ef 92       	push	r14
    141a:	ff 92       	push	r15
    141c:	0f 93       	push	r16
    141e:	1f 93       	push	r17
    1420:	cf 93       	push	r28
    1422:	df 93       	push	r29
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
    1428:	27 97       	sbiw	r28, 0x07	; 7
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
    1434:	8e 01       	movw	r16, r28
    1436:	0f 5f       	subi	r16, 0xFF	; 255
    1438:	1f 4f       	sbci	r17, 0xFF	; 255
    143a:	27 e0       	ldi	r18, 0x07	; 7
    143c:	f8 01       	movw	r30, r16
    143e:	11 92       	st	Z+, r1
    1440:	2a 95       	dec	r18
    1442:	e9 f7       	brne	.-6      	; 0x143e <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1444:	4a e0       	ldi	r20, 0x0A	; 10
    1446:	b8 01       	movw	r22, r16
    1448:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__itoa_ncheck>
    144c:	7e 01       	movw	r14, r28
    144e:	f8 e0       	ldi	r31, 0x08	; 8
    1450:	ef 0e       	add	r14, r31
    1452:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
    1454:	f8 01       	movw	r30, r16
    1456:	81 91       	ld	r24, Z+
    1458:	8f 01       	movw	r16, r30
    145a:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    145c:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
    1460:	0e 15       	cp	r16, r14
    1462:	1f 05       	cpc	r17, r15
    1464:	b9 f7       	brne	.-18     	; 0x1454 <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    1466:	27 96       	adiw	r28, 0x07	; 7
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	de bf       	out	0x3e, r29	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	cd bf       	out	0x3d, r28	; 61
    1472:	df 91       	pop	r29
    1474:	cf 91       	pop	r28
    1476:	1f 91       	pop	r17
    1478:	0f 91       	pop	r16
    147a:	ff 90       	pop	r15
    147c:	ef 90       	pop	r14
    147e:	08 95       	ret

00001480 <m_usb_tx_long>:
        }
	}
}

void m_usb_tx_long(long i)
{
    1480:	ef 92       	push	r14
    1482:	ff 92       	push	r15
    1484:	0f 93       	push	r16
    1486:	1f 93       	push	r17
    1488:	cf 93       	push	r28
    148a:	df 93       	push	r29
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
    1490:	2b 97       	sbiw	r28, 0x0b	; 11
    1492:	0f b6       	in	r0, 0x3f	; 63
    1494:	f8 94       	cli
    1496:	de bf       	out	0x3e, r29	; 62
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	cd bf       	out	0x3d, r28	; 61
	char string[11] = {0,0,0,0,0,0,0,0,0,0,0};
    149c:	8e 01       	movw	r16, r28
    149e:	0f 5f       	subi	r16, 0xFF	; 255
    14a0:	1f 4f       	sbci	r17, 0xFF	; 255
    14a2:	2b e0       	ldi	r18, 0x0B	; 11
    14a4:	f8 01       	movw	r30, r16
    14a6:	11 92       	st	Z+, r1
    14a8:	2a 95       	dec	r18
    14aa:	e9 f7       	brne	.-6      	; 0x14a6 <m_usb_tx_long+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
    14ac:	2a e0       	ldi	r18, 0x0A	; 10
    14ae:	a8 01       	movw	r20, r16
    14b0:	0e 94 39 17 	call	0x2e72	; 0x2e72 <__ltoa_ncheck>
    14b4:	7e 01       	movw	r14, r28
    14b6:	fc e0       	ldi	r31, 0x0C	; 12
    14b8:	ef 0e       	add	r14, r31
    14ba:	f1 1c       	adc	r15, r1
	ltoa(i,string,10);
	for(i=0;i<11;i++){
        if(string[i]){
    14bc:	f8 01       	movw	r30, r16
    14be:	81 91       	ld	r24, Z+
    14c0:	8f 01       	movw	r16, r30
    14c2:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
    14c4:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <m_usb_tx_char>

void m_usb_tx_long(long i)
{
	char string[11] = {0,0,0,0,0,0,0,0,0,0,0};
	ltoa(i,string,10);
	for(i=0;i<11;i++){
    14c8:	0e 15       	cp	r16, r14
    14ca:	1f 05       	cpc	r17, r15
    14cc:	b9 f7       	brne	.-18     	; 0x14bc <m_usb_tx_long+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
    14ce:	2b 96       	adiw	r28, 0x0b	; 11
    14d0:	0f b6       	in	r0, 0x3f	; 63
    14d2:	f8 94       	cli
    14d4:	de bf       	out	0x3e, r29	; 62
    14d6:	0f be       	out	0x3f, r0	; 63
    14d8:	cd bf       	out	0x3d, r28	; 61
    14da:	df 91       	pop	r29
    14dc:	cf 91       	pop	r28
    14de:	1f 91       	pop	r17
    14e0:	0f 91       	pop	r16
    14e2:	ff 90       	pop	r15
    14e4:	ef 90       	pop	r14
    14e6:	08 95       	ret

000014e8 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    14ec:	ec eb       	ldi	r30, 0xBC	; 188
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	88 23       	and	r24, r24
    14f4:	34 f0       	brlt	.+12     	; 0x1502 <twi_wait+0x1a>
    14f6:	2f 5f       	subi	r18, 0xFF	; 255
    14f8:	3f 4f       	sbci	r19, 0xFF	; 255
    14fa:	29 3e       	cpi	r18, 0xE9	; 233
    14fc:	83 e0       	ldi	r24, 0x03	; 3
    14fe:	38 07       	cpc	r19, r24
    1500:	b9 f7       	brne	.-18     	; 0x14f0 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	28 3e       	cpi	r18, 0xE8	; 232
    1506:	33 40       	sbci	r19, 0x03	; 3
    1508:	09 f4       	brne	.+2      	; 0x150c <twi_wait+0x24>
    150a:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    150c:	08 95       	ret

0000150e <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    150e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    1512:	84 e8       	ldi	r24, 0x84	; 132
    1514:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    1518:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <twi_wait>
    151c:	88 23       	and	r24, r24
    151e:	19 f0       	breq	.+6      	; 0x1526 <send_byte+0x18>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    1520:	80 91 b9 00 	lds	r24, 0x00B9
    1524:	88 7f       	andi	r24, 0xF8	; 248
	} else {
		return 0;					// comm failure
	}
}
    1526:	08 95       	ret

00001528 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    1528:	cf 93       	push	r28
    152a:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    152c:	94 ea       	ldi	r25, 0xA4	; 164
    152e:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1532:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <twi_wait>
    1536:	88 23       	and	r24, r24
    1538:	61 f0       	breq	.+24     	; 0x1552 <start_write+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    153a:	8c 2f       	mov	r24, r28
    153c:	88 0f       	add	r24, r24
    153e:	0e 94 87 0a 	call	0x150e	; 0x150e <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    1542:	80 32       	cpi	r24, 0x20	; 32
    1544:	29 f4       	brne	.+10     	; 0x1550 <start_write+0x28>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1546:	84 e9       	ldi	r24, 0x94	; 148
    1548:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	01 c0       	rjmp	.+2      	; 0x1552 <start_write+0x2a>
	}	
	return 1;	// success
    1550:	81 e0       	ldi	r24, 0x01	; 1
}	
    1552:	cf 91       	pop	r28
    1554:	08 95       	ret

00001556 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    1556:	0e 94 9b 07 	call	0xf36	; 0xf36 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    155a:	88 e5       	ldi	r24, 0x58	; 88
    155c:	0e 94 94 0a 	call	0x1528	; 0x1528 <start_write>
    1560:	88 23       	and	r24, r24
    1562:	09 f4       	brne	.+2      	; 0x1566 <m_wii_open+0x10>
    1564:	cd c0       	rjmp	.+410    	; 0x1700 <m_wii_open+0x1aa>
	if(!send_byte(0x30)){return 0;}
    1566:	80 e3       	ldi	r24, 0x30	; 48
    1568:	0e 94 87 0a 	call	0x150e	; 0x150e <send_byte>
    156c:	88 23       	and	r24, r24
    156e:	09 f4       	brne	.+2      	; 0x1572 <m_wii_open+0x1c>
    1570:	c9 c0       	rjmp	.+402    	; 0x1704 <m_wii_open+0x1ae>
	if(!send_byte(0x01)){return 0;}
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	0e 94 87 0a 	call	0x150e	; 0x150e <send_byte>
    1578:	88 23       	and	r24, r24
    157a:	09 f4       	brne	.+2      	; 0x157e <m_wii_open+0x28>
    157c:	c5 c0       	rjmp	.+394    	; 0x1708 <m_wii_open+0x1b2>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    157e:	84 e9       	ldi	r24, 0x94	; 148
    1580:	80 93 bc 00 	sts	0x00BC, r24
    1584:	83 ec       	ldi	r24, 0xC3	; 195
    1586:	99 e0       	ldi	r25, 0x09	; 9
    1588:	01 97       	sbiw	r24, 0x01	; 1
    158a:	f1 f7       	brne	.-4      	; 0x1588 <m_wii_open+0x32>
    158c:	00 c0       	rjmp	.+0      	; 0x158e <m_wii_open+0x38>
    158e:	00 00       	nop
	if(!send_byte(0x01)){return 0;}
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1590:	88 e5       	ldi	r24, 0x58	; 88
    1592:	0e 94 94 0a 	call	0x1528	; 0x1528 <start_write>
    1596:	88 23       	and	r24, r24
    1598:	09 f4       	brne	.+2      	; 0x159c <m_wii_open+0x46>
    159a:	b8 c0       	rjmp	.+368    	; 0x170c <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	0e 94 87 0a 	call	0x150e	; 0x150e <send_byte>
    15a2:	88 23       	and	r24, r24
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <m_wii_open+0x52>
    15a6:	b4 c0       	rjmp	.+360    	; 0x1710 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	0e 94 87 0a 	call	0x150e	; 0x150e <send_byte>
    15ae:	88 23       	and	r24, r24
    15b0:	09 f4       	brne	.+2      	; 0x15b4 <m_wii_open+0x5e>
    15b2:	b0 c0       	rjmp	.+352    	; 0x1714 <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	0e 94 87 0a 	call	0x150e	; 0x150e <send_byte>
    15ba:	88 23       	and	r24, r24
    15bc:	09 f4       	brne	.+2      	; 0x15c0 <m_wii_open+0x6a>
    15be:	ac c0       	rjmp	.+344    	; 0x1718 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	0e 94 87 0a 	call	0x150e	; 0x150e <send_byte>
    15c6:	88 23       	and	r24, r24
    15c8:	09 f4       	brne	.+2      	; 0x15cc <m_wii_open+0x76>
    15ca:	a8 c0       	rjmp	.+336    	; 0x171c <m_wii_open+0x1c6>
	if(!send_byte(0x00)){return 0;}
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	0e 94 87 0a 	call	0x150e	; 0x150e <send_byte>
    15d2:	88 23       	and	r24, r24
    15d4:	09 f4       	brne	.+2      	; 0x15d8 <m_wii_open+0x82>
    15d6:	a4 c0       	rjmp	.+328    	; 0x1720 <m_wii_open+0x1ca>
	if(!send_byte(0x00)){return 0;}
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	0e 94 87 0a 	call	0x150e	; 0x150e <send_byte>
    15de:	88 23       	and	r24, r24
    15e0:	09 f4       	brne	.+2      	; 0x15e4 <m_wii_open+0x8e>
    15e2:	a0 c0       	rjmp	.+320    	; 0x1724 <m_wii_open+0x1ce>
	if(!send_byte(0x00)){return 0;}
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	0e 94 87 0a 	call	0x150e	; 0x150e <send_byte>
    15ea:	88 23       	and	r24, r24
    15ec:	09 f4       	brne	.+2      	; 0x15f0 <m_wii_open+0x9a>
    15ee:	9c c0       	rjmp	.+312    	; 0x1728 <m_wii_open+0x1d2>
	if(!send_byte(0x90)){return 0;} // p0
    15f0:	80 e9       	ldi	r24, 0x90	; 144
    15f2:	0e 94 87 0a 	call	0x150e	; 0x150e <send_byte>
    15f6:	88 23       	and	r24, r24
    15f8:	09 f4       	brne	.+2      	; 0x15fc <m_wii_open+0xa6>
    15fa:	98 c0       	rjmp	.+304    	; 0x172c <m_wii_open+0x1d6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    15fc:	84 e9       	ldi	r24, 0x94	; 148
    15fe:	80 93 bc 00 	sts	0x00BC, r24
    1602:	83 ec       	ldi	r24, 0xC3	; 195
    1604:	99 e0       	ldi	r25, 0x09	; 9
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	f1 f7       	brne	.-4      	; 0x1606 <m_wii_open+0xb0>
    160a:	00 c0       	rjmp	.+0      	; 0x160c <m_wii_open+0xb6>
    160c:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    160e:	88 e5       	ldi	r24, 0x58	; 88
    1610:	0e 94 94 0a 	call	0x1528	; 0x1528 <start_write>
    1614:	88 23       	and	r24, r24
    1616:	09 f4       	brne	.+2      	; 0x161a <m_wii_open+0xc4>
    1618:	8b c0       	rjmp	.+278    	; 0x1730 <m_wii_open+0x1da>
	if(!send_byte(0x07)){return 0;}
    161a:	87 e0       	ldi	r24, 0x07	; 7
    161c:	0e 94 87 0a 	call	0x150e	; 0x150e <send_byte>
    1620:	88 23       	and	r24, r24
    1622:	09 f4       	brne	.+2      	; 0x1626 <m_wii_open+0xd0>
    1624:	87 c0       	rjmp	.+270    	; 0x1734 <m_wii_open+0x1de>
	if(!send_byte(0x00)){return 0;}
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	0e 94 87 0a 	call	0x150e	; 0x150e <send_byte>
    162c:	88 23       	and	r24, r24
    162e:	09 f4       	brne	.+2      	; 0x1632 <m_wii_open+0xdc>
    1630:	83 c0       	rjmp	.+262    	; 0x1738 <m_wii_open+0x1e2>
	if(!send_byte(0x41)){return 0;} // p1
    1632:	81 e4       	ldi	r24, 0x41	; 65
    1634:	0e 94 87 0a 	call	0x150e	; 0x150e <send_byte>
    1638:	88 23       	and	r24, r24
    163a:	09 f4       	brne	.+2      	; 0x163e <m_wii_open+0xe8>
    163c:	7f c0       	rjmp	.+254    	; 0x173c <m_wii_open+0x1e6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    163e:	84 e9       	ldi	r24, 0x94	; 148
    1640:	80 93 bc 00 	sts	0x00BC, r24
    1644:	83 ec       	ldi	r24, 0xC3	; 195
    1646:	99 e0       	ldi	r25, 0x09	; 9
    1648:	01 97       	sbiw	r24, 0x01	; 1
    164a:	f1 f7       	brne	.-4      	; 0x1648 <m_wii_open+0xf2>
    164c:	00 c0       	rjmp	.+0      	; 0x164e <m_wii_open+0xf8>
    164e:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    1650:	88 e5       	ldi	r24, 0x58	; 88
    1652:	0e 94 94 0a 	call	0x1528	; 0x1528 <start_write>
    1656:	88 23       	and	r24, r24
    1658:	09 f4       	brne	.+2      	; 0x165c <m_wii_open+0x106>
    165a:	72 c0       	rjmp	.+228    	; 0x1740 <m_wii_open+0x1ea>
	if(!send_byte(0x1A)){return 0;}
    165c:	8a e1       	ldi	r24, 0x1A	; 26
    165e:	0e 94 87 0a 	call	0x150e	; 0x150e <send_byte>
    1662:	88 23       	and	r24, r24
    1664:	09 f4       	brne	.+2      	; 0x1668 <m_wii_open+0x112>
    1666:	6e c0       	rjmp	.+220    	; 0x1744 <m_wii_open+0x1ee>
	if(!send_byte(0x40)){return 0;} // p2
    1668:	80 e4       	ldi	r24, 0x40	; 64
    166a:	0e 94 87 0a 	call	0x150e	; 0x150e <send_byte>
    166e:	88 23       	and	r24, r24
    1670:	09 f4       	brne	.+2      	; 0x1674 <m_wii_open+0x11e>
    1672:	6a c0       	rjmp	.+212    	; 0x1748 <m_wii_open+0x1f2>
	if(!send_byte(0x00)){return 0;} // p3
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	0e 94 87 0a 	call	0x150e	; 0x150e <send_byte>
    167a:	88 23       	and	r24, r24
    167c:	09 f4       	brne	.+2      	; 0x1680 <m_wii_open+0x12a>
    167e:	66 c0       	rjmp	.+204    	; 0x174c <m_wii_open+0x1f6>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1680:	84 e9       	ldi	r24, 0x94	; 148
    1682:	80 93 bc 00 	sts	0x00BC, r24
    1686:	83 ec       	ldi	r24, 0xC3	; 195
    1688:	99 e0       	ldi	r25, 0x09	; 9
    168a:	01 97       	sbiw	r24, 0x01	; 1
    168c:	f1 f7       	brne	.-4      	; 0x168a <m_wii_open+0x134>
    168e:	00 c0       	rjmp	.+0      	; 0x1690 <m_wii_open+0x13a>
    1690:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1692:	88 e5       	ldi	r24, 0x58	; 88
    1694:	0e 94 94 0a 	call	0x1528	; 0x1528 <start_write>
    1698:	88 23       	and	r24, r24
    169a:	09 f4       	brne	.+2      	; 0x169e <m_wii_open+0x148>
    169c:	59 c0       	rjmp	.+178    	; 0x1750 <m_wii_open+0x1fa>
	if(!send_byte(0x33)){return 0;}
    169e:	83 e3       	ldi	r24, 0x33	; 51
    16a0:	0e 94 87 0a 	call	0x150e	; 0x150e <send_byte>
    16a4:	88 23       	and	r24, r24
    16a6:	09 f4       	brne	.+2      	; 0x16aa <m_wii_open+0x154>
    16a8:	55 c0       	rjmp	.+170    	; 0x1754 <m_wii_open+0x1fe>
	if(!send_byte(0x03)){return 0;}
    16aa:	83 e0       	ldi	r24, 0x03	; 3
    16ac:	0e 94 87 0a 	call	0x150e	; 0x150e <send_byte>
    16b0:	88 23       	and	r24, r24
    16b2:	09 f4       	brne	.+2      	; 0x16b6 <m_wii_open+0x160>
    16b4:	51 c0       	rjmp	.+162    	; 0x1758 <m_wii_open+0x202>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    16b6:	84 e9       	ldi	r24, 0x94	; 148
    16b8:	80 93 bc 00 	sts	0x00BC, r24
    16bc:	83 ec       	ldi	r24, 0xC3	; 195
    16be:	99 e0       	ldi	r25, 0x09	; 9
    16c0:	01 97       	sbiw	r24, 0x01	; 1
    16c2:	f1 f7       	brne	.-4      	; 0x16c0 <m_wii_open+0x16a>
    16c4:	00 c0       	rjmp	.+0      	; 0x16c6 <m_wii_open+0x170>
    16c6:	00 00       	nop
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    16c8:	88 e5       	ldi	r24, 0x58	; 88
    16ca:	0e 94 94 0a 	call	0x1528	; 0x1528 <start_write>
    16ce:	88 23       	and	r24, r24
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <m_wii_open+0x17e>
    16d2:	44 c0       	rjmp	.+136    	; 0x175c <m_wii_open+0x206>
	if(!send_byte(0x30)){return 0;}
    16d4:	80 e3       	ldi	r24, 0x30	; 48
    16d6:	0e 94 87 0a 	call	0x150e	; 0x150e <send_byte>
    16da:	88 23       	and	r24, r24
    16dc:	09 f4       	brne	.+2      	; 0x16e0 <m_wii_open+0x18a>
    16de:	40 c0       	rjmp	.+128    	; 0x1760 <m_wii_open+0x20a>
	if(!send_byte(0x08)){return 0;}
    16e0:	88 e0       	ldi	r24, 0x08	; 8
    16e2:	0e 94 87 0a 	call	0x150e	; 0x150e <send_byte>
    16e6:	88 23       	and	r24, r24
    16e8:	e9 f1       	breq	.+122    	; 0x1764 <m_wii_open+0x20e>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    16ea:	84 e9       	ldi	r24, 0x94	; 148
    16ec:	80 93 bc 00 	sts	0x00BC, r24
    16f0:	83 ec       	ldi	r24, 0xC3	; 195
    16f2:	99 e0       	ldi	r25, 0x09	; 9
    16f4:	01 97       	sbiw	r24, 0x01	; 1
    16f6:	f1 f7       	brne	.-4      	; 0x16f4 <m_wii_open+0x19e>
    16f8:	00 c0       	rjmp	.+0      	; 0x16fa <m_wii_open+0x1a4>
    16fa:	00 00       	nop
	if(!send_byte(0x08)){return 0;}
	end();
	
	m_wait(INTERPACKET);

	return 1;
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1718:	80 e0       	ldi	r24, 0x00	; 0
    171a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    172c:	80 e0       	ldi	r24, 0x00	; 0
    172e:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1750:	80 e0       	ldi	r24, 0x00	; 0
    1752:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    1764:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    1766:	08 95       	ret

00001768 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    1768:	cf 93       	push	r28
    176a:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    176c:	94 ea       	ldi	r25, 0xA4	; 164
    176e:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1772:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <twi_wait>
    1776:	88 23       	and	r24, r24
    1778:	69 f0       	breq	.+26     	; 0x1794 <start_read+0x2c>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    177a:	8c 2f       	mov	r24, r28
    177c:	88 0f       	add	r24, r24
    177e:	8f 5f       	subi	r24, 0xFF	; 255
    1780:	0e 94 87 0a 	call	0x150e	; 0x150e <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    1784:	88 34       	cpi	r24, 0x48	; 72
    1786:	29 f4       	brne	.+10     	; 0x1792 <start_read+0x2a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1788:	84 e9       	ldi	r24, 0x94	; 148
    178a:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	01 c0       	rjmp	.+2      	; 0x1794 <start_read+0x2c>
	}	
	return 1;	// success
    1792:	81 e0       	ldi	r24, 0x01	; 1
}	
    1794:	cf 91       	pop	r28
    1796:	08 95       	ret

00001798 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    1798:	ef 92       	push	r14
    179a:	ff 92       	push	r15
    179c:	0f 93       	push	r16
    179e:	1f 93       	push	r17
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
    17a8:	60 97       	sbiw	r28, 0x10	; 16
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	f8 94       	cli
    17ae:	de bf       	out	0x3e, r29	; 62
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	cd bf       	out	0x3d, r28	; 61
    17b4:	08 2f       	mov	r16, r24
    17b6:	19 2f       	mov	r17, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    17b8:	fe 01       	movw	r30, r28
    17ba:	31 96       	adiw	r30, 0x01	; 1
    17bc:	80 e1       	ldi	r24, 0x10	; 16
    17be:	df 01       	movw	r26, r30
    17c0:	1d 92       	st	X+, r1
    17c2:	8a 95       	dec	r24
    17c4:	e9 f7       	brne	.-6      	; 0x17c0 <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    17c6:	88 e5       	ldi	r24, 0x58	; 88
    17c8:	0e 94 94 0a 	call	0x1528	; 0x1528 <start_write>
    17cc:	88 23       	and	r24, r24
    17ce:	09 f4       	brne	.+2      	; 0x17d2 <m_wii_read+0x3a>
    17d0:	6e c0       	rjmp	.+220    	; 0x18ae <m_wii_read+0x116>
	if(!send_byte(0x36)){return 0;}
    17d2:	86 e3       	ldi	r24, 0x36	; 54
    17d4:	0e 94 87 0a 	call	0x150e	; 0x150e <send_byte>
    17d8:	88 23       	and	r24, r24
    17da:	09 f4       	brne	.+2      	; 0x17de <m_wii_read+0x46>
    17dc:	6a c0       	rjmp	.+212    	; 0x18b2 <m_wii_read+0x11a>
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    17de:	84 e9       	ldi	r24, 0x94	; 148
    17e0:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17e4:	b8 e0       	ldi	r27, 0x08	; 8
    17e6:	ba 95       	dec	r27
    17e8:	f1 f7       	brne	.-4      	; 0x17e6 <m_wii_read+0x4e>
    17ea:	00 00       	nop
	if(!send_byte(0x36)){return 0;}
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    17ec:	88 e5       	ldi	r24, 0x58	; 88
    17ee:	0e 94 b4 0b 	call	0x1768	; 0x1768 <start_read>
    17f2:	88 23       	and	r24, r24
    17f4:	09 f4       	brne	.+2      	; 0x17f8 <m_wii_read+0x60>
    17f6:	5f c0       	rjmp	.+190    	; 0x18b6 <m_wii_read+0x11e>
    17f8:	be 01       	movw	r22, r28
    17fa:	6f 5f       	subi	r22, 0xFF	; 255
    17fc:	7f 4f       	sbci	r23, 0xFF	; 255
    17fe:	9e 01       	movw	r18, r28
    1800:	20 5f       	subi	r18, 0xF0	; 240
    1802:	3f 4f       	sbci	r19, 0xFF	; 255
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1804:	ec eb       	ldi	r30, 0xBC	; 188
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    180a:	4b eb       	ldi	r20, 0xBB	; 187
    180c:	50 e0       	ldi	r21, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    180e:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1810:	80 81       	ld	r24, Z
    1812:	88 23       	and	r24, r24
    1814:	ec f7       	brge	.-6      	; 0x1810 <m_wii_read+0x78>
		temp[i] = TWDR;
    1816:	da 01       	movw	r26, r20
    1818:	8c 91       	ld	r24, X
    181a:	db 01       	movw	r26, r22
    181c:	8d 93       	st	X+, r24
    181e:	bd 01       	movw	r22, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    1820:	a2 17       	cp	r26, r18
    1822:	b3 07       	cpc	r27, r19
    1824:	a1 f7       	brne	.-24     	; 0x180e <m_wii_read+0x76>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    1826:	84 e8       	ldi	r24, 0x84	; 132
    1828:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    182c:	ec eb       	ldi	r30, 0xBC	; 188
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	88 23       	and	r24, r24
    1834:	ec f7       	brge	.-6      	; 0x1830 <m_wii_read+0x98>
	temp[15] = TWDR;
    1836:	80 91 bb 00 	lds	r24, 0x00BB
    183a:	88 8b       	std	Y+16, r24	; 0x10
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    183c:	84 e9       	ldi	r24, 0x94	; 148
    183e:	80 93 bc 00 	sts	0x00BC, r24
    1842:	fe 01       	movw	r30, r28
    1844:	34 96       	adiw	r30, 0x04	; 4
    1846:	e0 2e       	mov	r14, r16
    1848:	f1 2e       	mov	r15, r17
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    184a:	80 81       	ld	r24, Z
    184c:	98 2f       	mov	r25, r24
    184e:	90 73       	andi	r25, 0x30	; 48
    1850:	af 01       	movw	r20, r30
    1852:	42 50       	subi	r20, 0x02	; 2
    1854:	51 09       	sbc	r21, r1
    1856:	da 01       	movw	r26, r20
    1858:	4c 91       	ld	r20, X
    185a:	50 e0       	ldi	r21, 0x00	; 0
    185c:	b0 e1       	ldi	r27, 0x10	; 16
    185e:	9b 9f       	mul	r25, r27
    1860:	40 0d       	add	r20, r0
    1862:	51 1d       	adc	r21, r1
    1864:	11 24       	eor	r1, r1
    1866:	d7 01       	movw	r26, r14
    1868:	4d 93       	st	X+, r20
    186a:	5c 93       	st	X, r21
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    186c:	48 2f       	mov	r20, r24
    186e:	40 7c       	andi	r20, 0xC0	; 192
    1870:	50 e0       	ldi	r21, 0x00	; 0
    1872:	44 0f       	add	r20, r20
    1874:	55 1f       	adc	r21, r21
    1876:	44 0f       	add	r20, r20
    1878:	55 1f       	adc	r21, r21
    187a:	bf 01       	movw	r22, r30
    187c:	61 50       	subi	r22, 0x01	; 1
    187e:	71 09       	sbc	r23, r1
    1880:	db 01       	movw	r26, r22
    1882:	9c 91       	ld	r25, X
    1884:	49 0f       	add	r20, r25
    1886:	51 1d       	adc	r21, r1
    1888:	d7 01       	movw	r26, r14
    188a:	13 96       	adiw	r26, 0x03	; 3
    188c:	5c 93       	st	X, r21
    188e:	4e 93       	st	-X, r20
    1890:	12 97       	sbiw	r26, 0x02	; 2
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    1892:	8f 70       	andi	r24, 0x0F	; 15
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	15 96       	adiw	r26, 0x05	; 5
    1898:	9c 93       	st	X, r25
    189a:	8e 93       	st	-X, r24
    189c:	14 97       	sbiw	r26, 0x04	; 4
    189e:	33 96       	adiw	r30, 0x03	; 3
    18a0:	b6 e0       	ldi	r27, 0x06	; 6
    18a2:	eb 0e       	add	r14, r27
    18a4:	f1 1c       	adc	r15, r1
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    18a6:	2e 17       	cp	r18, r30
    18a8:	3f 07       	cpc	r19, r31
    18aa:	79 f6       	brne	.-98     	; 0x184a <m_wii_read+0xb2>
    18ac:	06 c0       	rjmp	.+12     	; 0x18ba <m_wii_read+0x122>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	05 c0       	rjmp	.+10     	; 0x18bc <m_wii_read+0x124>
	if(!send_byte(0x36)){return 0;}
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	03 c0       	rjmp	.+6      	; 0x18bc <m_wii_read+0x124>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	01 c0       	rjmp	.+2      	; 0x18bc <m_wii_read+0x124>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    18ba:	81 e0       	ldi	r24, 0x01	; 1
}
    18bc:	60 96       	adiw	r28, 0x10	; 16
    18be:	0f b6       	in	r0, 0x3f	; 63
    18c0:	f8 94       	cli
    18c2:	de bf       	out	0x3e, r29	; 62
    18c4:	0f be       	out	0x3f, r0	; 63
    18c6:	cd bf       	out	0x3d, r28	; 61
    18c8:	df 91       	pop	r29
    18ca:	cf 91       	pop	r28
    18cc:	1f 91       	pop	r17
    18ce:	0f 91       	pop	r16
    18d0:	ff 90       	pop	r15
    18d2:	ef 90       	pop	r14
    18d4:	08 95       	ret

000018d6 <Point_create>:
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "point.h"

Point *Point_create(double x, double y){
    18d6:	8f 92       	push	r8
    18d8:	9f 92       	push	r9
    18da:	af 92       	push	r10
    18dc:	bf 92       	push	r11
    18de:	cf 92       	push	r12
    18e0:	df 92       	push	r13
    18e2:	ef 92       	push	r14
    18e4:	ff 92       	push	r15
    18e6:	4b 01       	movw	r8, r22
    18e8:	5c 01       	movw	r10, r24
    18ea:	69 01       	movw	r12, r18
    18ec:	7a 01       	movw	r14, r20
    Point *p = (Point*)malloc(sizeof(Point));
    18ee:	88 e0       	ldi	r24, 0x08	; 8
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <malloc>
    p->x=x;
    18f6:	fc 01       	movw	r30, r24
    18f8:	80 82       	st	Z, r8
    18fa:	91 82       	std	Z+1, r9	; 0x01
    18fc:	a2 82       	std	Z+2, r10	; 0x02
    18fe:	b3 82       	std	Z+3, r11	; 0x03
    p->y=y;
    1900:	c4 82       	std	Z+4, r12	; 0x04
    1902:	d5 82       	std	Z+5, r13	; 0x05
    1904:	e6 82       	std	Z+6, r14	; 0x06
    1906:	f7 82       	std	Z+7, r15	; 0x07
    return p;
}
    1908:	ff 90       	pop	r15
    190a:	ef 90       	pop	r14
    190c:	df 90       	pop	r13
    190e:	cf 90       	pop	r12
    1910:	bf 90       	pop	r11
    1912:	af 90       	pop	r10
    1914:	9f 90       	pop	r9
    1916:	8f 90       	pop	r8
    1918:	08 95       	ret

0000191a <Point_add>:
    printf(",");
    printf("%0.5f", Point_get_y(m));
    printf("\n");
}

Point *Point_add(Point *m1, Point *m2){
    191a:	cf 92       	push	r12
    191c:	df 92       	push	r13
    191e:	ef 92       	push	r14
    1920:	ff 92       	push	r15
    1922:	0f 93       	push	r16
    1924:	1f 93       	push	r17
    1926:	cf 93       	push	r28
    1928:	df 93       	push	r29
    192a:	ec 01       	movw	r28, r24
    192c:	8b 01       	movw	r16, r22
    Point* sum=Point_create(Point_get_x(m1)+Point_get_x(m2),Point_get_y(m1)+Point_get_y(m2));
    192e:	fb 01       	movw	r30, r22
    1930:	24 81       	ldd	r18, Z+4	; 0x04
    1932:	35 81       	ldd	r19, Z+5	; 0x05
    1934:	46 81       	ldd	r20, Z+6	; 0x06
    1936:	57 81       	ldd	r21, Z+7	; 0x07
    1938:	6c 81       	ldd	r22, Y+4	; 0x04
    193a:	7d 81       	ldd	r23, Y+5	; 0x05
    193c:	8e 81       	ldd	r24, Y+6	; 0x06
    193e:	9f 81       	ldd	r25, Y+7	; 0x07
    1940:	0e 94 ae 12 	call	0x255c	; 0x255c <__addsf3>
    1944:	6b 01       	movw	r12, r22
    1946:	7c 01       	movw	r14, r24
    1948:	f8 01       	movw	r30, r16
    194a:	20 81       	ld	r18, Z
    194c:	31 81       	ldd	r19, Z+1	; 0x01
    194e:	42 81       	ldd	r20, Z+2	; 0x02
    1950:	53 81       	ldd	r21, Z+3	; 0x03
    1952:	68 81       	ld	r22, Y
    1954:	79 81       	ldd	r23, Y+1	; 0x01
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	9b 81       	ldd	r25, Y+3	; 0x03
    195a:	0e 94 ae 12 	call	0x255c	; 0x255c <__addsf3>
    195e:	a7 01       	movw	r20, r14
    1960:	96 01       	movw	r18, r12
    1962:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <Point_create>
    return(sum);
}
    1966:	df 91       	pop	r29
    1968:	cf 91       	pop	r28
    196a:	1f 91       	pop	r17
    196c:	0f 91       	pop	r16
    196e:	ff 90       	pop	r15
    1970:	ef 90       	pop	r14
    1972:	df 90       	pop	r13
    1974:	cf 90       	pop	r12
    1976:	08 95       	ret

00001978 <Point_sub>:

Point *Point_sub(Point *m1, Point *m2){
    1978:	cf 92       	push	r12
    197a:	df 92       	push	r13
    197c:	ef 92       	push	r14
    197e:	ff 92       	push	r15
    1980:	0f 93       	push	r16
    1982:	1f 93       	push	r17
    1984:	cf 93       	push	r28
    1986:	df 93       	push	r29
    1988:	ec 01       	movw	r28, r24
    198a:	8b 01       	movw	r16, r22
    Point* sum=Point_create(Point_get_x(m1)-Point_get_x(m2),Point_get_y(m1)-Point_get_y(m2));
    198c:	fb 01       	movw	r30, r22
    198e:	24 81       	ldd	r18, Z+4	; 0x04
    1990:	35 81       	ldd	r19, Z+5	; 0x05
    1992:	46 81       	ldd	r20, Z+6	; 0x06
    1994:	57 81       	ldd	r21, Z+7	; 0x07
    1996:	6c 81       	ldd	r22, Y+4	; 0x04
    1998:	7d 81       	ldd	r23, Y+5	; 0x05
    199a:	8e 81       	ldd	r24, Y+6	; 0x06
    199c:	9f 81       	ldd	r25, Y+7	; 0x07
    199e:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    19a2:	6b 01       	movw	r12, r22
    19a4:	7c 01       	movw	r14, r24
    19a6:	f8 01       	movw	r30, r16
    19a8:	20 81       	ld	r18, Z
    19aa:	31 81       	ldd	r19, Z+1	; 0x01
    19ac:	42 81       	ldd	r20, Z+2	; 0x02
    19ae:	53 81       	ldd	r21, Z+3	; 0x03
    19b0:	68 81       	ld	r22, Y
    19b2:	79 81       	ldd	r23, Y+1	; 0x01
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	9b 81       	ldd	r25, Y+3	; 0x03
    19b8:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    19bc:	a7 01       	movw	r20, r14
    19be:	96 01       	movw	r18, r12
    19c0:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <Point_create>
    return(sum);
}
    19c4:	df 91       	pop	r29
    19c6:	cf 91       	pop	r28
    19c8:	1f 91       	pop	r17
    19ca:	0f 91       	pop	r16
    19cc:	ff 90       	pop	r15
    19ce:	ef 90       	pop	r14
    19d0:	df 90       	pop	r13
    19d2:	cf 90       	pop	r12
    19d4:	08 95       	ret

000019d6 <Point_product_scaler>:


Point *Point_product_scaler(Point *m, double s){
    19d6:	8f 92       	push	r8
    19d8:	9f 92       	push	r9
    19da:	af 92       	push	r10
    19dc:	bf 92       	push	r11
    19de:	cf 92       	push	r12
    19e0:	df 92       	push	r13
    19e2:	ef 92       	push	r14
    19e4:	ff 92       	push	r15
    19e6:	cf 93       	push	r28
    19e8:	df 93       	push	r29
    19ea:	ec 01       	movw	r28, r24
    19ec:	6a 01       	movw	r12, r20
    19ee:	7b 01       	movw	r14, r22
    double x_s = s*Point_get_x(m);
    double y_s = s*Point_get_y(m);
    19f0:	2c 81       	ldd	r18, Y+4	; 0x04
    19f2:	3d 81       	ldd	r19, Y+5	; 0x05
    19f4:	4e 81       	ldd	r20, Y+6	; 0x06
    19f6:	5f 81       	ldd	r21, Y+7	; 0x07
    19f8:	c7 01       	movw	r24, r14
    19fa:	b6 01       	movw	r22, r12
    19fc:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
    1a00:	4b 01       	movw	r8, r22
    1a02:	5c 01       	movw	r10, r24
    return(sum);
}


Point *Point_product_scaler(Point *m, double s){
    double x_s = s*Point_get_x(m);
    1a04:	28 81       	ld	r18, Y
    1a06:	39 81       	ldd	r19, Y+1	; 0x01
    1a08:	4a 81       	ldd	r20, Y+2	; 0x02
    1a0a:	5b 81       	ldd	r21, Y+3	; 0x03
    1a0c:	c7 01       	movw	r24, r14
    1a0e:	b6 01       	movw	r22, r12
    1a10:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
    double y_s = s*Point_get_y(m);
    Point* newm=Point_create(x_s,y_s);
    1a14:	a5 01       	movw	r20, r10
    1a16:	94 01       	movw	r18, r8
    1a18:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <Point_create>
    return(newm);
}
    1a1c:	df 91       	pop	r29
    1a1e:	cf 91       	pop	r28
    1a20:	ff 90       	pop	r15
    1a22:	ef 90       	pop	r14
    1a24:	df 90       	pop	r13
    1a26:	cf 90       	pop	r12
    1a28:	bf 90       	pop	r11
    1a2a:	af 90       	pop	r10
    1a2c:	9f 90       	pop	r9
    1a2e:	8f 90       	pop	r8
    1a30:	08 95       	ret

00001a32 <Point_get_midpoint>:

Point *Point_get_midpoint(Point *m1, Point *m2){
    return Point_product_scaler(Point_add(m1, m2),0.5);
    1a32:	0e 94 8d 0c 	call	0x191a	; 0x191a <Point_add>
    1a36:	40 e0       	ldi	r20, 0x00	; 0
    1a38:	50 e0       	ldi	r21, 0x00	; 0
    1a3a:	60 e0       	ldi	r22, 0x00	; 0
    1a3c:	7f e3       	ldi	r23, 0x3F	; 63
    1a3e:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <Point_product_scaler>
}
    1a42:	08 95       	ret

00001a44 <Point_get_distance_between>:

double Point_get_distance_between(Point *m1, Point *m2){
    1a44:	8f 92       	push	r8
    1a46:	9f 92       	push	r9
    1a48:	af 92       	push	r10
    1a4a:	bf 92       	push	r11
    1a4c:	cf 92       	push	r12
    1a4e:	df 92       	push	r13
    1a50:	ef 92       	push	r14
    1a52:	ff 92       	push	r15
    1a54:	cf 93       	push	r28
    1a56:	df 93       	push	r29
    1a58:	ec 01       	movw	r28, r24
    1a5a:	5b 01       	movw	r10, r22
//	Point *diff = Point_sub(m1, m2);
	return sqrt(pow(Point_get_x(m1)-Point_get_x(m2),2)+pow(Point_get_y(m1)-Point_get_y(m2), 2));
    1a5c:	fb 01       	movw	r30, r22
    1a5e:	20 81       	ld	r18, Z
    1a60:	31 81       	ldd	r19, Z+1	; 0x01
    1a62:	42 81       	ldd	r20, Z+2	; 0x02
    1a64:	53 81       	ldd	r21, Z+3	; 0x03
    1a66:	68 81       	ld	r22, Y
    1a68:	79 81       	ldd	r23, Y+1	; 0x01
    1a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a6e:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    1a72:	6b 01       	movw	r12, r22
    1a74:	7c 01       	movw	r14, r24
    1a76:	f5 01       	movw	r30, r10
    1a78:	24 81       	ldd	r18, Z+4	; 0x04
    1a7a:	35 81       	ldd	r19, Z+5	; 0x05
    1a7c:	46 81       	ldd	r20, Z+6	; 0x06
    1a7e:	57 81       	ldd	r21, Z+7	; 0x07
    1a80:	6c 81       	ldd	r22, Y+4	; 0x04
    1a82:	7d 81       	ldd	r23, Y+5	; 0x05
    1a84:	8e 81       	ldd	r24, Y+6	; 0x06
    1a86:	9f 81       	ldd	r25, Y+7	; 0x07
    1a88:	0e 94 ad 12 	call	0x255a	; 0x255a <__subsf3>
    1a8c:	9b 01       	movw	r18, r22
    1a8e:	ac 01       	movw	r20, r24
    1a90:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
    1a94:	4b 01       	movw	r8, r22
    1a96:	5c 01       	movw	r10, r24
    1a98:	a7 01       	movw	r20, r14
    1a9a:	96 01       	movw	r18, r12
    1a9c:	c7 01       	movw	r24, r14
    1a9e:	b6 01       	movw	r22, r12
    1aa0:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
    1aa4:	9b 01       	movw	r18, r22
    1aa6:	ac 01       	movw	r20, r24
    1aa8:	c5 01       	movw	r24, r10
    1aaa:	b4 01       	movw	r22, r8
    1aac:	0e 94 ae 12 	call	0x255c	; 0x255c <__addsf3>
    1ab0:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <sqrt>
	//double x_sq = (Point_get_x(m1)-Point_get_x(m2))*(Point_get_x(m1)-Point_get_x(m2));
	//double y_sq = (Point_get_y(m1)-Point_get_y(m2))*(Point_get_y(m1)-Point_get_y(m2));
	//return sqrt(x_sq+y_sq);
}
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	ff 90       	pop	r15
    1aba:	ef 90       	pop	r14
    1abc:	df 90       	pop	r13
    1abe:	cf 90       	pop	r12
    1ac0:	bf 90       	pop	r11
    1ac2:	af 90       	pop	r10
    1ac4:	9f 90       	pop	r9
    1ac6:	8f 90       	pop	r8
    1ac8:	08 95       	ret

00001aca <Point_get_x>:

double Point_get_x(Point *m){
    return m->x;
    1aca:	fc 01       	movw	r30, r24
    1acc:	60 81       	ld	r22, Z
    1ace:	71 81       	ldd	r23, Z+1	; 0x01
    1ad0:	82 81       	ldd	r24, Z+2	; 0x02
    1ad2:	93 81       	ldd	r25, Z+3	; 0x03
}
    1ad4:	08 95       	ret

00001ad6 <Point_get_y>:

double Point_get_y(Point *m){
    return m->y;
    1ad6:	fc 01       	movw	r30, r24
    1ad8:	64 81       	ldd	r22, Z+4	; 0x04
    1ada:	75 81       	ldd	r23, Z+5	; 0x05
    1adc:	86 81       	ldd	r24, Z+6	; 0x06
    1ade:	97 81       	ldd	r25, Z+7	; 0x07
}
    1ae0:	08 95       	ret

00001ae2 <Point_set_x>:

void Point_set_x(Point *m, double value){
    m->x=value;
    1ae2:	fc 01       	movw	r30, r24
    1ae4:	40 83       	st	Z, r20
    1ae6:	51 83       	std	Z+1, r21	; 0x01
    1ae8:	62 83       	std	Z+2, r22	; 0x02
    1aea:	73 83       	std	Z+3, r23	; 0x03
    1aec:	08 95       	ret

00001aee <Point_set_y>:
}
void Point_set_y(Point *m, double value){
    m->y=value;
    1aee:	fc 01       	movw	r30, r24
    1af0:	44 83       	std	Z+4, r20	; 0x04
    1af2:	55 83       	std	Z+5, r21	; 0x05
    1af4:	66 83       	std	Z+6, r22	; 0x06
    1af6:	77 83       	std	Z+7, r23	; 0x07
    1af8:	08 95       	ret

00001afa <setPrescaler>:
}


void setPrescaler(int prescaleFactor){

	switch(prescaleFactor){
    1afa:	80 34       	cpi	r24, 0x40	; 64
    1afc:	91 05       	cpc	r25, r1
    1afe:	39 f1       	breq	.+78     	; 0x1b4e <setPrescaler+0x54>
    1b00:	34 f4       	brge	.+12     	; 0x1b0e <setPrescaler+0x14>
    1b02:	81 30       	cpi	r24, 0x01	; 1
    1b04:	91 05       	cpc	r25, r1
    1b06:	59 f0       	breq	.+22     	; 0x1b1e <setPrescaler+0x24>
    1b08:	08 97       	sbiw	r24, 0x08	; 8
    1b0a:	a9 f0       	breq	.+42     	; 0x1b36 <setPrescaler+0x3c>
    1b0c:	08 95       	ret
    1b0e:	81 15       	cp	r24, r1
    1b10:	21 e0       	ldi	r18, 0x01	; 1
    1b12:	92 07       	cpc	r25, r18
    1b14:	41 f1       	breq	.+80     	; 0x1b66 <setPrescaler+0x6c>
    1b16:	81 15       	cp	r24, r1
    1b18:	94 40       	sbci	r25, 0x04	; 4
    1b1a:	89 f1       	breq	.+98     	; 0x1b7e <setPrescaler+0x84>
    1b1c:	08 95       	ret
		case 1:
		clear(TCCR3B, CS32);
    1b1e:	e1 e9       	ldi	r30, 0x91	; 145
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	8b 7f       	andi	r24, 0xFB	; 251
    1b26:	80 83       	st	Z, r24
		clear(TCCR3B, CS31);
    1b28:	80 81       	ld	r24, Z
    1b2a:	8d 7f       	andi	r24, 0xFD	; 253
    1b2c:	80 83       	st	Z, r24
		set(TCCR3B, CS30);
    1b2e:	80 81       	ld	r24, Z
    1b30:	81 60       	ori	r24, 0x01	; 1
    1b32:	80 83       	st	Z, r24
		break;
    1b34:	08 95       	ret

		case 8:
		clear(TCCR3B, CS32);
    1b36:	e1 e9       	ldi	r30, 0x91	; 145
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	8b 7f       	andi	r24, 0xFB	; 251
    1b3e:	80 83       	st	Z, r24
		set(TCCR3B, CS31);
    1b40:	80 81       	ld	r24, Z
    1b42:	82 60       	ori	r24, 0x02	; 2
    1b44:	80 83       	st	Z, r24
		clear(TCCR3B, CS30);
    1b46:	80 81       	ld	r24, Z
    1b48:	8e 7f       	andi	r24, 0xFE	; 254
    1b4a:	80 83       	st	Z, r24
		break;
    1b4c:	08 95       	ret

		case 64:
		clear(TCCR3B, CS32);
    1b4e:	e1 e9       	ldi	r30, 0x91	; 145
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	8b 7f       	andi	r24, 0xFB	; 251
    1b56:	80 83       	st	Z, r24
		set(TCCR3B, CS31);
    1b58:	80 81       	ld	r24, Z
    1b5a:	82 60       	ori	r24, 0x02	; 2
    1b5c:	80 83       	st	Z, r24
		set(TCCR3B, CS30);
    1b5e:	80 81       	ld	r24, Z
    1b60:	81 60       	ori	r24, 0x01	; 1
    1b62:	80 83       	st	Z, r24
		break;
    1b64:	08 95       	ret

		case 256:
		set(TCCR3B, CS32);
    1b66:	e1 e9       	ldi	r30, 0x91	; 145
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	84 60       	ori	r24, 0x04	; 4
    1b6e:	80 83       	st	Z, r24
		clear(TCCR3B, CS31);
    1b70:	80 81       	ld	r24, Z
    1b72:	8d 7f       	andi	r24, 0xFD	; 253
    1b74:	80 83       	st	Z, r24
		clear(TCCR3B, CS30);
    1b76:	80 81       	ld	r24, Z
    1b78:	8e 7f       	andi	r24, 0xFE	; 254
    1b7a:	80 83       	st	Z, r24
		break;
    1b7c:	08 95       	ret

		case 1024:
		// Clock prescaler /1024
		set(TCCR3B, CS32);
    1b7e:	e1 e9       	ldi	r30, 0x91	; 145
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	84 60       	ori	r24, 0x04	; 4
    1b86:	80 83       	st	Z, r24
		clear(TCCR3B, CS31);
    1b88:	80 81       	ld	r24, Z
    1b8a:	8d 7f       	andi	r24, 0xFD	; 253
    1b8c:	80 83       	st	Z, r24
		set(TCCR3B, CS30);
    1b8e:	80 81       	ld	r24, Z
    1b90:	81 60       	ori	r24, 0x01	; 1
    1b92:	80 83       	st	Z, r24
    1b94:	08 95       	ret

00001b96 <calculateOCR3A>:
		
	}
}

int calculateOCR3A(float timer_freq){
	return (int) ((float)SYSTEM_CLK/((pow(2,N_DIV+1))*PRESCALER*timer_freq))-1;
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	40 e0       	ldi	r20, 0x00	; 0
    1b9c:	53 e4       	ldi	r21, 0x43	; 67
    1b9e:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
    1ba2:	9b 01       	movw	r18, r22
    1ba4:	ac 01       	movw	r20, r24
    1ba6:	60 e0       	ldi	r22, 0x00	; 0
    1ba8:	74 e2       	ldi	r23, 0x24	; 36
    1baa:	84 e7       	ldi	r24, 0x74	; 116
    1bac:	9b e4       	ldi	r25, 0x4B	; 75
    1bae:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__divsf3>
    1bb2:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__fixsfsi>
}
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	08 95       	ret

00001bbc <timer3_init>:
	set(TCCR1B, CS10);
}
*/

void timer3_init(void)
{
    1bbc:	cf 93       	push	r28
    1bbe:	df 93       	push	r29
	// Timer mode 4, count up to OCR3A
	clear(TCCR3B, WGM33);
    1bc0:	e1 e9       	ldi	r30, 0x91	; 145
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	8f 7e       	andi	r24, 0xEF	; 239
    1bc8:	80 83       	st	Z, r24
	set(TCCR3B,WGM32);
    1bca:	80 81       	ld	r24, Z
    1bcc:	88 60       	ori	r24, 0x08	; 8
    1bce:	80 83       	st	Z, r24
	clear(TCCR3A, WGM31);
    1bd0:	c0 e9       	ldi	r28, 0x90	; 144
    1bd2:	d0 e0       	ldi	r29, 0x00	; 0
    1bd4:	88 81       	ld	r24, Y
    1bd6:	8d 7f       	andi	r24, 0xFD	; 253
    1bd8:	88 83       	st	Y, r24
	clear(TCCR3A,WGM30);
    1bda:	88 81       	ld	r24, Y
    1bdc:	8e 7f       	andi	r24, 0xFE	; 254
    1bde:	88 83       	st	Y, r24
	
	setPrescaler(PRESCALER);
    1be0:	80 e4       	ldi	r24, 0x40	; 64
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <setPrescaler>
	

	set(DDRC,6);
    1be8:	3e 9a       	sbi	0x07, 6	; 7
	//TCCR3A:	COM3A1	TCCR3A:	COM3A0
	clear(TCCR3A,COM3A1);
    1bea:	88 81       	ld	r24, Y
    1bec:	8f 77       	andi	r24, 0x7F	; 127
    1bee:	88 83       	st	Y, r24
	set(TCCR3A,COM3A0);
    1bf0:	88 81       	ld	r24, Y
    1bf2:	80 64       	ori	r24, 0x40	; 64
    1bf4:	88 83       	st	Y, r24

	//Enable interrupt when TCNT3 matches OCR3A
	set(TIMSK3, OCIE3A);
    1bf6:	e1 e7       	ldi	r30, 0x71	; 113
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	82 60       	ori	r24, 0x02	; 2
    1bfe:	80 83       	st	Z, r24

	//set OCR3A so that timer 3 counts ~1kHz
	OCR3A = calculateOCR3A(timer_freq);
    1c00:	60 91 0d 01 	lds	r22, 0x010D
    1c04:	70 91 0e 01 	lds	r23, 0x010E
    1c08:	80 91 0f 01 	lds	r24, 0x010F
    1c0c:	90 91 10 01 	lds	r25, 0x0110
    1c10:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <calculateOCR3A>
    1c14:	90 93 99 00 	sts	0x0099, r25
    1c18:	80 93 98 00 	sts	0x0098, r24
}
    1c1c:	df 91       	pop	r29
    1c1e:	cf 91       	pop	r28
    1c20:	08 95       	ret

00001c22 <init>:
		return 0;		
}	

void init(){
	//localization initialization
	camera_origin = Point_create(512,384);
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	40 ec       	ldi	r20, 0xC0	; 192
    1c28:	53 e4       	ldi	r21, 0x43	; 67
    1c2a:	60 e0       	ldi	r22, 0x00	; 0
    1c2c:	70 e0       	ldi	r23, 0x00	; 0
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	94 e4       	ldi	r25, 0x44	; 68
    1c32:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <Point_create>
    1c36:	90 93 6d 01 	sts	0x016D, r25
    1c3a:	80 93 6c 01 	sts	0x016C, r24
	sp0= Point_create(0, 0);
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	a9 01       	movw	r20, r18
    1c44:	ca 01       	movw	r24, r20
    1c46:	b9 01       	movw	r22, r18
    1c48:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <Point_create>
    1c4c:	90 93 7d 01 	sts	0x017D, r25
    1c50:	80 93 7c 01 	sts	0x017C, r24
	sp1= Point_create(0, 0);
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	a9 01       	movw	r20, r18
    1c5a:	ca 01       	movw	r24, r20
    1c5c:	b9 01       	movw	r22, r18
    1c5e:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <Point_create>
    1c62:	90 93 71 01 	sts	0x0171, r25
    1c66:	80 93 70 01 	sts	0x0170, r24
	sp2= Point_create(0, 0);
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	a9 01       	movw	r20, r18
    1c70:	ca 01       	movw	r24, r20
    1c72:	b9 01       	movw	r22, r18
    1c74:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <Point_create>
    1c78:	90 93 73 01 	sts	0x0173, r25
    1c7c:	80 93 72 01 	sts	0x0172, r24
	sp3= Point_create(0, 0);
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	a9 01       	movw	r20, r18
    1c86:	ca 01       	movw	r24, r20
    1c88:	b9 01       	movw	r22, r18
    1c8a:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <Point_create>
    1c8e:	90 93 79 01 	sts	0x0179, r25
    1c92:	80 93 78 01 	sts	0x0178, r24
	
	sample_point_origin = Point_create(0, 0);
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	a9 01       	movw	r20, r18
    1c9c:	ca 01       	movw	r24, r20
    1c9e:	b9 01       	movw	r22, r18
    1ca0:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <Point_create>
    1ca4:	90 93 6b 01 	sts	0x016B, r25
    1ca8:	80 93 6a 01 	sts	0x016A, r24
	origin_offset = Point_create(0, 0);
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	a9 01       	movw	r20, r18
    1cb2:	ca 01       	movw	r24, r20
    1cb4:	b9 01       	movw	r22, r18
    1cb6:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <Point_create>
    1cba:	90 93 6f 01 	sts	0x016F, r25
    1cbe:	80 93 6e 01 	sts	0x016E, r24
	vect_south_star_to_origin = Point_create(0, 0);
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	a9 01       	movw	r20, r18
    1cc8:	ca 01       	movw	r24, r20
    1cca:	b9 01       	movw	r22, r18
    1ccc:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <Point_create>
    1cd0:	90 93 77 01 	sts	0x0177, r25
    1cd4:	80 93 76 01 	sts	0x0176, r24
	
	distance_matrix=Matrix_create(3,3);
    1cd8:	63 e0       	ldi	r22, 0x03	; 3
    1cda:	70 e0       	ldi	r23, 0x00	; 0
    1cdc:	83 e0       	ldi	r24, 0x03	; 3
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	0e 94 05 03 	call	0x60a	; 0x60a <Matrix_create>
    1ce4:	90 93 75 01 	sts	0x0175, r25
    1ce8:	80 93 74 01 	sts	0x0174, r24
	H_stars_robot = Matrix_create(3, 3);
    1cec:	63 e0       	ldi	r22, 0x03	; 3
    1cee:	70 e0       	ldi	r23, 0x00	; 0
    1cf0:	83 e0       	ldi	r24, 0x03	; 3
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	0e 94 05 03 	call	0x60a	; 0x60a <Matrix_create>
    1cf8:	90 93 7b 01 	sts	0x017B, r25
    1cfc:	80 93 7a 01 	sts	0x017A, r24
	H_robot_stars = Matrix_create(3,3);
    1d00:	63 e0       	ldi	r22, 0x03	; 3
    1d02:	70 e0       	ldi	r23, 0x00	; 0
    1d04:	83 e0       	ldi	r24, 0x03	; 3
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	0e 94 05 03 	call	0x60a	; 0x60a <Matrix_create>
    1d0c:	90 93 49 01 	sts	0x0149, r25
    1d10:	80 93 48 01 	sts	0x0148, r24
	
	sample_points[0]=*sp0;
    1d14:	e0 91 7c 01 	lds	r30, 0x017C
    1d18:	f0 91 7d 01 	lds	r31, 0x017D
    1d1c:	88 e0       	ldi	r24, 0x08	; 8
    1d1e:	aa e4       	ldi	r26, 0x4A	; 74
    1d20:	b1 e0       	ldi	r27, 0x01	; 1
    1d22:	01 90       	ld	r0, Z+
    1d24:	0d 92       	st	X+, r0
    1d26:	8a 95       	dec	r24
    1d28:	e1 f7       	brne	.-8      	; 0x1d22 <init+0x100>
	sample_points[1]=*sp1;
    1d2a:	e0 91 70 01 	lds	r30, 0x0170
    1d2e:	f0 91 71 01 	lds	r31, 0x0171
    1d32:	88 e0       	ldi	r24, 0x08	; 8
    1d34:	a2 e5       	ldi	r26, 0x52	; 82
    1d36:	b1 e0       	ldi	r27, 0x01	; 1
    1d38:	01 90       	ld	r0, Z+
    1d3a:	0d 92       	st	X+, r0
    1d3c:	8a 95       	dec	r24
    1d3e:	e1 f7       	brne	.-8      	; 0x1d38 <init+0x116>
	sample_points[2]=*sp2;
    1d40:	e0 91 72 01 	lds	r30, 0x0172
    1d44:	f0 91 73 01 	lds	r31, 0x0173
    1d48:	88 e0       	ldi	r24, 0x08	; 8
    1d4a:	aa e5       	ldi	r26, 0x5A	; 90
    1d4c:	b1 e0       	ldi	r27, 0x01	; 1
    1d4e:	01 90       	ld	r0, Z+
    1d50:	0d 92       	st	X+, r0
    1d52:	8a 95       	dec	r24
    1d54:	e1 f7       	brne	.-8      	; 0x1d4e <init+0x12c>
	sample_points[3]=*sp3;
    1d56:	e0 91 78 01 	lds	r30, 0x0178
    1d5a:	f0 91 79 01 	lds	r31, 0x0179
    1d5e:	88 e0       	ldi	r24, 0x08	; 8
    1d60:	a2 e6       	ldi	r26, 0x62	; 98
    1d62:	b1 e0       	ldi	r27, 0x01	; 1
    1d64:	01 90       	ld	r0, Z+
    1d66:	0d 92       	st	X+, r0
    1d68:	8a 95       	dec	r24
    1d6a:	e1 f7       	brne	.-8      	; 0x1d64 <init+0x142>
	
	
	m_clockdivide(N_DIV);
    1d6c:	e1 e6       	ldi	r30, 0x61	; 97
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 e8       	ldi	r24, 0x80	; 128
    1d72:	80 83       	st	Z, r24
    1d74:	10 82       	st	Z, r1

/************************************************************************/
/* Turn on the wii camera                                               */
/************************************************************************/
void setup_mWii(){
	char wiiOpen= m_wii_open();
    1d76:	0e 94 ab 0a 	call	0x1556	; 0x1556 <m_wii_open>
	
	
	m_clockdivide(N_DIV);
	setup_mWii();
	//setupMRF();
	m_usb_init();
    1d7a:	0e 94 ac 07 	call	0xf58	; 0xf58 <m_usb_init>
	//init peripherals
	m_bus_init();
    1d7e:	0e 94 9b 07 	call	0xf36	; 0xf36 <m_bus_init>
	timer3_init();
    1d82:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <timer3_init>
	//enable global interrupts for  our timers! and other stuff
	sei();
    1d86:	78 94       	sei
    1d88:	08 95       	ret

00001d8a <__vector_32>:

int calculateOCR3A(float timer_freq){
	return (int) ((float)SYSTEM_CLK/((pow(2,N_DIV+1))*PRESCALER*timer_freq))-1;
}

ISR(TIMER3_COMPA_vect){
    1d8a:	1f 92       	push	r1
    1d8c:	0f 92       	push	r0
    1d8e:	0f b6       	in	r0, 0x3f	; 63
    1d90:	0f 92       	push	r0
    1d92:	11 24       	eor	r1, r1
    1d94:	8f 93       	push	r24
    1d96:	9f 93       	push	r25
	localize_me = TRUE;
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	90 93 17 01 	sts	0x0117, r25
    1da0:	80 93 16 01 	sts	0x0116, r24
}
    1da4:	9f 91       	pop	r25
    1da6:	8f 91       	pop	r24
    1da8:	0f 90       	pop	r0
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	0f 90       	pop	r0
    1dae:	1f 90       	pop	r1
    1db0:	18 95       	reti

00001db2 <read_mwii_data>:
	}
}


void read_mwii_data(){
	m_wii_read( blobs);
    1db2:	80 e3       	ldi	r24, 0x30	; 48
    1db4:	91 e0       	ldi	r25, 0x01	; 1
    1db6:	0e 94 cc 0b 	call	0x1798	; 0x1798 <m_wii_read>
	
	//fill in the sample points with the approriate x and y from the mWii blobs
	Point_set_x(sp0,blobs[0]);
    1dba:	60 91 30 01 	lds	r22, 0x0130
    1dbe:	70 91 31 01 	lds	r23, 0x0131
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	0e 94 14 14 	call	0x2828	; 0x2828 <__floatunsisf>
    1dca:	ab 01       	movw	r20, r22
    1dcc:	bc 01       	movw	r22, r24
    1dce:	80 91 7c 01 	lds	r24, 0x017C
    1dd2:	90 91 7d 01 	lds	r25, 0x017D
    1dd6:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Point_set_x>
	Point_set_y(sp0,blobs[1]);
    1dda:	60 91 32 01 	lds	r22, 0x0132
    1dde:	70 91 33 01 	lds	r23, 0x0133
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	0e 94 14 14 	call	0x2828	; 0x2828 <__floatunsisf>
    1dea:	ab 01       	movw	r20, r22
    1dec:	bc 01       	movw	r22, r24
    1dee:	80 91 7c 01 	lds	r24, 0x017C
    1df2:	90 91 7d 01 	lds	r25, 0x017D
    1df6:	0e 94 77 0d 	call	0x1aee	; 0x1aee <Point_set_y>
	
	Point_set_x(sp1,blobs[3]);
    1dfa:	60 91 36 01 	lds	r22, 0x0136
    1dfe:	70 91 37 01 	lds	r23, 0x0137
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	0e 94 14 14 	call	0x2828	; 0x2828 <__floatunsisf>
    1e0a:	ab 01       	movw	r20, r22
    1e0c:	bc 01       	movw	r22, r24
    1e0e:	80 91 70 01 	lds	r24, 0x0170
    1e12:	90 91 71 01 	lds	r25, 0x0171
    1e16:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Point_set_x>
	Point_set_y(sp1,blobs[4]);
    1e1a:	60 91 38 01 	lds	r22, 0x0138
    1e1e:	70 91 39 01 	lds	r23, 0x0139
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	0e 94 14 14 	call	0x2828	; 0x2828 <__floatunsisf>
    1e2a:	ab 01       	movw	r20, r22
    1e2c:	bc 01       	movw	r22, r24
    1e2e:	80 91 70 01 	lds	r24, 0x0170
    1e32:	90 91 71 01 	lds	r25, 0x0171
    1e36:	0e 94 77 0d 	call	0x1aee	; 0x1aee <Point_set_y>
	
	Point_set_x(sp2,blobs[6]);
    1e3a:	60 91 3c 01 	lds	r22, 0x013C
    1e3e:	70 91 3d 01 	lds	r23, 0x013D
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	0e 94 14 14 	call	0x2828	; 0x2828 <__floatunsisf>
    1e4a:	ab 01       	movw	r20, r22
    1e4c:	bc 01       	movw	r22, r24
    1e4e:	80 91 72 01 	lds	r24, 0x0172
    1e52:	90 91 73 01 	lds	r25, 0x0173
    1e56:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Point_set_x>
	Point_set_y(sp2,blobs[7]);
    1e5a:	60 91 3e 01 	lds	r22, 0x013E
    1e5e:	70 91 3f 01 	lds	r23, 0x013F
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	0e 94 14 14 	call	0x2828	; 0x2828 <__floatunsisf>
    1e6a:	ab 01       	movw	r20, r22
    1e6c:	bc 01       	movw	r22, r24
    1e6e:	80 91 72 01 	lds	r24, 0x0172
    1e72:	90 91 73 01 	lds	r25, 0x0173
    1e76:	0e 94 77 0d 	call	0x1aee	; 0x1aee <Point_set_y>
	
	Point_set_x(sp3,blobs[9]);
    1e7a:	60 91 42 01 	lds	r22, 0x0142
    1e7e:	70 91 43 01 	lds	r23, 0x0143
    1e82:	80 e0       	ldi	r24, 0x00	; 0
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	0e 94 14 14 	call	0x2828	; 0x2828 <__floatunsisf>
    1e8a:	ab 01       	movw	r20, r22
    1e8c:	bc 01       	movw	r22, r24
    1e8e:	80 91 78 01 	lds	r24, 0x0178
    1e92:	90 91 79 01 	lds	r25, 0x0179
    1e96:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Point_set_x>
	Point_set_y(sp3,blobs[10]);
    1e9a:	60 91 44 01 	lds	r22, 0x0144
    1e9e:	70 91 45 01 	lds	r23, 0x0145
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	0e 94 14 14 	call	0x2828	; 0x2828 <__floatunsisf>
    1eaa:	ab 01       	movw	r20, r22
    1eac:	bc 01       	movw	r22, r24
    1eae:	80 91 78 01 	lds	r24, 0x0178
    1eb2:	90 91 79 01 	lds	r25, 0x0179
    1eb6:	0e 94 77 0d 	call	0x1aee	; 0x1aee <Point_set_y>
    1eba:	08 95       	ret

00001ebc <localize_robot>:
	robo_coordinates[1][1]=robo_coordinates[0][1];
	robo_thetas[1]=robo_thetas[0];
}


int localize_robot(){
    1ebc:	2f 92       	push	r2
    1ebe:	3f 92       	push	r3
    1ec0:	4f 92       	push	r4
    1ec2:	5f 92       	push	r5
    1ec4:	6f 92       	push	r6
    1ec6:	7f 92       	push	r7
    1ec8:	8f 92       	push	r8
    1eca:	9f 92       	push	r9
    1ecc:	af 92       	push	r10
    1ece:	bf 92       	push	r11
    1ed0:	cf 92       	push	r12
    1ed2:	df 92       	push	r13
    1ed4:	ef 92       	push	r14
    1ed6:	ff 92       	push	r15
    1ed8:	0f 93       	push	r16
    1eda:	1f 93       	push	r17
    1edc:	cf 93       	push	r28
    1ede:	df 93       	push	r29
    1ee0:	cd b7       	in	r28, 0x3d	; 61
    1ee2:	de b7       	in	r29, 0x3e	; 62
    1ee4:	2c 97       	sbiw	r28, 0x0c	; 12
    1ee6:	0f b6       	in	r0, 0x3f	; 63
    1ee8:	f8 94       	cli
    1eea:	de bf       	out	0x3e, r29	; 62
    1eec:	0f be       	out	0x3f, r0	; 63
    1eee:	cd bf       	out	0x3d, r28	; 61
	//save_old_location(robo_coordinates, robo_thetas);
	
	//get the localization data from the mwii - creates Points sp0, sp1, sp2, sp3
	read_mwii_data();
    1ef0:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <read_mwii_data>
	
	
	if (m_usb_rx_available()){
    1ef4:	0e 94 c5 07 	call	0xf8a	; 0xf8a <m_usb_rx_available>
    1ef8:	88 23       	and	r24, r24
    1efa:	09 f4       	brne	.+2      	; 0x1efe <localize_robot+0x42>
    1efc:	80 c0       	rjmp	.+256    	; 0x1ffe <localize_robot+0x142>
		m_usb_tx_string("\nSample ");
    1efe:	8d ee       	ldi	r24, 0xED	; 237
    1f00:	92 e0       	ldi	r25, 0x02	; 2
    1f02:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <print_P>
		m_usb_tx_string("\tP0: (");
    1f06:	86 ee       	ldi	r24, 0xE6	; 230
    1f08:	92 e0       	ldi	r25, 0x02	; 2
    1f0a:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <print_P>
		m_usb_tx_int(Point_get_x(sp0));
    1f0e:	80 91 7c 01 	lds	r24, 0x017C
    1f12:	90 91 7d 01 	lds	r25, 0x017D
    1f16:	0e 94 65 0d 	call	0x1aca	; 0x1aca <Point_get_x>
    1f1a:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__fixsfsi>
    1f1e:	cb 01       	movw	r24, r22
    1f20:	0e 94 0c 0a 	call	0x1418	; 0x1418 <m_usb_tx_int>
		m_usb_tx_string(",");
    1f24:	84 ee       	ldi	r24, 0xE4	; 228
    1f26:	92 e0       	ldi	r25, 0x02	; 2
    1f28:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <print_P>
		m_usb_tx_int(Point_get_y(sp0));
    1f2c:	80 91 7c 01 	lds	r24, 0x017C
    1f30:	90 91 7d 01 	lds	r25, 0x017D
    1f34:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <Point_get_y>
    1f38:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__fixsfsi>
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	0e 94 0c 0a 	call	0x1418	; 0x1418 <m_usb_tx_int>
		
		m_usb_tx_string(")\t P1: (");
    1f42:	8b ed       	ldi	r24, 0xDB	; 219
    1f44:	92 e0       	ldi	r25, 0x02	; 2
    1f46:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <print_P>
		m_usb_tx_int(Point_get_x(sp1));
    1f4a:	80 91 70 01 	lds	r24, 0x0170
    1f4e:	90 91 71 01 	lds	r25, 0x0171
    1f52:	0e 94 65 0d 	call	0x1aca	; 0x1aca <Point_get_x>
    1f56:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__fixsfsi>
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	0e 94 0c 0a 	call	0x1418	; 0x1418 <m_usb_tx_int>
		m_usb_tx_string(",");
    1f60:	89 ed       	ldi	r24, 0xD9	; 217
    1f62:	92 e0       	ldi	r25, 0x02	; 2
    1f64:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <print_P>
		m_usb_tx_int(Point_get_y(sp1));
    1f68:	80 91 70 01 	lds	r24, 0x0170
    1f6c:	90 91 71 01 	lds	r25, 0x0171
    1f70:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <Point_get_y>
    1f74:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__fixsfsi>
    1f78:	cb 01       	movw	r24, r22
    1f7a:	0e 94 0c 0a 	call	0x1418	; 0x1418 <m_usb_tx_int>
		
		m_usb_tx_string(")\t P2: (");
    1f7e:	80 ed       	ldi	r24, 0xD0	; 208
    1f80:	92 e0       	ldi	r25, 0x02	; 2
    1f82:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <print_P>
		m_usb_tx_int(Point_get_x(sp2));
    1f86:	80 91 72 01 	lds	r24, 0x0172
    1f8a:	90 91 73 01 	lds	r25, 0x0173
    1f8e:	0e 94 65 0d 	call	0x1aca	; 0x1aca <Point_get_x>
    1f92:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__fixsfsi>
    1f96:	cb 01       	movw	r24, r22
    1f98:	0e 94 0c 0a 	call	0x1418	; 0x1418 <m_usb_tx_int>
		m_usb_tx_string(",");
    1f9c:	8e ec       	ldi	r24, 0xCE	; 206
    1f9e:	92 e0       	ldi	r25, 0x02	; 2
    1fa0:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <print_P>
		m_usb_tx_int(Point_get_y(sp2));
    1fa4:	80 91 72 01 	lds	r24, 0x0172
    1fa8:	90 91 73 01 	lds	r25, 0x0173
    1fac:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <Point_get_y>
    1fb0:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__fixsfsi>
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	0e 94 0c 0a 	call	0x1418	; 0x1418 <m_usb_tx_int>
		
		m_usb_tx_string(")\t P3: (");
    1fba:	85 ec       	ldi	r24, 0xC5	; 197
    1fbc:	92 e0       	ldi	r25, 0x02	; 2
    1fbe:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <print_P>
		m_usb_tx_int(Point_get_x(sp3));
    1fc2:	80 91 78 01 	lds	r24, 0x0178
    1fc6:	90 91 79 01 	lds	r25, 0x0179
    1fca:	0e 94 65 0d 	call	0x1aca	; 0x1aca <Point_get_x>
    1fce:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__fixsfsi>
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	0e 94 0c 0a 	call	0x1418	; 0x1418 <m_usb_tx_int>
		m_usb_tx_string(",");
    1fd8:	83 ec       	ldi	r24, 0xC3	; 195
    1fda:	92 e0       	ldi	r25, 0x02	; 2
    1fdc:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <print_P>
		m_usb_tx_int(Point_get_y(sp3));
    1fe0:	80 91 78 01 	lds	r24, 0x0178
    1fe4:	90 91 79 01 	lds	r25, 0x0179
    1fe8:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <Point_get_y>
    1fec:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__fixsfsi>
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	0e 94 0c 0a 	call	0x1418	; 0x1418 <m_usb_tx_int>
		m_usb_tx_string(")");
    1ff6:	81 ec       	ldi	r24, 0xC1	; 193
    1ff8:	92 e0       	ldi	r25, 0x02	; 2
    1ffa:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <print_P>
	}
	
	m_red(TOGGLE);	
    1ffe:	6e 9a       	sbi	0x0d, 6	; 13
    2000:	9e b1       	in	r25, 0x0e	; 14
    2002:	80 e4       	ldi	r24, 0x40	; 64
    2004:	89 27       	eor	r24, r25
    2006:	8e b9       	out	0x0e, r24	; 14
	int there_are_bad_stars = 0;// use if we do the 3 star scenario
	
	//Skip localization if we see any bad star
	if(Util_is_bad_star(sp0)||Util_is_bad_star(sp1)||Util_is_bad_star(sp2)||Util_is_bad_star(sp3)){
    2008:	80 91 7c 01 	lds	r24, 0x017C
    200c:	90 91 7d 01 	lds	r25, 0x017D
    2010:	0e 94 ba 02 	call	0x574	; 0x574 <Util_is_bad_star>
    2014:	89 2b       	or	r24, r25
    2016:	c9 f4       	brne	.+50     	; 0x204a <localize_robot+0x18e>
    2018:	80 91 70 01 	lds	r24, 0x0170
    201c:	90 91 71 01 	lds	r25, 0x0171
    2020:	0e 94 ba 02 	call	0x574	; 0x574 <Util_is_bad_star>
    2024:	89 2b       	or	r24, r25
    2026:	89 f4       	brne	.+34     	; 0x204a <localize_robot+0x18e>
    2028:	80 91 72 01 	lds	r24, 0x0172
    202c:	90 91 73 01 	lds	r25, 0x0173
    2030:	0e 94 ba 02 	call	0x574	; 0x574 <Util_is_bad_star>
    2034:	89 2b       	or	r24, r25
    2036:	49 f4       	brne	.+18     	; 0x204a <localize_robot+0x18e>
    2038:	80 91 78 01 	lds	r24, 0x0178
    203c:	90 91 79 01 	lds	r25, 0x0179
    2040:	0e 94 ba 02 	call	0x574	; 0x574 <Util_is_bad_star>
    2044:	1c 01       	movw	r2, r24
    2046:	00 97       	sbiw	r24, 0x00	; 0
    2048:	69 f0       	breq	.+26     	; 0x2064 <localize_robot+0x1a8>
		there_are_bad_stars=1;
		if (m_usb_rx_available()){
    204a:	0e 94 c5 07 	call	0xf8a	; 0xf8a <m_usb_rx_available>
    204e:	88 23       	and	r24, r24
    2050:	09 f4       	brne	.+2      	; 0x2054 <localize_robot+0x198>
    2052:	57 c2       	rjmp	.+1198   	; 0x2502 <localize_robot+0x646>
			m_usb_tx_string("\nIgnoring because there are bad stars ");
    2054:	8a e9       	ldi	r24, 0x9A	; 154
    2056:	92 e0       	ldi	r25, 0x02	; 2
    2058:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <print_P>
		}
		return -1;
    205c:	22 24       	eor	r2, r2
    205e:	2a 94       	dec	r2
    2060:	32 2c       	mov	r3, r2
    2062:	52 c2       	rjmp	.+1188   	; 0x2508 <localize_robot+0x64c>
	}
		
	if(!there_are_bad_stars){
		
		Util_get_distance_matrix(sample_points, distance_matrix);
    2064:	60 91 74 01 	lds	r22, 0x0174
    2068:	70 91 75 01 	lds	r23, 0x0175
    206c:	8a e4       	ldi	r24, 0x4A	; 74
    206e:	91 e0       	ldi	r25, 0x01	; 1
    2070:	0e 94 9a 01 	call	0x334	; 0x334 <Util_get_distance_matrix>
		if (m_usb_rx_available()){m_usb_tx_string("\ndistance_matrix ");
    2074:	0e 94 c5 07 	call	0xf8a	; 0xf8a <m_usb_rx_available>
    2078:	88 23       	and	r24, r24
    207a:	21 f0       	breq	.+8      	; 0x2084 <localize_robot+0x1c8>
    207c:	88 e8       	ldi	r24, 0x88	; 136
    207e:	92 e0       	ldi	r25, 0x02	; 2
    2080:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <print_P>
		  }
	}
	*/
	
	// find indexes of min and max r-row, c-col
	int r_c_min[2]={0,0};
    2084:	1e 82       	std	Y+6, r1	; 0x06
    2086:	1d 82       	std	Y+5, r1	; 0x05
    2088:	18 86       	std	Y+8, r1	; 0x08
    208a:	1f 82       	std	Y+7, r1	; 0x07
	int r_c_max[2]={0,0};
    208c:	1a 82       	std	Y+2, r1	; 0x02
    208e:	19 82       	std	Y+1, r1	; 0x01
    2090:	1c 82       	std	Y+4, r1	; 0x04
    2092:	1b 82       	std	Y+3, r1	; 0x03
	Matrix_find_min(r_c_min, distance_matrix);
    2094:	60 91 74 01 	lds	r22, 0x0174
    2098:	70 91 75 01 	lds	r23, 0x0175
    209c:	ce 01       	movw	r24, r28
    209e:	05 96       	adiw	r24, 0x05	; 5
    20a0:	0e 94 64 03 	call	0x6c8	; 0x6c8 <Matrix_find_min>
	if (m_usb_rx_available()){
    20a4:	0e 94 c5 07 	call	0xf8a	; 0xf8a <m_usb_rx_available>
    20a8:	88 23       	and	r24, r24
    20aa:	21 f0       	breq	.+8      	; 0x20b4 <localize_robot+0x1f8>
	m_usb_tx_string("\nfind min ");
    20ac:	8d e7       	ldi	r24, 0x7D	; 125
    20ae:	92 e0       	ldi	r25, 0x02	; 2
    20b0:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <print_P>
		m_usb_tx_int(r_c_min[1]);
		m_usb_tx_string("\n");	
		m_usb_tx_int(Matrix_get(distance_matrix,r_c_min[0],r_c_min[1]));
		}*/
	
	Matrix_find_max(r_c_max, distance_matrix);
    20b4:	60 91 74 01 	lds	r22, 0x0174
    20b8:	70 91 75 01 	lds	r23, 0x0175
    20bc:	ce 01       	movw	r24, r28
    20be:	01 96       	adiw	r24, 0x01	; 1
    20c0:	0e 94 1c 04 	call	0x838	; 0x838 <Matrix_find_max>
	if (m_usb_rx_available()){
    20c4:	0e 94 c5 07 	call	0xf8a	; 0xf8a <m_usb_rx_available>
    20c8:	88 23       	and	r24, r24
    20ca:	21 f0       	breq	.+8      	; 0x20d4 <localize_robot+0x218>
	m_usb_tx_string("\nfind max ");
    20cc:	82 e7       	ldi	r24, 0x72	; 114
    20ce:	92 e0       	ldi	r25, 0x02	; 2
    20d0:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <print_P>
		}*/
	
	
		//find which star is pointing in the positive y direction
		
		int north_star = Util_find_intersection(r_c_min,r_c_max);
    20d4:	be 01       	movw	r22, r28
    20d6:	6f 5f       	subi	r22, 0xFF	; 255
    20d8:	7f 4f       	sbci	r23, 0xFF	; 255
    20da:	ce 01       	movw	r24, r28
    20dc:	05 96       	adiw	r24, 0x05	; 5
    20de:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <Util_find_intersection>
    20e2:	8c 01       	movw	r16, r24
		if (m_usb_rx_available()){
    20e4:	0e 94 c5 07 	call	0xf8a	; 0xf8a <m_usb_rx_available>
    20e8:	88 23       	and	r24, r24
    20ea:	21 f0       	breq	.+8      	; 0x20f4 <localize_robot+0x238>
			m_usb_tx_string("\nintersect ");
    20ec:	86 e6       	ldi	r24, 0x66	; 102
    20ee:	92 e0       	ldi	r25, 0x02	; 2
    20f0:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <print_P>
		if (m_usb_rx_available())
		{m_usb_tx_string("\nIntersection: ");
			m_usb_tx_int(north_star);
		}*/
		
		if (isnan(north_star)){
    20f4:	b8 01       	movw	r22, r16
    20f6:	88 27       	eor	r24, r24
    20f8:	77 fd       	sbrc	r23, 7
    20fa:	80 95       	com	r24
    20fc:	98 2f       	mov	r25, r24
    20fe:	0e 94 16 14 	call	0x282c	; 0x282c <__floatsisf>
    2102:	9b 01       	movw	r18, r22
    2104:	ac 01       	movw	r20, r24
    2106:	0e 94 dd 15 	call	0x2bba	; 0x2bba <__unordsf2>
    210a:	88 23       	and	r24, r24
    210c:	61 f0       	breq	.+24     	; 0x2126 <localize_robot+0x26a>
			if (m_usb_rx_available())
    210e:	0e 94 c5 07 	call	0xf8a	; 0xf8a <m_usb_rx_available>
    2112:	88 23       	and	r24, r24
    2114:	21 f0       	breq	.+8      	; 0x211e <localize_robot+0x262>
			{m_usb_tx_string("\nCouldn't find intersection ");
    2116:	89 e4       	ldi	r24, 0x49	; 73
    2118:	92 e0       	ldi	r25, 0x02	; 2
    211a:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <print_P>
			}
			
			return -1;
    211e:	22 24       	eor	r2, r2
    2120:	2a 94       	dec	r2
    2122:	32 2c       	mov	r3, r2
    2124:	f1 c1       	rjmp	.+994    	; 0x2508 <localize_robot+0x64c>
			
		}
		
		int south_star = Util_find_other_star(north_star, r_c_max);
    2126:	be 01       	movw	r22, r28
    2128:	6f 5f       	subi	r22, 0xFF	; 255
    212a:	7f 4f       	sbci	r23, 0xFF	; 255
    212c:	c8 01       	movw	r24, r16
    212e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <Util_find_other_star>
    2132:	7c 01       	movw	r14, r24
			if (m_usb_rx_available()){
    2134:	0e 94 c5 07 	call	0xf8a	; 0xf8a <m_usb_rx_available>
    2138:	88 23       	and	r24, r24
    213a:	21 f0       	breq	.+8      	; 0x2144 <localize_robot+0x288>
					m_usb_tx_string("\nsouth ");
    213c:	81 e4       	ldi	r24, 0x41	; 65
    213e:	92 e0       	ldi	r25, 0x02	; 2
    2140:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <print_P>
			{m_usb_tx_string("\nOther star: ");
				m_usb_tx_int(south_star);
			}*/
		
		
		sample_point_origin = Point_get_midpoint(&sample_points[north_star], &sample_points[south_star]);//check!!!
    2144:	c7 01       	movw	r24, r14
    2146:	88 0f       	add	r24, r24
    2148:	99 1f       	adc	r25, r25
    214a:	88 0f       	add	r24, r24
    214c:	99 1f       	adc	r25, r25
    214e:	88 0f       	add	r24, r24
    2150:	99 1f       	adc	r25, r25
    2152:	9c 01       	movw	r18, r24
    2154:	26 5b       	subi	r18, 0xB6	; 182
    2156:	3e 4f       	sbci	r19, 0xFE	; 254
    2158:	79 01       	movw	r14, r18
    215a:	c8 01       	movw	r24, r16
    215c:	88 0f       	add	r24, r24
    215e:	99 1f       	adc	r25, r25
    2160:	88 0f       	add	r24, r24
    2162:	99 1f       	adc	r25, r25
    2164:	88 0f       	add	r24, r24
    2166:	99 1f       	adc	r25, r25
    2168:	b9 01       	movw	r22, r18
    216a:	86 5b       	subi	r24, 0xB6	; 182
    216c:	9e 4f       	sbci	r25, 0xFE	; 254
    216e:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <Point_get_midpoint>
    2172:	90 93 6b 01 	sts	0x016B, r25
    2176:	80 93 6a 01 	sts	0x016A, r24
				if (m_usb_rx_available()){
    217a:	0e 94 c5 07 	call	0xf8a	; 0xf8a <m_usb_rx_available>
    217e:	88 23       	and	r24, r24
    2180:	21 f0       	breq	.+8      	; 0x218a <localize_robot+0x2ce>
		m_usb_tx_string("\norigin ");
    2182:	88 e3       	ldi	r24, 0x38	; 56
    2184:	92 e0       	ldi	r25, 0x02	; 2
    2186:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <print_P>
				}
		origin_offset = Point_sub(sample_point_origin, camera_origin);
    218a:	60 91 6c 01 	lds	r22, 0x016C
    218e:	70 91 6d 01 	lds	r23, 0x016D
    2192:	80 91 6a 01 	lds	r24, 0x016A
    2196:	90 91 6b 01 	lds	r25, 0x016B
    219a:	0e 94 bc 0c 	call	0x1978	; 0x1978 <Point_sub>
    219e:	90 93 6f 01 	sts	0x016F, r25
    21a2:	80 93 6e 01 	sts	0x016E, r24
				if (m_usb_rx_available()){
    21a6:	0e 94 c5 07 	call	0xf8a	; 0xf8a <m_usb_rx_available>
    21aa:	88 23       	and	r24, r24
    21ac:	21 f0       	breq	.+8      	; 0x21b6 <localize_robot+0x2fa>
		m_usb_tx_string("\noffset ");
    21ae:	8f e2       	ldi	r24, 0x2F	; 47
    21b0:	92 e0       	ldi	r25, 0x02	; 2
    21b2:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <print_P>
				}
		vect_south_star_to_origin = Point_sub(&sample_points[south_star], sample_point_origin);//slope of axis
    21b6:	60 91 6a 01 	lds	r22, 0x016A
    21ba:	70 91 6b 01 	lds	r23, 0x016B
    21be:	c7 01       	movw	r24, r14
    21c0:	0e 94 bc 0c 	call	0x1978	; 0x1978 <Point_sub>
    21c4:	90 93 77 01 	sts	0x0177, r25
    21c8:	80 93 76 01 	sts	0x0176, r24
				if (m_usb_rx_available()){
    21cc:	0e 94 c5 07 	call	0xf8a	; 0xf8a <m_usb_rx_available>
    21d0:	88 23       	and	r24, r24
    21d2:	21 f0       	breq	.+8      	; 0x21dc <localize_robot+0x320>
					m_usb_tx_string("\nvector ");
    21d4:	86 e2       	ldi	r24, 0x26	; 38
    21d6:	92 e0       	ldi	r25, 0x02	; 2
    21d8:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <print_P>
				}
		float theta = atan2f(-Point_get_x(vect_south_star_to_origin), Point_get_y(vect_south_star_to_origin));
    21dc:	80 91 76 01 	lds	r24, 0x0176
    21e0:	90 91 77 01 	lds	r25, 0x0177
    21e4:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <Point_get_y>
    21e8:	6b 01       	movw	r12, r22
    21ea:	7c 01       	movw	r14, r24
    21ec:	80 91 76 01 	lds	r24, 0x0176
    21f0:	90 91 77 01 	lds	r25, 0x0177
    21f4:	0e 94 65 0d 	call	0x1aca	; 0x1aca <Point_get_x>
    21f8:	90 58       	subi	r25, 0x80	; 128
    21fa:	a7 01       	movw	r20, r14
    21fc:	96 01       	movw	r18, r12
    21fe:	0e 94 21 13 	call	0x2642	; 0x2642 <atan2>
    2202:	6b 01       	movw	r12, r22
    2204:	7c 01       	movw	r14, r24
		
		
		
		if (m_usb_rx_available()){m_usb_tx_string("\nTheta x 100: ");
    2206:	0e 94 c5 07 	call	0xf8a	; 0xf8a <m_usb_rx_available>
    220a:	88 23       	and	r24, r24
    220c:	89 f0       	breq	.+34     	; 0x2230 <localize_robot+0x374>
    220e:	87 e1       	ldi	r24, 0x17	; 23
    2210:	92 e0       	ldi	r25, 0x02	; 2
    2212:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <print_P>
			m_usb_tx_int(theta*100);
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	48 ec       	ldi	r20, 0xC8	; 200
    221c:	52 e4       	ldi	r21, 0x42	; 66
    221e:	c7 01       	movw	r24, r14
    2220:	b6 01       	movw	r22, r12
    2222:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
    2226:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__fixsfsi>
    222a:	cb 01       	movw	r24, r22
    222c:	0e 94 0c 0a 	call	0x1418	; 0x1418 <m_usb_tx_int>
		}
		
		double p0x = Point_get_x(origin_offset);
    2230:	80 91 6e 01 	lds	r24, 0x016E
    2234:	90 91 6f 01 	lds	r25, 0x016F
    2238:	0e 94 65 0d 	call	0x1aca	; 0x1aca <Point_get_x>
    223c:	2b 01       	movw	r4, r22
    223e:	3c 01       	movw	r6, r24
				if (m_usb_rx_available()){
    2240:	0e 94 c5 07 	call	0xf8a	; 0xf8a <m_usb_rx_available>
    2244:	88 23       	and	r24, r24
    2246:	21 f0       	breq	.+8      	; 0x2250 <localize_robot+0x394>
		m_usb_tx_string("\nx ");
    2248:	83 e1       	ldi	r24, 0x13	; 19
    224a:	92 e0       	ldi	r25, 0x02	; 2
    224c:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <print_P>
				}
		double p0y = Point_get_y(origin_offset);
    2250:	80 91 6e 01 	lds	r24, 0x016E
    2254:	90 91 6f 01 	lds	r25, 0x016F
    2258:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <Point_get_y>
    225c:	69 87       	std	Y+9, r22	; 0x09
    225e:	7a 87       	std	Y+10, r23	; 0x0a
    2260:	8b 87       	std	Y+11, r24	; 0x0b
    2262:	9c 87       	std	Y+12, r25	; 0x0c
				if (m_usb_rx_available()){
    2264:	0e 94 c5 07 	call	0xf8a	; 0xf8a <m_usb_rx_available>
    2268:	88 23       	and	r24, r24
    226a:	21 f0       	breq	.+8      	; 0x2274 <localize_robot+0x3b8>
		m_usb_tx_string("\ny ");
    226c:	8f e0       	ldi	r24, 0x0F	; 15
    226e:	92 e0       	ldi	r25, 0x02	; 2
    2270:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <print_P>
			m_usb_tx_int(p0x);
		}*/
		
		
		//H_stars_robot
		float sin_theta = sinf(theta);
    2274:	c7 01       	movw	r24, r14
    2276:	b6 01       	movw	r22, r12
    2278:	0e 94 92 15 	call	0x2b24	; 0x2b24 <sin>
    227c:	4b 01       	movw	r8, r22
    227e:	5c 01       	movw	r10, r24
				if (m_usb_rx_available()){
    2280:	0e 94 c5 07 	call	0xf8a	; 0xf8a <m_usb_rx_available>
    2284:	88 23       	and	r24, r24
    2286:	21 f0       	breq	.+8      	; 0x2290 <localize_robot+0x3d4>
		m_usb_tx_string("\nsin th ");
    2288:	86 e0       	ldi	r24, 0x06	; 6
    228a:	92 e0       	ldi	r25, 0x02	; 2
    228c:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <print_P>
				}
		float cos_theta = cosf(theta);
    2290:	c7 01       	movw	r24, r14
    2292:	b6 01       	movw	r22, r12
    2294:	0e 94 78 13 	call	0x26f0	; 0x26f0 <cos>
    2298:	6b 01       	movw	r12, r22
    229a:	7c 01       	movw	r14, r24
				if (m_usb_rx_available()){
    229c:	0e 94 c5 07 	call	0xf8a	; 0xf8a <m_usb_rx_available>
    22a0:	88 23       	and	r24, r24
    22a2:	21 f0       	breq	.+8      	; 0x22ac <localize_robot+0x3f0>
		m_usb_tx_string("\ncos th ");
    22a4:	8d ef       	ldi	r24, 0xFD	; 253
    22a6:	91 e0       	ldi	r25, 0x01	; 1
    22a8:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <print_P>
				}
		Matrix_set(H_stars_robot, 0, 0, cos_theta);  Matrix_set(H_stars_robot, 0, 1, -sin_theta); Matrix_set(H_stars_robot, 0, 2, p0x);
    22ac:	97 01       	movw	r18, r14
    22ae:	86 01       	movw	r16, r12
    22b0:	40 e0       	ldi	r20, 0x00	; 0
    22b2:	50 e0       	ldi	r21, 0x00	; 0
    22b4:	60 e0       	ldi	r22, 0x00	; 0
    22b6:	70 e0       	ldi	r23, 0x00	; 0
    22b8:	80 91 7a 01 	lds	r24, 0x017A
    22bc:	90 91 7b 01 	lds	r25, 0x017B
    22c0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <Matrix_set>
    22c4:	95 01       	movw	r18, r10
    22c6:	84 01       	movw	r16, r8
    22c8:	30 58       	subi	r19, 0x80	; 128
    22ca:	41 e0       	ldi	r20, 0x01	; 1
    22cc:	50 e0       	ldi	r21, 0x00	; 0
    22ce:	60 e0       	ldi	r22, 0x00	; 0
    22d0:	70 e0       	ldi	r23, 0x00	; 0
    22d2:	80 91 7a 01 	lds	r24, 0x017A
    22d6:	90 91 7b 01 	lds	r25, 0x017B
    22da:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <Matrix_set>
    22de:	93 01       	movw	r18, r6
    22e0:	82 01       	movw	r16, r4
    22e2:	42 e0       	ldi	r20, 0x02	; 2
    22e4:	50 e0       	ldi	r21, 0x00	; 0
    22e6:	60 e0       	ldi	r22, 0x00	; 0
    22e8:	70 e0       	ldi	r23, 0x00	; 0
    22ea:	80 91 7a 01 	lds	r24, 0x017A
    22ee:	90 91 7b 01 	lds	r25, 0x017B
    22f2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <Matrix_set>
		Matrix_set(H_stars_robot, 1, 0, sin_theta);  Matrix_set(H_stars_robot, 1, 1, cos_theta);  Matrix_set(H_stars_robot, 1, 2, p0y);
    22f6:	95 01       	movw	r18, r10
    22f8:	84 01       	movw	r16, r8
    22fa:	40 e0       	ldi	r20, 0x00	; 0
    22fc:	50 e0       	ldi	r21, 0x00	; 0
    22fe:	61 e0       	ldi	r22, 0x01	; 1
    2300:	70 e0       	ldi	r23, 0x00	; 0
    2302:	80 91 7a 01 	lds	r24, 0x017A
    2306:	90 91 7b 01 	lds	r25, 0x017B
    230a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <Matrix_set>
    230e:	97 01       	movw	r18, r14
    2310:	86 01       	movw	r16, r12
    2312:	41 e0       	ldi	r20, 0x01	; 1
    2314:	50 e0       	ldi	r21, 0x00	; 0
    2316:	61 e0       	ldi	r22, 0x01	; 1
    2318:	70 e0       	ldi	r23, 0x00	; 0
    231a:	80 91 7a 01 	lds	r24, 0x017A
    231e:	90 91 7b 01 	lds	r25, 0x017B
    2322:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <Matrix_set>
    2326:	09 85       	ldd	r16, Y+9	; 0x09
    2328:	1a 85       	ldd	r17, Y+10	; 0x0a
    232a:	2b 85       	ldd	r18, Y+11	; 0x0b
    232c:	3c 85       	ldd	r19, Y+12	; 0x0c
    232e:	42 e0       	ldi	r20, 0x02	; 2
    2330:	50 e0       	ldi	r21, 0x00	; 0
    2332:	61 e0       	ldi	r22, 0x01	; 1
    2334:	70 e0       	ldi	r23, 0x00	; 0
    2336:	80 91 7a 01 	lds	r24, 0x017A
    233a:	90 91 7b 01 	lds	r25, 0x017B
    233e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <Matrix_set>
		Matrix_set(H_stars_robot, 2, 0, 0);          Matrix_set(H_stars_robot, 2, 1, 0);          Matrix_set(H_stars_robot, 2, 2, 1);
    2342:	00 e0       	ldi	r16, 0x00	; 0
    2344:	10 e0       	ldi	r17, 0x00	; 0
    2346:	98 01       	movw	r18, r16
    2348:	40 e0       	ldi	r20, 0x00	; 0
    234a:	50 e0       	ldi	r21, 0x00	; 0
    234c:	62 e0       	ldi	r22, 0x02	; 2
    234e:	70 e0       	ldi	r23, 0x00	; 0
    2350:	80 91 7a 01 	lds	r24, 0x017A
    2354:	90 91 7b 01 	lds	r25, 0x017B
    2358:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <Matrix_set>
    235c:	00 e0       	ldi	r16, 0x00	; 0
    235e:	10 e0       	ldi	r17, 0x00	; 0
    2360:	98 01       	movw	r18, r16
    2362:	41 e0       	ldi	r20, 0x01	; 1
    2364:	50 e0       	ldi	r21, 0x00	; 0
    2366:	62 e0       	ldi	r22, 0x02	; 2
    2368:	70 e0       	ldi	r23, 0x00	; 0
    236a:	80 91 7a 01 	lds	r24, 0x017A
    236e:	90 91 7b 01 	lds	r25, 0x017B
    2372:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <Matrix_set>
    2376:	00 e0       	ldi	r16, 0x00	; 0
    2378:	10 e0       	ldi	r17, 0x00	; 0
    237a:	20 e8       	ldi	r18, 0x80	; 128
    237c:	3f e3       	ldi	r19, 0x3F	; 63
    237e:	42 e0       	ldi	r20, 0x02	; 2
    2380:	50 e0       	ldi	r21, 0x00	; 0
    2382:	62 e0       	ldi	r22, 0x02	; 2
    2384:	70 e0       	ldi	r23, 0x00	; 0
    2386:	80 91 7a 01 	lds	r24, 0x017A
    238a:	90 91 7b 01 	lds	r25, 0x017B
    238e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <Matrix_set>
				if (m_usb_rx_available()){
    2392:	0e 94 c5 07 	call	0xf8a	; 0xf8a <m_usb_rx_available>
    2396:	88 23       	and	r24, r24
    2398:	21 f0       	breq	.+8      	; 0x23a2 <localize_robot+0x4e6>
					m_usb_tx_string("\nH s r ");
    239a:	85 ef       	ldi	r24, 0xF5	; 245
    239c:	91 e0       	ldi	r25, 0x01	; 1
    239e:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <print_P>
				}
				m_usb_tx_string("\n");
			}
		}*/
		
		Matrix_inverse_3_by_3_H(H_stars_robot, H_robot_stars);
    23a2:	60 91 48 01 	lds	r22, 0x0148
    23a6:	70 91 49 01 	lds	r23, 0x0149
    23aa:	80 91 7a 01 	lds	r24, 0x017A
    23ae:	90 91 7b 01 	lds	r25, 0x017B
    23b2:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <Matrix_inverse_3_by_3_H>
				if (m_usb_rx_available()){
    23b6:	0e 94 c5 07 	call	0xf8a	; 0xf8a <m_usb_rx_available>
    23ba:	88 23       	and	r24, r24
    23bc:	21 f0       	breq	.+8      	; 0x23c6 <localize_robot+0x50a>
		m_usb_tx_string("\ninv ");
    23be:	8f ee       	ldi	r24, 0xEF	; 239
    23c0:	91 e0       	ldi	r25, 0x01	; 1
    23c2:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <print_P>
				}
				m_usb_tx_string("\n");
			}
		}*/
	
		float robo_theta = atan2f(Matrix_get(H_robot_stars,0,1),Matrix_get(H_robot_stars,1,1));//acosf(Matrix_get(H_robot_stars, 0, 0));
    23c6:	41 e0       	ldi	r20, 0x01	; 1
    23c8:	50 e0       	ldi	r21, 0x00	; 0
    23ca:	61 e0       	ldi	r22, 0x01	; 1
    23cc:	70 e0       	ldi	r23, 0x00	; 0
    23ce:	80 91 48 01 	lds	r24, 0x0148
    23d2:	90 91 49 01 	lds	r25, 0x0149
    23d6:	0e 94 48 03 	call	0x690	; 0x690 <Matrix_get>
    23da:	6b 01       	movw	r12, r22
    23dc:	7c 01       	movw	r14, r24
    23de:	41 e0       	ldi	r20, 0x01	; 1
    23e0:	50 e0       	ldi	r21, 0x00	; 0
    23e2:	60 e0       	ldi	r22, 0x00	; 0
    23e4:	70 e0       	ldi	r23, 0x00	; 0
    23e6:	80 91 48 01 	lds	r24, 0x0148
    23ea:	90 91 49 01 	lds	r25, 0x0149
    23ee:	0e 94 48 03 	call	0x690	; 0x690 <Matrix_get>
    23f2:	a7 01       	movw	r20, r14
    23f4:	96 01       	movw	r18, r12
    23f6:	0e 94 21 13 	call	0x2642	; 0x2642 <atan2>
    23fa:	6b 01       	movw	r12, r22
    23fc:	7c 01       	movw	r14, r24
				if (m_usb_rx_available()){
    23fe:	0e 94 c5 07 	call	0xf8a	; 0xf8a <m_usb_rx_available>
    2402:	88 23       	and	r24, r24
    2404:	21 f0       	breq	.+8      	; 0x240e <localize_robot+0x552>
		m_usb_tx_string("\nrobo th ");
    2406:	85 ee       	ldi	r24, 0xE5	; 229
    2408:	91 e0       	ldi	r25, 0x01	; 1
    240a:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <print_P>
				}
		double robo_x = Matrix_get(H_robot_stars, 0, 2);
    240e:	42 e0       	ldi	r20, 0x02	; 2
    2410:	50 e0       	ldi	r21, 0x00	; 0
    2412:	60 e0       	ldi	r22, 0x00	; 0
    2414:	70 e0       	ldi	r23, 0x00	; 0
    2416:	80 91 48 01 	lds	r24, 0x0148
    241a:	90 91 49 01 	lds	r25, 0x0149
    241e:	0e 94 48 03 	call	0x690	; 0x690 <Matrix_get>
    2422:	2b 01       	movw	r4, r22
    2424:	3c 01       	movw	r6, r24
				if (m_usb_rx_available()){
    2426:	0e 94 c5 07 	call	0xf8a	; 0xf8a <m_usb_rx_available>
    242a:	88 23       	and	r24, r24
    242c:	21 f0       	breq	.+8      	; 0x2436 <localize_robot+0x57a>
		m_usb_tx_string("\nrobo x ");
    242e:	8c ed       	ldi	r24, 0xDC	; 220
    2430:	91 e0       	ldi	r25, 0x01	; 1
    2432:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <print_P>
				}
		double robo_y = Matrix_get(H_robot_stars, 1, 2);
    2436:	42 e0       	ldi	r20, 0x02	; 2
    2438:	50 e0       	ldi	r21, 0x00	; 0
    243a:	61 e0       	ldi	r22, 0x01	; 1
    243c:	70 e0       	ldi	r23, 0x00	; 0
    243e:	80 91 48 01 	lds	r24, 0x0148
    2442:	90 91 49 01 	lds	r25, 0x0149
    2446:	0e 94 48 03 	call	0x690	; 0x690 <Matrix_get>
    244a:	4b 01       	movw	r8, r22
    244c:	5c 01       	movw	r10, r24
				if (m_usb_rx_available()){
    244e:	0e 94 c5 07 	call	0xf8a	; 0xf8a <m_usb_rx_available>
    2452:	88 23       	and	r24, r24
    2454:	21 f0       	breq	.+8      	; 0x245e <localize_robot+0x5a2>
					m_usb_tx_string("\nrobo y ");
    2456:	83 ed       	ldi	r24, 0xD3	; 211
    2458:	91 e0       	ldi	r25, 0x01	; 1
    245a:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <print_P>
				}
		
		robo_coordinates[0][0]=robo_x;
    245e:	40 92 20 01 	sts	0x0120, r4
    2462:	50 92 21 01 	sts	0x0121, r5
    2466:	60 92 22 01 	sts	0x0122, r6
    246a:	70 92 23 01 	sts	0x0123, r7
		robo_coordinates[0][1]=robo_y;
    246e:	80 92 24 01 	sts	0x0124, r8
    2472:	90 92 25 01 	sts	0x0125, r9
    2476:	a0 92 26 01 	sts	0x0126, r10
    247a:	b0 92 27 01 	sts	0x0127, r11
		robo_thetas[0]=robo_theta;
    247e:	c0 92 18 01 	sts	0x0118, r12
    2482:	d0 92 19 01 	sts	0x0119, r13
    2486:	e0 92 1a 01 	sts	0x011A, r14
    248a:	f0 92 1b 01 	sts	0x011B, r15
			
		if(m_usb_rx_available()){
    248e:	0e 94 c5 07 	call	0xf8a	; 0xf8a <m_usb_rx_available>
    2492:	88 23       	and	r24, r24
    2494:	81 f1       	breq	.+96     	; 0x24f6 <localize_robot+0x63a>
			m_usb_tx_string("\n100 x R x: ");
    2496:	86 ec       	ldi	r24, 0xC6	; 198
    2498:	91 e0       	ldi	r25, 0x01	; 1
    249a:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <print_P>
			m_usb_tx_long(robo_x*100);
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	48 ec       	ldi	r20, 0xC8	; 200
    24a4:	52 e4       	ldi	r21, 0x42	; 66
    24a6:	c3 01       	movw	r24, r6
    24a8:	b2 01       	movw	r22, r4
    24aa:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
    24ae:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__fixsfsi>
    24b2:	0e 94 40 0a 	call	0x1480	; 0x1480 <m_usb_tx_long>
			
			m_usb_tx_string("\t100 x R y: ");
    24b6:	89 eb       	ldi	r24, 0xB9	; 185
    24b8:	91 e0       	ldi	r25, 0x01	; 1
    24ba:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <print_P>
			m_usb_tx_long(robo_y*100);
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	48 ec       	ldi	r20, 0xC8	; 200
    24c4:	52 e4       	ldi	r21, 0x42	; 66
    24c6:	c5 01       	movw	r24, r10
    24c8:	b4 01       	movw	r22, r8
    24ca:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
    24ce:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__fixsfsi>
    24d2:	0e 94 40 0a 	call	0x1480	; 0x1480 <m_usb_tx_long>
			
			m_usb_tx_string("\t100 x R Th: ");
    24d6:	8b ea       	ldi	r24, 0xAB	; 171
    24d8:	91 e0       	ldi	r25, 0x01	; 1
    24da:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <print_P>
			m_usb_tx_long(robo_theta*100);
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	48 ec       	ldi	r20, 0xC8	; 200
    24e4:	52 e4       	ldi	r21, 0x42	; 66
    24e6:	c7 01       	movw	r24, r14
    24e8:	b6 01       	movw	r22, r12
    24ea:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__mulsf3>
    24ee:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__fixsfsi>
    24f2:	0e 94 40 0a 	call	0x1480	; 0x1480 <m_usb_tx_long>
			}
		}
		
		m_green(TOGGLE);
    24f6:	6a 9a       	sbi	0x0d, 2	; 13
    24f8:	9e b1       	in	r25, 0x0e	; 14
    24fa:	84 e0       	ldi	r24, 0x04	; 4
    24fc:	89 27       	eor	r24, r25
    24fe:	8e b9       	out	0x0e, r24	; 14
		
		return 0;		
    2500:	03 c0       	rjmp	.+6      	; 0x2508 <localize_robot+0x64c>
	if(Util_is_bad_star(sp0)||Util_is_bad_star(sp1)||Util_is_bad_star(sp2)||Util_is_bad_star(sp3)){
		there_are_bad_stars=1;
		if (m_usb_rx_available()){
			m_usb_tx_string("\nIgnoring because there are bad stars ");
		}
		return -1;
    2502:	22 24       	eor	r2, r2
    2504:	2a 94       	dec	r2
    2506:	32 2c       	mov	r3, r2
		}
		
		m_green(TOGGLE);
		
		return 0;		
}	
    2508:	c1 01       	movw	r24, r2
    250a:	2c 96       	adiw	r28, 0x0c	; 12
    250c:	0f b6       	in	r0, 0x3f	; 63
    250e:	f8 94       	cli
    2510:	de bf       	out	0x3e, r29	; 62
    2512:	0f be       	out	0x3f, r0	; 63
    2514:	cd bf       	out	0x3d, r28	; 61
    2516:	df 91       	pop	r29
    2518:	cf 91       	pop	r28
    251a:	1f 91       	pop	r17
    251c:	0f 91       	pop	r16
    251e:	ff 90       	pop	r15
    2520:	ef 90       	pop	r14
    2522:	df 90       	pop	r13
    2524:	cf 90       	pop	r12
    2526:	bf 90       	pop	r11
    2528:	af 90       	pop	r10
    252a:	9f 90       	pop	r9
    252c:	8f 90       	pop	r8
    252e:	7f 90       	pop	r7
    2530:	6f 90       	pop	r6
    2532:	5f 90       	pop	r5
    2534:	4f 90       	pop	r4
    2536:	3f 90       	pop	r3
    2538:	2f 90       	pop	r2
    253a:	08 95       	ret

0000253c <main>:
float calculateLowPassFilter(float, float, float);


int main(void)
{	
	init();
    253c:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <init>
	while(1){
		if(localize_me){
    2540:	80 91 16 01 	lds	r24, 0x0116
    2544:	90 91 17 01 	lds	r25, 0x0117
    2548:	89 2b       	or	r24, r25
    254a:	d1 f3       	breq	.-12     	; 0x2540 <main+0x4>
			
			localize_robot();
    254c:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <localize_robot>
			localize_me=0;
    2550:	10 92 17 01 	sts	0x0117, r1
    2554:	10 92 16 01 	sts	0x0116, r1
    2558:	f3 cf       	rjmp	.-26     	; 0x2540 <main+0x4>

0000255a <__subsf3>:
    255a:	50 58       	subi	r21, 0x80	; 128

0000255c <__addsf3>:
    255c:	bb 27       	eor	r27, r27
    255e:	aa 27       	eor	r26, r26
    2560:	0e d0       	rcall	.+28     	; 0x257e <__addsf3x>
    2562:	27 c2       	rjmp	.+1102   	; 0x29b2 <__fp_round>
    2564:	f0 d1       	rcall	.+992    	; 0x2946 <__fp_pscA>
    2566:	30 f0       	brcs	.+12     	; 0x2574 <__addsf3+0x18>
    2568:	f5 d1       	rcall	.+1002   	; 0x2954 <__fp_pscB>
    256a:	20 f0       	brcs	.+8      	; 0x2574 <__addsf3+0x18>
    256c:	31 f4       	brne	.+12     	; 0x257a <__addsf3+0x1e>
    256e:	9f 3f       	cpi	r25, 0xFF	; 255
    2570:	11 f4       	brne	.+4      	; 0x2576 <__addsf3+0x1a>
    2572:	1e f4       	brtc	.+6      	; 0x257a <__addsf3+0x1e>
    2574:	c0 c1       	rjmp	.+896    	; 0x28f6 <__fp_nan>
    2576:	0e f4       	brtc	.+2      	; 0x257a <__addsf3+0x1e>
    2578:	e0 95       	com	r30
    257a:	e7 fb       	bst	r30, 7
    257c:	b6 c1       	rjmp	.+876    	; 0x28ea <__fp_inf>

0000257e <__addsf3x>:
    257e:	e9 2f       	mov	r30, r25
    2580:	3a d2       	rcall	.+1140   	; 0x29f6 <__fp_split3>
    2582:	80 f3       	brcs	.-32     	; 0x2564 <__addsf3+0x8>
    2584:	ba 17       	cp	r27, r26
    2586:	62 07       	cpc	r22, r18
    2588:	73 07       	cpc	r23, r19
    258a:	84 07       	cpc	r24, r20
    258c:	95 07       	cpc	r25, r21
    258e:	18 f0       	brcs	.+6      	; 0x2596 <__addsf3x+0x18>
    2590:	71 f4       	brne	.+28     	; 0x25ae <__addsf3x+0x30>
    2592:	9e f5       	brtc	.+102    	; 0x25fa <__addsf3x+0x7c>
    2594:	52 c2       	rjmp	.+1188   	; 0x2a3a <__fp_zero>
    2596:	0e f4       	brtc	.+2      	; 0x259a <__addsf3x+0x1c>
    2598:	e0 95       	com	r30
    259a:	0b 2e       	mov	r0, r27
    259c:	ba 2f       	mov	r27, r26
    259e:	a0 2d       	mov	r26, r0
    25a0:	0b 01       	movw	r0, r22
    25a2:	b9 01       	movw	r22, r18
    25a4:	90 01       	movw	r18, r0
    25a6:	0c 01       	movw	r0, r24
    25a8:	ca 01       	movw	r24, r20
    25aa:	a0 01       	movw	r20, r0
    25ac:	11 24       	eor	r1, r1
    25ae:	ff 27       	eor	r31, r31
    25b0:	59 1b       	sub	r21, r25
    25b2:	99 f0       	breq	.+38     	; 0x25da <__addsf3x+0x5c>
    25b4:	59 3f       	cpi	r21, 0xF9	; 249
    25b6:	50 f4       	brcc	.+20     	; 0x25cc <__addsf3x+0x4e>
    25b8:	50 3e       	cpi	r21, 0xE0	; 224
    25ba:	68 f1       	brcs	.+90     	; 0x2616 <__addsf3x+0x98>
    25bc:	1a 16       	cp	r1, r26
    25be:	f0 40       	sbci	r31, 0x00	; 0
    25c0:	a2 2f       	mov	r26, r18
    25c2:	23 2f       	mov	r18, r19
    25c4:	34 2f       	mov	r19, r20
    25c6:	44 27       	eor	r20, r20
    25c8:	58 5f       	subi	r21, 0xF8	; 248
    25ca:	f3 cf       	rjmp	.-26     	; 0x25b2 <__addsf3x+0x34>
    25cc:	46 95       	lsr	r20
    25ce:	37 95       	ror	r19
    25d0:	27 95       	ror	r18
    25d2:	a7 95       	ror	r26
    25d4:	f0 40       	sbci	r31, 0x00	; 0
    25d6:	53 95       	inc	r21
    25d8:	c9 f7       	brne	.-14     	; 0x25cc <__addsf3x+0x4e>
    25da:	7e f4       	brtc	.+30     	; 0x25fa <__addsf3x+0x7c>
    25dc:	1f 16       	cp	r1, r31
    25de:	ba 0b       	sbc	r27, r26
    25e0:	62 0b       	sbc	r22, r18
    25e2:	73 0b       	sbc	r23, r19
    25e4:	84 0b       	sbc	r24, r20
    25e6:	ba f0       	brmi	.+46     	; 0x2616 <__addsf3x+0x98>
    25e8:	91 50       	subi	r25, 0x01	; 1
    25ea:	a1 f0       	breq	.+40     	; 0x2614 <__addsf3x+0x96>
    25ec:	ff 0f       	add	r31, r31
    25ee:	bb 1f       	adc	r27, r27
    25f0:	66 1f       	adc	r22, r22
    25f2:	77 1f       	adc	r23, r23
    25f4:	88 1f       	adc	r24, r24
    25f6:	c2 f7       	brpl	.-16     	; 0x25e8 <__addsf3x+0x6a>
    25f8:	0e c0       	rjmp	.+28     	; 0x2616 <__addsf3x+0x98>
    25fa:	ba 0f       	add	r27, r26
    25fc:	62 1f       	adc	r22, r18
    25fe:	73 1f       	adc	r23, r19
    2600:	84 1f       	adc	r24, r20
    2602:	48 f4       	brcc	.+18     	; 0x2616 <__addsf3x+0x98>
    2604:	87 95       	ror	r24
    2606:	77 95       	ror	r23
    2608:	67 95       	ror	r22
    260a:	b7 95       	ror	r27
    260c:	f7 95       	ror	r31
    260e:	9e 3f       	cpi	r25, 0xFE	; 254
    2610:	08 f0       	brcs	.+2      	; 0x2614 <__addsf3x+0x96>
    2612:	b3 cf       	rjmp	.-154    	; 0x257a <__addsf3+0x1e>
    2614:	93 95       	inc	r25
    2616:	88 0f       	add	r24, r24
    2618:	08 f0       	brcs	.+2      	; 0x261c <__addsf3x+0x9e>
    261a:	99 27       	eor	r25, r25
    261c:	ee 0f       	add	r30, r30
    261e:	97 95       	ror	r25
    2620:	87 95       	ror	r24
    2622:	08 95       	ret
    2624:	90 d1       	rcall	.+800    	; 0x2946 <__fp_pscA>
    2626:	58 f0       	brcs	.+22     	; 0x263e <__addsf3x+0xc0>
    2628:	80 e8       	ldi	r24, 0x80	; 128
    262a:	91 e0       	ldi	r25, 0x01	; 1
    262c:	09 f4       	brne	.+2      	; 0x2630 <__addsf3x+0xb2>
    262e:	9e ef       	ldi	r25, 0xFE	; 254
    2630:	91 d1       	rcall	.+802    	; 0x2954 <__fp_pscB>
    2632:	28 f0       	brcs	.+10     	; 0x263e <__addsf3x+0xc0>
    2634:	40 e8       	ldi	r20, 0x80	; 128
    2636:	51 e0       	ldi	r21, 0x01	; 1
    2638:	59 f4       	brne	.+22     	; 0x2650 <atan2+0xe>
    263a:	5e ef       	ldi	r21, 0xFE	; 254
    263c:	09 c0       	rjmp	.+18     	; 0x2650 <atan2+0xe>
    263e:	5b c1       	rjmp	.+694    	; 0x28f6 <__fp_nan>
    2640:	fc c1       	rjmp	.+1016   	; 0x2a3a <__fp_zero>

00002642 <atan2>:
    2642:	e9 2f       	mov	r30, r25
    2644:	e0 78       	andi	r30, 0x80	; 128
    2646:	d7 d1       	rcall	.+942    	; 0x29f6 <__fp_split3>
    2648:	68 f3       	brcs	.-38     	; 0x2624 <__addsf3x+0xa6>
    264a:	09 2e       	mov	r0, r25
    264c:	05 2a       	or	r0, r21
    264e:	c1 f3       	breq	.-16     	; 0x2640 <__addsf3x+0xc2>
    2650:	26 17       	cp	r18, r22
    2652:	37 07       	cpc	r19, r23
    2654:	48 07       	cpc	r20, r24
    2656:	59 07       	cpc	r21, r25
    2658:	38 f0       	brcs	.+14     	; 0x2668 <atan2+0x26>
    265a:	0e 2e       	mov	r0, r30
    265c:	07 f8       	bld	r0, 7
    265e:	e0 25       	eor	r30, r0
    2660:	69 f0       	breq	.+26     	; 0x267c <atan2+0x3a>
    2662:	e0 25       	eor	r30, r0
    2664:	e0 64       	ori	r30, 0x40	; 64
    2666:	0a c0       	rjmp	.+20     	; 0x267c <atan2+0x3a>
    2668:	ef 63       	ori	r30, 0x3F	; 63
    266a:	07 f8       	bld	r0, 7
    266c:	00 94       	com	r0
    266e:	07 fa       	bst	r0, 7
    2670:	db 01       	movw	r26, r22
    2672:	b9 01       	movw	r22, r18
    2674:	9d 01       	movw	r18, r26
    2676:	dc 01       	movw	r26, r24
    2678:	ca 01       	movw	r24, r20
    267a:	ad 01       	movw	r20, r26
    267c:	ef 93       	push	r30
    267e:	4a d0       	rcall	.+148    	; 0x2714 <__divsf3_pse>
    2680:	98 d1       	rcall	.+816    	; 0x29b2 <__fp_round>
    2682:	0a d0       	rcall	.+20     	; 0x2698 <atan>
    2684:	5f 91       	pop	r21
    2686:	55 23       	and	r21, r21
    2688:	31 f0       	breq	.+12     	; 0x2696 <atan2+0x54>
    268a:	2b ed       	ldi	r18, 0xDB	; 219
    268c:	3f e0       	ldi	r19, 0x0F	; 15
    268e:	49 e4       	ldi	r20, 0x49	; 73
    2690:	50 fd       	sbrc	r21, 0
    2692:	49 ec       	ldi	r20, 0xC9	; 201
    2694:	63 cf       	rjmp	.-314    	; 0x255c <__addsf3>
    2696:	08 95       	ret

00002698 <atan>:
    2698:	df 93       	push	r29
    269a:	dd 27       	eor	r29, r29
    269c:	b9 2f       	mov	r27, r25
    269e:	bf 77       	andi	r27, 0x7F	; 127
    26a0:	40 e8       	ldi	r20, 0x80	; 128
    26a2:	5f e3       	ldi	r21, 0x3F	; 63
    26a4:	16 16       	cp	r1, r22
    26a6:	17 06       	cpc	r1, r23
    26a8:	48 07       	cpc	r20, r24
    26aa:	5b 07       	cpc	r21, r27
    26ac:	10 f4       	brcc	.+4      	; 0x26b2 <atan+0x1a>
    26ae:	d9 2f       	mov	r29, r25
    26b0:	cf d1       	rcall	.+926    	; 0x2a50 <inverse>
    26b2:	9f 93       	push	r25
    26b4:	8f 93       	push	r24
    26b6:	7f 93       	push	r23
    26b8:	6f 93       	push	r22
    26ba:	7c d2       	rcall	.+1272   	; 0x2bb4 <square>
    26bc:	ec ea       	ldi	r30, 0xAC	; 172
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	1d d1       	rcall	.+570    	; 0x28fc <__fp_powser>
    26c2:	77 d1       	rcall	.+750    	; 0x29b2 <__fp_round>
    26c4:	2f 91       	pop	r18
    26c6:	3f 91       	pop	r19
    26c8:	4f 91       	pop	r20
    26ca:	5f 91       	pop	r21
    26cc:	d4 d1       	rcall	.+936    	; 0x2a76 <__mulsf3x>
    26ce:	dd 23       	and	r29, r29
    26d0:	49 f0       	breq	.+18     	; 0x26e4 <atan+0x4c>
    26d2:	90 58       	subi	r25, 0x80	; 128
    26d4:	a2 ea       	ldi	r26, 0xA2	; 162
    26d6:	2a ed       	ldi	r18, 0xDA	; 218
    26d8:	3f e0       	ldi	r19, 0x0F	; 15
    26da:	49 ec       	ldi	r20, 0xC9	; 201
    26dc:	5f e3       	ldi	r21, 0x3F	; 63
    26de:	d0 78       	andi	r29, 0x80	; 128
    26e0:	5d 27       	eor	r21, r29
    26e2:	4d df       	rcall	.-358    	; 0x257e <__addsf3x>
    26e4:	df 91       	pop	r29
    26e6:	65 c1       	rjmp	.+714    	; 0x29b2 <__fp_round>

000026e8 <__cmpsf2>:
    26e8:	dc d0       	rcall	.+440    	; 0x28a2 <__fp_cmp>
    26ea:	08 f4       	brcc	.+2      	; 0x26ee <__cmpsf2+0x6>
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	08 95       	ret

000026f0 <cos>:
    26f0:	39 d1       	rcall	.+626    	; 0x2964 <__fp_rempio2>
    26f2:	e3 95       	inc	r30
    26f4:	6f c1       	rjmp	.+734    	; 0x29d4 <__fp_sinus>

000026f6 <__divsf3>:
    26f6:	0c d0       	rcall	.+24     	; 0x2710 <__divsf3x>
    26f8:	5c c1       	rjmp	.+696    	; 0x29b2 <__fp_round>
    26fa:	2c d1       	rcall	.+600    	; 0x2954 <__fp_pscB>
    26fc:	40 f0       	brcs	.+16     	; 0x270e <__divsf3+0x18>
    26fe:	23 d1       	rcall	.+582    	; 0x2946 <__fp_pscA>
    2700:	30 f0       	brcs	.+12     	; 0x270e <__divsf3+0x18>
    2702:	21 f4       	brne	.+8      	; 0x270c <__divsf3+0x16>
    2704:	5f 3f       	cpi	r21, 0xFF	; 255
    2706:	19 f0       	breq	.+6      	; 0x270e <__divsf3+0x18>
    2708:	f0 c0       	rjmp	.+480    	; 0x28ea <__fp_inf>
    270a:	51 11       	cpse	r21, r1
    270c:	97 c1       	rjmp	.+814    	; 0x2a3c <__fp_szero>
    270e:	f3 c0       	rjmp	.+486    	; 0x28f6 <__fp_nan>

00002710 <__divsf3x>:
    2710:	72 d1       	rcall	.+740    	; 0x29f6 <__fp_split3>
    2712:	98 f3       	brcs	.-26     	; 0x26fa <__divsf3+0x4>

00002714 <__divsf3_pse>:
    2714:	99 23       	and	r25, r25
    2716:	c9 f3       	breq	.-14     	; 0x270a <__divsf3+0x14>
    2718:	55 23       	and	r21, r21
    271a:	b1 f3       	breq	.-20     	; 0x2708 <__divsf3+0x12>
    271c:	95 1b       	sub	r25, r21
    271e:	55 0b       	sbc	r21, r21
    2720:	bb 27       	eor	r27, r27
    2722:	aa 27       	eor	r26, r26
    2724:	62 17       	cp	r22, r18
    2726:	73 07       	cpc	r23, r19
    2728:	84 07       	cpc	r24, r20
    272a:	38 f0       	brcs	.+14     	; 0x273a <__divsf3_pse+0x26>
    272c:	9f 5f       	subi	r25, 0xFF	; 255
    272e:	5f 4f       	sbci	r21, 0xFF	; 255
    2730:	22 0f       	add	r18, r18
    2732:	33 1f       	adc	r19, r19
    2734:	44 1f       	adc	r20, r20
    2736:	aa 1f       	adc	r26, r26
    2738:	a9 f3       	breq	.-22     	; 0x2724 <__divsf3_pse+0x10>
    273a:	33 d0       	rcall	.+102    	; 0x27a2 <__divsf3_pse+0x8e>
    273c:	0e 2e       	mov	r0, r30
    273e:	3a f0       	brmi	.+14     	; 0x274e <__divsf3_pse+0x3a>
    2740:	e0 e8       	ldi	r30, 0x80	; 128
    2742:	30 d0       	rcall	.+96     	; 0x27a4 <__divsf3_pse+0x90>
    2744:	91 50       	subi	r25, 0x01	; 1
    2746:	50 40       	sbci	r21, 0x00	; 0
    2748:	e6 95       	lsr	r30
    274a:	00 1c       	adc	r0, r0
    274c:	ca f7       	brpl	.-14     	; 0x2740 <__divsf3_pse+0x2c>
    274e:	29 d0       	rcall	.+82     	; 0x27a2 <__divsf3_pse+0x8e>
    2750:	fe 2f       	mov	r31, r30
    2752:	27 d0       	rcall	.+78     	; 0x27a2 <__divsf3_pse+0x8e>
    2754:	66 0f       	add	r22, r22
    2756:	77 1f       	adc	r23, r23
    2758:	88 1f       	adc	r24, r24
    275a:	bb 1f       	adc	r27, r27
    275c:	26 17       	cp	r18, r22
    275e:	37 07       	cpc	r19, r23
    2760:	48 07       	cpc	r20, r24
    2762:	ab 07       	cpc	r26, r27
    2764:	b0 e8       	ldi	r27, 0x80	; 128
    2766:	09 f0       	breq	.+2      	; 0x276a <__divsf3_pse+0x56>
    2768:	bb 0b       	sbc	r27, r27
    276a:	80 2d       	mov	r24, r0
    276c:	bf 01       	movw	r22, r30
    276e:	ff 27       	eor	r31, r31
    2770:	93 58       	subi	r25, 0x83	; 131
    2772:	5f 4f       	sbci	r21, 0xFF	; 255
    2774:	2a f0       	brmi	.+10     	; 0x2780 <__divsf3_pse+0x6c>
    2776:	9e 3f       	cpi	r25, 0xFE	; 254
    2778:	51 05       	cpc	r21, r1
    277a:	68 f0       	brcs	.+26     	; 0x2796 <__divsf3_pse+0x82>
    277c:	b6 c0       	rjmp	.+364    	; 0x28ea <__fp_inf>
    277e:	5e c1       	rjmp	.+700    	; 0x2a3c <__fp_szero>
    2780:	5f 3f       	cpi	r21, 0xFF	; 255
    2782:	ec f3       	brlt	.-6      	; 0x277e <__divsf3_pse+0x6a>
    2784:	98 3e       	cpi	r25, 0xE8	; 232
    2786:	dc f3       	brlt	.-10     	; 0x277e <__divsf3_pse+0x6a>
    2788:	86 95       	lsr	r24
    278a:	77 95       	ror	r23
    278c:	67 95       	ror	r22
    278e:	b7 95       	ror	r27
    2790:	f7 95       	ror	r31
    2792:	9f 5f       	subi	r25, 0xFF	; 255
    2794:	c9 f7       	brne	.-14     	; 0x2788 <__divsf3_pse+0x74>
    2796:	88 0f       	add	r24, r24
    2798:	91 1d       	adc	r25, r1
    279a:	96 95       	lsr	r25
    279c:	87 95       	ror	r24
    279e:	97 f9       	bld	r25, 7
    27a0:	08 95       	ret
    27a2:	e1 e0       	ldi	r30, 0x01	; 1
    27a4:	66 0f       	add	r22, r22
    27a6:	77 1f       	adc	r23, r23
    27a8:	88 1f       	adc	r24, r24
    27aa:	bb 1f       	adc	r27, r27
    27ac:	62 17       	cp	r22, r18
    27ae:	73 07       	cpc	r23, r19
    27b0:	84 07       	cpc	r24, r20
    27b2:	ba 07       	cpc	r27, r26
    27b4:	20 f0       	brcs	.+8      	; 0x27be <__divsf3_pse+0xaa>
    27b6:	62 1b       	sub	r22, r18
    27b8:	73 0b       	sbc	r23, r19
    27ba:	84 0b       	sbc	r24, r20
    27bc:	ba 0b       	sbc	r27, r26
    27be:	ee 1f       	adc	r30, r30
    27c0:	88 f7       	brcc	.-30     	; 0x27a4 <__divsf3_pse+0x90>
    27c2:	e0 95       	com	r30
    27c4:	08 95       	ret

000027c6 <__fixsfsi>:
    27c6:	04 d0       	rcall	.+8      	; 0x27d0 <__fixunssfsi>
    27c8:	68 94       	set
    27ca:	b1 11       	cpse	r27, r1
    27cc:	37 c1       	rjmp	.+622    	; 0x2a3c <__fp_szero>
    27ce:	08 95       	ret

000027d0 <__fixunssfsi>:
    27d0:	1a d1       	rcall	.+564    	; 0x2a06 <__fp_splitA>
    27d2:	88 f0       	brcs	.+34     	; 0x27f6 <__fixunssfsi+0x26>
    27d4:	9f 57       	subi	r25, 0x7F	; 127
    27d6:	90 f0       	brcs	.+36     	; 0x27fc <__fixunssfsi+0x2c>
    27d8:	b9 2f       	mov	r27, r25
    27da:	99 27       	eor	r25, r25
    27dc:	b7 51       	subi	r27, 0x17	; 23
    27de:	a0 f0       	brcs	.+40     	; 0x2808 <__fixunssfsi+0x38>
    27e0:	d1 f0       	breq	.+52     	; 0x2816 <__fixunssfsi+0x46>
    27e2:	66 0f       	add	r22, r22
    27e4:	77 1f       	adc	r23, r23
    27e6:	88 1f       	adc	r24, r24
    27e8:	99 1f       	adc	r25, r25
    27ea:	1a f0       	brmi	.+6      	; 0x27f2 <__fixunssfsi+0x22>
    27ec:	ba 95       	dec	r27
    27ee:	c9 f7       	brne	.-14     	; 0x27e2 <__fixunssfsi+0x12>
    27f0:	12 c0       	rjmp	.+36     	; 0x2816 <__fixunssfsi+0x46>
    27f2:	b1 30       	cpi	r27, 0x01	; 1
    27f4:	81 f0       	breq	.+32     	; 0x2816 <__fixunssfsi+0x46>
    27f6:	21 d1       	rcall	.+578    	; 0x2a3a <__fp_zero>
    27f8:	b1 e0       	ldi	r27, 0x01	; 1
    27fa:	08 95       	ret
    27fc:	1e c1       	rjmp	.+572    	; 0x2a3a <__fp_zero>
    27fe:	67 2f       	mov	r22, r23
    2800:	78 2f       	mov	r23, r24
    2802:	88 27       	eor	r24, r24
    2804:	b8 5f       	subi	r27, 0xF8	; 248
    2806:	39 f0       	breq	.+14     	; 0x2816 <__fixunssfsi+0x46>
    2808:	b9 3f       	cpi	r27, 0xF9	; 249
    280a:	cc f3       	brlt	.-14     	; 0x27fe <__fixunssfsi+0x2e>
    280c:	86 95       	lsr	r24
    280e:	77 95       	ror	r23
    2810:	67 95       	ror	r22
    2812:	b3 95       	inc	r27
    2814:	d9 f7       	brne	.-10     	; 0x280c <__fixunssfsi+0x3c>
    2816:	3e f4       	brtc	.+14     	; 0x2826 <__fixunssfsi+0x56>
    2818:	90 95       	com	r25
    281a:	80 95       	com	r24
    281c:	70 95       	com	r23
    281e:	61 95       	neg	r22
    2820:	7f 4f       	sbci	r23, 0xFF	; 255
    2822:	8f 4f       	sbci	r24, 0xFF	; 255
    2824:	9f 4f       	sbci	r25, 0xFF	; 255
    2826:	08 95       	ret

00002828 <__floatunsisf>:
    2828:	e8 94       	clt
    282a:	09 c0       	rjmp	.+18     	; 0x283e <__floatsisf+0x12>

0000282c <__floatsisf>:
    282c:	97 fb       	bst	r25, 7
    282e:	3e f4       	brtc	.+14     	; 0x283e <__floatsisf+0x12>
    2830:	90 95       	com	r25
    2832:	80 95       	com	r24
    2834:	70 95       	com	r23
    2836:	61 95       	neg	r22
    2838:	7f 4f       	sbci	r23, 0xFF	; 255
    283a:	8f 4f       	sbci	r24, 0xFF	; 255
    283c:	9f 4f       	sbci	r25, 0xFF	; 255
    283e:	99 23       	and	r25, r25
    2840:	a9 f0       	breq	.+42     	; 0x286c <__floatsisf+0x40>
    2842:	f9 2f       	mov	r31, r25
    2844:	96 e9       	ldi	r25, 0x96	; 150
    2846:	bb 27       	eor	r27, r27
    2848:	93 95       	inc	r25
    284a:	f6 95       	lsr	r31
    284c:	87 95       	ror	r24
    284e:	77 95       	ror	r23
    2850:	67 95       	ror	r22
    2852:	b7 95       	ror	r27
    2854:	f1 11       	cpse	r31, r1
    2856:	f8 cf       	rjmp	.-16     	; 0x2848 <__floatsisf+0x1c>
    2858:	fa f4       	brpl	.+62     	; 0x2898 <__floatsisf+0x6c>
    285a:	bb 0f       	add	r27, r27
    285c:	11 f4       	brne	.+4      	; 0x2862 <__floatsisf+0x36>
    285e:	60 ff       	sbrs	r22, 0
    2860:	1b c0       	rjmp	.+54     	; 0x2898 <__floatsisf+0x6c>
    2862:	6f 5f       	subi	r22, 0xFF	; 255
    2864:	7f 4f       	sbci	r23, 0xFF	; 255
    2866:	8f 4f       	sbci	r24, 0xFF	; 255
    2868:	9f 4f       	sbci	r25, 0xFF	; 255
    286a:	16 c0       	rjmp	.+44     	; 0x2898 <__floatsisf+0x6c>
    286c:	88 23       	and	r24, r24
    286e:	11 f0       	breq	.+4      	; 0x2874 <__floatsisf+0x48>
    2870:	96 e9       	ldi	r25, 0x96	; 150
    2872:	11 c0       	rjmp	.+34     	; 0x2896 <__floatsisf+0x6a>
    2874:	77 23       	and	r23, r23
    2876:	21 f0       	breq	.+8      	; 0x2880 <__floatsisf+0x54>
    2878:	9e e8       	ldi	r25, 0x8E	; 142
    287a:	87 2f       	mov	r24, r23
    287c:	76 2f       	mov	r23, r22
    287e:	05 c0       	rjmp	.+10     	; 0x288a <__floatsisf+0x5e>
    2880:	66 23       	and	r22, r22
    2882:	71 f0       	breq	.+28     	; 0x28a0 <__floatsisf+0x74>
    2884:	96 e8       	ldi	r25, 0x86	; 134
    2886:	86 2f       	mov	r24, r22
    2888:	70 e0       	ldi	r23, 0x00	; 0
    288a:	60 e0       	ldi	r22, 0x00	; 0
    288c:	2a f0       	brmi	.+10     	; 0x2898 <__floatsisf+0x6c>
    288e:	9a 95       	dec	r25
    2890:	66 0f       	add	r22, r22
    2892:	77 1f       	adc	r23, r23
    2894:	88 1f       	adc	r24, r24
    2896:	da f7       	brpl	.-10     	; 0x288e <__floatsisf+0x62>
    2898:	88 0f       	add	r24, r24
    289a:	96 95       	lsr	r25
    289c:	87 95       	ror	r24
    289e:	97 f9       	bld	r25, 7
    28a0:	08 95       	ret

000028a2 <__fp_cmp>:
    28a2:	99 0f       	add	r25, r25
    28a4:	00 08       	sbc	r0, r0
    28a6:	55 0f       	add	r21, r21
    28a8:	aa 0b       	sbc	r26, r26
    28aa:	e0 e8       	ldi	r30, 0x80	; 128
    28ac:	fe ef       	ldi	r31, 0xFE	; 254
    28ae:	16 16       	cp	r1, r22
    28b0:	17 06       	cpc	r1, r23
    28b2:	e8 07       	cpc	r30, r24
    28b4:	f9 07       	cpc	r31, r25
    28b6:	c0 f0       	brcs	.+48     	; 0x28e8 <__fp_cmp+0x46>
    28b8:	12 16       	cp	r1, r18
    28ba:	13 06       	cpc	r1, r19
    28bc:	e4 07       	cpc	r30, r20
    28be:	f5 07       	cpc	r31, r21
    28c0:	98 f0       	brcs	.+38     	; 0x28e8 <__fp_cmp+0x46>
    28c2:	62 1b       	sub	r22, r18
    28c4:	73 0b       	sbc	r23, r19
    28c6:	84 0b       	sbc	r24, r20
    28c8:	95 0b       	sbc	r25, r21
    28ca:	39 f4       	brne	.+14     	; 0x28da <__fp_cmp+0x38>
    28cc:	0a 26       	eor	r0, r26
    28ce:	61 f0       	breq	.+24     	; 0x28e8 <__fp_cmp+0x46>
    28d0:	23 2b       	or	r18, r19
    28d2:	24 2b       	or	r18, r20
    28d4:	25 2b       	or	r18, r21
    28d6:	21 f4       	brne	.+8      	; 0x28e0 <__fp_cmp+0x3e>
    28d8:	08 95       	ret
    28da:	0a 26       	eor	r0, r26
    28dc:	09 f4       	brne	.+2      	; 0x28e0 <__fp_cmp+0x3e>
    28de:	a1 40       	sbci	r26, 0x01	; 1
    28e0:	a6 95       	lsr	r26
    28e2:	8f ef       	ldi	r24, 0xFF	; 255
    28e4:	81 1d       	adc	r24, r1
    28e6:	81 1d       	adc	r24, r1
    28e8:	08 95       	ret

000028ea <__fp_inf>:
    28ea:	97 f9       	bld	r25, 7
    28ec:	9f 67       	ori	r25, 0x7F	; 127
    28ee:	80 e8       	ldi	r24, 0x80	; 128
    28f0:	70 e0       	ldi	r23, 0x00	; 0
    28f2:	60 e0       	ldi	r22, 0x00	; 0
    28f4:	08 95       	ret

000028f6 <__fp_nan>:
    28f6:	9f ef       	ldi	r25, 0xFF	; 255
    28f8:	80 ec       	ldi	r24, 0xC0	; 192
    28fa:	08 95       	ret

000028fc <__fp_powser>:
    28fc:	df 93       	push	r29
    28fe:	cf 93       	push	r28
    2900:	1f 93       	push	r17
    2902:	0f 93       	push	r16
    2904:	ff 92       	push	r15
    2906:	ef 92       	push	r14
    2908:	df 92       	push	r13
    290a:	7b 01       	movw	r14, r22
    290c:	8c 01       	movw	r16, r24
    290e:	68 94       	set
    2910:	05 c0       	rjmp	.+10     	; 0x291c <__fp_powser+0x20>
    2912:	da 2e       	mov	r13, r26
    2914:	ef 01       	movw	r28, r30
    2916:	af d0       	rcall	.+350    	; 0x2a76 <__mulsf3x>
    2918:	fe 01       	movw	r30, r28
    291a:	e8 94       	clt
    291c:	a5 91       	lpm	r26, Z+
    291e:	25 91       	lpm	r18, Z+
    2920:	35 91       	lpm	r19, Z+
    2922:	45 91       	lpm	r20, Z+
    2924:	55 91       	lpm	r21, Z+
    2926:	ae f3       	brts	.-22     	; 0x2912 <__fp_powser+0x16>
    2928:	ef 01       	movw	r28, r30
    292a:	29 de       	rcall	.-942    	; 0x257e <__addsf3x>
    292c:	fe 01       	movw	r30, r28
    292e:	97 01       	movw	r18, r14
    2930:	a8 01       	movw	r20, r16
    2932:	da 94       	dec	r13
    2934:	79 f7       	brne	.-34     	; 0x2914 <__fp_powser+0x18>
    2936:	df 90       	pop	r13
    2938:	ef 90       	pop	r14
    293a:	ff 90       	pop	r15
    293c:	0f 91       	pop	r16
    293e:	1f 91       	pop	r17
    2940:	cf 91       	pop	r28
    2942:	df 91       	pop	r29
    2944:	08 95       	ret

00002946 <__fp_pscA>:
    2946:	00 24       	eor	r0, r0
    2948:	0a 94       	dec	r0
    294a:	16 16       	cp	r1, r22
    294c:	17 06       	cpc	r1, r23
    294e:	18 06       	cpc	r1, r24
    2950:	09 06       	cpc	r0, r25
    2952:	08 95       	ret

00002954 <__fp_pscB>:
    2954:	00 24       	eor	r0, r0
    2956:	0a 94       	dec	r0
    2958:	12 16       	cp	r1, r18
    295a:	13 06       	cpc	r1, r19
    295c:	14 06       	cpc	r1, r20
    295e:	05 06       	cpc	r0, r21
    2960:	08 95       	ret
    2962:	c9 cf       	rjmp	.-110    	; 0x28f6 <__fp_nan>

00002964 <__fp_rempio2>:
    2964:	50 d0       	rcall	.+160    	; 0x2a06 <__fp_splitA>
    2966:	e8 f3       	brcs	.-6      	; 0x2962 <__fp_pscB+0xe>
    2968:	e8 94       	clt
    296a:	e0 e0       	ldi	r30, 0x00	; 0
    296c:	bb 27       	eor	r27, r27
    296e:	9f 57       	subi	r25, 0x7F	; 127
    2970:	f0 f0       	brcs	.+60     	; 0x29ae <__fp_rempio2+0x4a>
    2972:	2a ed       	ldi	r18, 0xDA	; 218
    2974:	3f e0       	ldi	r19, 0x0F	; 15
    2976:	49 ec       	ldi	r20, 0xC9	; 201
    2978:	06 c0       	rjmp	.+12     	; 0x2986 <__fp_rempio2+0x22>
    297a:	ee 0f       	add	r30, r30
    297c:	bb 0f       	add	r27, r27
    297e:	66 1f       	adc	r22, r22
    2980:	77 1f       	adc	r23, r23
    2982:	88 1f       	adc	r24, r24
    2984:	28 f0       	brcs	.+10     	; 0x2990 <__fp_rempio2+0x2c>
    2986:	b2 3a       	cpi	r27, 0xA2	; 162
    2988:	62 07       	cpc	r22, r18
    298a:	73 07       	cpc	r23, r19
    298c:	84 07       	cpc	r24, r20
    298e:	28 f0       	brcs	.+10     	; 0x299a <__fp_rempio2+0x36>
    2990:	b2 5a       	subi	r27, 0xA2	; 162
    2992:	62 0b       	sbc	r22, r18
    2994:	73 0b       	sbc	r23, r19
    2996:	84 0b       	sbc	r24, r20
    2998:	e3 95       	inc	r30
    299a:	9a 95       	dec	r25
    299c:	72 f7       	brpl	.-36     	; 0x297a <__fp_rempio2+0x16>
    299e:	80 38       	cpi	r24, 0x80	; 128
    29a0:	30 f4       	brcc	.+12     	; 0x29ae <__fp_rempio2+0x4a>
    29a2:	9a 95       	dec	r25
    29a4:	bb 0f       	add	r27, r27
    29a6:	66 1f       	adc	r22, r22
    29a8:	77 1f       	adc	r23, r23
    29aa:	88 1f       	adc	r24, r24
    29ac:	d2 f7       	brpl	.-12     	; 0x29a2 <__fp_rempio2+0x3e>
    29ae:	90 48       	sbci	r25, 0x80	; 128
    29b0:	0a c1       	rjmp	.+532    	; 0x2bc6 <__fp_mpack_finite>

000029b2 <__fp_round>:
    29b2:	09 2e       	mov	r0, r25
    29b4:	03 94       	inc	r0
    29b6:	00 0c       	add	r0, r0
    29b8:	11 f4       	brne	.+4      	; 0x29be <__fp_round+0xc>
    29ba:	88 23       	and	r24, r24
    29bc:	52 f0       	brmi	.+20     	; 0x29d2 <__fp_round+0x20>
    29be:	bb 0f       	add	r27, r27
    29c0:	40 f4       	brcc	.+16     	; 0x29d2 <__fp_round+0x20>
    29c2:	bf 2b       	or	r27, r31
    29c4:	11 f4       	brne	.+4      	; 0x29ca <__fp_round+0x18>
    29c6:	60 ff       	sbrs	r22, 0
    29c8:	04 c0       	rjmp	.+8      	; 0x29d2 <__fp_round+0x20>
    29ca:	6f 5f       	subi	r22, 0xFF	; 255
    29cc:	7f 4f       	sbci	r23, 0xFF	; 255
    29ce:	8f 4f       	sbci	r24, 0xFF	; 255
    29d0:	9f 4f       	sbci	r25, 0xFF	; 255
    29d2:	08 95       	ret

000029d4 <__fp_sinus>:
    29d4:	ef 93       	push	r30
    29d6:	e0 ff       	sbrs	r30, 0
    29d8:	06 c0       	rjmp	.+12     	; 0x29e6 <__fp_sinus+0x12>
    29da:	a2 ea       	ldi	r26, 0xA2	; 162
    29dc:	2a ed       	ldi	r18, 0xDA	; 218
    29de:	3f e0       	ldi	r19, 0x0F	; 15
    29e0:	49 ec       	ldi	r20, 0xC9	; 201
    29e2:	5f eb       	ldi	r21, 0xBF	; 191
    29e4:	cc dd       	rcall	.-1128   	; 0x257e <__addsf3x>
    29e6:	e5 df       	rcall	.-54     	; 0x29b2 <__fp_round>
    29e8:	0f 90       	pop	r0
    29ea:	03 94       	inc	r0
    29ec:	01 fc       	sbrc	r0, 1
    29ee:	90 58       	subi	r25, 0x80	; 128
    29f0:	e9 ed       	ldi	r30, 0xD9	; 217
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	fb c0       	rjmp	.+502    	; 0x2bec <__fp_powsodd>

000029f6 <__fp_split3>:
    29f6:	57 fd       	sbrc	r21, 7
    29f8:	90 58       	subi	r25, 0x80	; 128
    29fa:	44 0f       	add	r20, r20
    29fc:	55 1f       	adc	r21, r21
    29fe:	59 f0       	breq	.+22     	; 0x2a16 <__fp_splitA+0x10>
    2a00:	5f 3f       	cpi	r21, 0xFF	; 255
    2a02:	71 f0       	breq	.+28     	; 0x2a20 <__fp_splitA+0x1a>
    2a04:	47 95       	ror	r20

00002a06 <__fp_splitA>:
    2a06:	88 0f       	add	r24, r24
    2a08:	97 fb       	bst	r25, 7
    2a0a:	99 1f       	adc	r25, r25
    2a0c:	61 f0       	breq	.+24     	; 0x2a26 <__fp_splitA+0x20>
    2a0e:	9f 3f       	cpi	r25, 0xFF	; 255
    2a10:	79 f0       	breq	.+30     	; 0x2a30 <__fp_splitA+0x2a>
    2a12:	87 95       	ror	r24
    2a14:	08 95       	ret
    2a16:	12 16       	cp	r1, r18
    2a18:	13 06       	cpc	r1, r19
    2a1a:	14 06       	cpc	r1, r20
    2a1c:	55 1f       	adc	r21, r21
    2a1e:	f2 cf       	rjmp	.-28     	; 0x2a04 <__fp_split3+0xe>
    2a20:	46 95       	lsr	r20
    2a22:	f1 df       	rcall	.-30     	; 0x2a06 <__fp_splitA>
    2a24:	08 c0       	rjmp	.+16     	; 0x2a36 <__fp_splitA+0x30>
    2a26:	16 16       	cp	r1, r22
    2a28:	17 06       	cpc	r1, r23
    2a2a:	18 06       	cpc	r1, r24
    2a2c:	99 1f       	adc	r25, r25
    2a2e:	f1 cf       	rjmp	.-30     	; 0x2a12 <__fp_splitA+0xc>
    2a30:	86 95       	lsr	r24
    2a32:	71 05       	cpc	r23, r1
    2a34:	61 05       	cpc	r22, r1
    2a36:	08 94       	sec
    2a38:	08 95       	ret

00002a3a <__fp_zero>:
    2a3a:	e8 94       	clt

00002a3c <__fp_szero>:
    2a3c:	bb 27       	eor	r27, r27
    2a3e:	66 27       	eor	r22, r22
    2a40:	77 27       	eor	r23, r23
    2a42:	cb 01       	movw	r24, r22
    2a44:	97 f9       	bld	r25, 7
    2a46:	08 95       	ret

00002a48 <__gesf2>:
    2a48:	2c df       	rcall	.-424    	; 0x28a2 <__fp_cmp>
    2a4a:	08 f4       	brcc	.+2      	; 0x2a4e <__gesf2+0x6>
    2a4c:	8f ef       	ldi	r24, 0xFF	; 255
    2a4e:	08 95       	ret

00002a50 <inverse>:
    2a50:	9b 01       	movw	r18, r22
    2a52:	ac 01       	movw	r20, r24
    2a54:	60 e0       	ldi	r22, 0x00	; 0
    2a56:	70 e0       	ldi	r23, 0x00	; 0
    2a58:	80 e8       	ldi	r24, 0x80	; 128
    2a5a:	9f e3       	ldi	r25, 0x3F	; 63
    2a5c:	4c ce       	rjmp	.-872    	; 0x26f6 <__divsf3>

00002a5e <__mulsf3>:
    2a5e:	0b d0       	rcall	.+22     	; 0x2a76 <__mulsf3x>
    2a60:	a8 cf       	rjmp	.-176    	; 0x29b2 <__fp_round>
    2a62:	71 df       	rcall	.-286    	; 0x2946 <__fp_pscA>
    2a64:	28 f0       	brcs	.+10     	; 0x2a70 <__mulsf3+0x12>
    2a66:	76 df       	rcall	.-276    	; 0x2954 <__fp_pscB>
    2a68:	18 f0       	brcs	.+6      	; 0x2a70 <__mulsf3+0x12>
    2a6a:	95 23       	and	r25, r21
    2a6c:	09 f0       	breq	.+2      	; 0x2a70 <__mulsf3+0x12>
    2a6e:	3d cf       	rjmp	.-390    	; 0x28ea <__fp_inf>
    2a70:	42 cf       	rjmp	.-380    	; 0x28f6 <__fp_nan>
    2a72:	11 24       	eor	r1, r1
    2a74:	e3 cf       	rjmp	.-58     	; 0x2a3c <__fp_szero>

00002a76 <__mulsf3x>:
    2a76:	bf df       	rcall	.-130    	; 0x29f6 <__fp_split3>
    2a78:	a0 f3       	brcs	.-24     	; 0x2a62 <__mulsf3+0x4>

00002a7a <__mulsf3_pse>:
    2a7a:	95 9f       	mul	r25, r21
    2a7c:	d1 f3       	breq	.-12     	; 0x2a72 <__mulsf3+0x14>
    2a7e:	95 0f       	add	r25, r21
    2a80:	50 e0       	ldi	r21, 0x00	; 0
    2a82:	55 1f       	adc	r21, r21
    2a84:	62 9f       	mul	r22, r18
    2a86:	f0 01       	movw	r30, r0
    2a88:	72 9f       	mul	r23, r18
    2a8a:	bb 27       	eor	r27, r27
    2a8c:	f0 0d       	add	r31, r0
    2a8e:	b1 1d       	adc	r27, r1
    2a90:	63 9f       	mul	r22, r19
    2a92:	aa 27       	eor	r26, r26
    2a94:	f0 0d       	add	r31, r0
    2a96:	b1 1d       	adc	r27, r1
    2a98:	aa 1f       	adc	r26, r26
    2a9a:	64 9f       	mul	r22, r20
    2a9c:	66 27       	eor	r22, r22
    2a9e:	b0 0d       	add	r27, r0
    2aa0:	a1 1d       	adc	r26, r1
    2aa2:	66 1f       	adc	r22, r22
    2aa4:	82 9f       	mul	r24, r18
    2aa6:	22 27       	eor	r18, r18
    2aa8:	b0 0d       	add	r27, r0
    2aaa:	a1 1d       	adc	r26, r1
    2aac:	62 1f       	adc	r22, r18
    2aae:	73 9f       	mul	r23, r19
    2ab0:	b0 0d       	add	r27, r0
    2ab2:	a1 1d       	adc	r26, r1
    2ab4:	62 1f       	adc	r22, r18
    2ab6:	83 9f       	mul	r24, r19
    2ab8:	a0 0d       	add	r26, r0
    2aba:	61 1d       	adc	r22, r1
    2abc:	22 1f       	adc	r18, r18
    2abe:	74 9f       	mul	r23, r20
    2ac0:	33 27       	eor	r19, r19
    2ac2:	a0 0d       	add	r26, r0
    2ac4:	61 1d       	adc	r22, r1
    2ac6:	23 1f       	adc	r18, r19
    2ac8:	84 9f       	mul	r24, r20
    2aca:	60 0d       	add	r22, r0
    2acc:	21 1d       	adc	r18, r1
    2ace:	82 2f       	mov	r24, r18
    2ad0:	76 2f       	mov	r23, r22
    2ad2:	6a 2f       	mov	r22, r26
    2ad4:	11 24       	eor	r1, r1
    2ad6:	9f 57       	subi	r25, 0x7F	; 127
    2ad8:	50 40       	sbci	r21, 0x00	; 0
    2ada:	8a f0       	brmi	.+34     	; 0x2afe <__mulsf3_pse+0x84>
    2adc:	e1 f0       	breq	.+56     	; 0x2b16 <__mulsf3_pse+0x9c>
    2ade:	88 23       	and	r24, r24
    2ae0:	4a f0       	brmi	.+18     	; 0x2af4 <__mulsf3_pse+0x7a>
    2ae2:	ee 0f       	add	r30, r30
    2ae4:	ff 1f       	adc	r31, r31
    2ae6:	bb 1f       	adc	r27, r27
    2ae8:	66 1f       	adc	r22, r22
    2aea:	77 1f       	adc	r23, r23
    2aec:	88 1f       	adc	r24, r24
    2aee:	91 50       	subi	r25, 0x01	; 1
    2af0:	50 40       	sbci	r21, 0x00	; 0
    2af2:	a9 f7       	brne	.-22     	; 0x2ade <__mulsf3_pse+0x64>
    2af4:	9e 3f       	cpi	r25, 0xFE	; 254
    2af6:	51 05       	cpc	r21, r1
    2af8:	70 f0       	brcs	.+28     	; 0x2b16 <__mulsf3_pse+0x9c>
    2afa:	f7 ce       	rjmp	.-530    	; 0x28ea <__fp_inf>
    2afc:	9f cf       	rjmp	.-194    	; 0x2a3c <__fp_szero>
    2afe:	5f 3f       	cpi	r21, 0xFF	; 255
    2b00:	ec f3       	brlt	.-6      	; 0x2afc <__mulsf3_pse+0x82>
    2b02:	98 3e       	cpi	r25, 0xE8	; 232
    2b04:	dc f3       	brlt	.-10     	; 0x2afc <__mulsf3_pse+0x82>
    2b06:	86 95       	lsr	r24
    2b08:	77 95       	ror	r23
    2b0a:	67 95       	ror	r22
    2b0c:	b7 95       	ror	r27
    2b0e:	f7 95       	ror	r31
    2b10:	e7 95       	ror	r30
    2b12:	9f 5f       	subi	r25, 0xFF	; 255
    2b14:	c1 f7       	brne	.-16     	; 0x2b06 <__mulsf3_pse+0x8c>
    2b16:	fe 2b       	or	r31, r30
    2b18:	88 0f       	add	r24, r24
    2b1a:	91 1d       	adc	r25, r1
    2b1c:	96 95       	lsr	r25
    2b1e:	87 95       	ror	r24
    2b20:	97 f9       	bld	r25, 7
    2b22:	08 95       	ret

00002b24 <sin>:
    2b24:	9f 93       	push	r25
    2b26:	1e df       	rcall	.-452    	; 0x2964 <__fp_rempio2>
    2b28:	0f 90       	pop	r0
    2b2a:	07 fc       	sbrc	r0, 7
    2b2c:	ee 5f       	subi	r30, 0xFE	; 254
    2b2e:	52 cf       	rjmp	.-348    	; 0x29d4 <__fp_sinus>
    2b30:	11 f4       	brne	.+4      	; 0x2b36 <sin+0x12>
    2b32:	0e f4       	brtc	.+2      	; 0x2b36 <sin+0x12>
    2b34:	e0 ce       	rjmp	.-576    	; 0x28f6 <__fp_nan>
    2b36:	45 c0       	rjmp	.+138    	; 0x2bc2 <__fp_mpack>

00002b38 <sqrt>:
    2b38:	66 df       	rcall	.-308    	; 0x2a06 <__fp_splitA>
    2b3a:	d0 f3       	brcs	.-12     	; 0x2b30 <sin+0xc>
    2b3c:	99 23       	and	r25, r25
    2b3e:	d9 f3       	breq	.-10     	; 0x2b36 <sin+0x12>
    2b40:	ce f3       	brts	.-14     	; 0x2b34 <sin+0x10>
    2b42:	9f 57       	subi	r25, 0x7F	; 127
    2b44:	55 0b       	sbc	r21, r21
    2b46:	87 ff       	sbrs	r24, 7
    2b48:	4a d0       	rcall	.+148    	; 0x2bde <__fp_norm2>
    2b4a:	00 24       	eor	r0, r0
    2b4c:	a0 e6       	ldi	r26, 0x60	; 96
    2b4e:	40 ea       	ldi	r20, 0xA0	; 160
    2b50:	90 01       	movw	r18, r0
    2b52:	80 58       	subi	r24, 0x80	; 128
    2b54:	56 95       	lsr	r21
    2b56:	97 95       	ror	r25
    2b58:	28 f4       	brcc	.+10     	; 0x2b64 <sqrt+0x2c>
    2b5a:	80 5c       	subi	r24, 0xC0	; 192
    2b5c:	66 0f       	add	r22, r22
    2b5e:	77 1f       	adc	r23, r23
    2b60:	88 1f       	adc	r24, r24
    2b62:	20 f0       	brcs	.+8      	; 0x2b6c <sqrt+0x34>
    2b64:	26 17       	cp	r18, r22
    2b66:	37 07       	cpc	r19, r23
    2b68:	48 07       	cpc	r20, r24
    2b6a:	30 f4       	brcc	.+12     	; 0x2b78 <sqrt+0x40>
    2b6c:	62 1b       	sub	r22, r18
    2b6e:	73 0b       	sbc	r23, r19
    2b70:	84 0b       	sbc	r24, r20
    2b72:	20 29       	or	r18, r0
    2b74:	31 29       	or	r19, r1
    2b76:	4a 2b       	or	r20, r26
    2b78:	a6 95       	lsr	r26
    2b7a:	17 94       	ror	r1
    2b7c:	07 94       	ror	r0
    2b7e:	20 25       	eor	r18, r0
    2b80:	31 25       	eor	r19, r1
    2b82:	4a 27       	eor	r20, r26
    2b84:	58 f7       	brcc	.-42     	; 0x2b5c <sqrt+0x24>
    2b86:	66 0f       	add	r22, r22
    2b88:	77 1f       	adc	r23, r23
    2b8a:	88 1f       	adc	r24, r24
    2b8c:	20 f0       	brcs	.+8      	; 0x2b96 <sqrt+0x5e>
    2b8e:	26 17       	cp	r18, r22
    2b90:	37 07       	cpc	r19, r23
    2b92:	48 07       	cpc	r20, r24
    2b94:	30 f4       	brcc	.+12     	; 0x2ba2 <sqrt+0x6a>
    2b96:	62 0b       	sbc	r22, r18
    2b98:	73 0b       	sbc	r23, r19
    2b9a:	84 0b       	sbc	r24, r20
    2b9c:	20 0d       	add	r18, r0
    2b9e:	31 1d       	adc	r19, r1
    2ba0:	41 1d       	adc	r20, r1
    2ba2:	a0 95       	com	r26
    2ba4:	81 f7       	brne	.-32     	; 0x2b86 <sqrt+0x4e>
    2ba6:	b9 01       	movw	r22, r18
    2ba8:	84 2f       	mov	r24, r20
    2baa:	91 58       	subi	r25, 0x81	; 129
    2bac:	88 0f       	add	r24, r24
    2bae:	96 95       	lsr	r25
    2bb0:	87 95       	ror	r24
    2bb2:	08 95       	ret

00002bb4 <square>:
    2bb4:	9b 01       	movw	r18, r22
    2bb6:	ac 01       	movw	r20, r24
    2bb8:	52 cf       	rjmp	.-348    	; 0x2a5e <__mulsf3>

00002bba <__unordsf2>:
    2bba:	73 de       	rcall	.-794    	; 0x28a2 <__fp_cmp>
    2bbc:	88 0b       	sbc	r24, r24
    2bbe:	99 0b       	sbc	r25, r25
    2bc0:	08 95       	ret

00002bc2 <__fp_mpack>:
    2bc2:	9f 3f       	cpi	r25, 0xFF	; 255
    2bc4:	31 f0       	breq	.+12     	; 0x2bd2 <__fp_mpack_finite+0xc>

00002bc6 <__fp_mpack_finite>:
    2bc6:	91 50       	subi	r25, 0x01	; 1
    2bc8:	20 f4       	brcc	.+8      	; 0x2bd2 <__fp_mpack_finite+0xc>
    2bca:	87 95       	ror	r24
    2bcc:	77 95       	ror	r23
    2bce:	67 95       	ror	r22
    2bd0:	b7 95       	ror	r27
    2bd2:	88 0f       	add	r24, r24
    2bd4:	91 1d       	adc	r25, r1
    2bd6:	96 95       	lsr	r25
    2bd8:	87 95       	ror	r24
    2bda:	97 f9       	bld	r25, 7
    2bdc:	08 95       	ret

00002bde <__fp_norm2>:
    2bde:	91 50       	subi	r25, 0x01	; 1
    2be0:	50 40       	sbci	r21, 0x00	; 0
    2be2:	66 0f       	add	r22, r22
    2be4:	77 1f       	adc	r23, r23
    2be6:	88 1f       	adc	r24, r24
    2be8:	d2 f7       	brpl	.-12     	; 0x2bde <__fp_norm2>
    2bea:	08 95       	ret

00002bec <__fp_powsodd>:
    2bec:	9f 93       	push	r25
    2bee:	8f 93       	push	r24
    2bf0:	7f 93       	push	r23
    2bf2:	6f 93       	push	r22
    2bf4:	ff 93       	push	r31
    2bf6:	ef 93       	push	r30
    2bf8:	9b 01       	movw	r18, r22
    2bfa:	ac 01       	movw	r20, r24
    2bfc:	30 df       	rcall	.-416    	; 0x2a5e <__mulsf3>
    2bfe:	ef 91       	pop	r30
    2c00:	ff 91       	pop	r31
    2c02:	7c de       	rcall	.-776    	; 0x28fc <__fp_powser>
    2c04:	2f 91       	pop	r18
    2c06:	3f 91       	pop	r19
    2c08:	4f 91       	pop	r20
    2c0a:	5f 91       	pop	r21
    2c0c:	28 cf       	rjmp	.-432    	; 0x2a5e <__mulsf3>

00002c0e <malloc>:
    2c0e:	cf 93       	push	r28
    2c10:	df 93       	push	r29
    2c12:	82 30       	cpi	r24, 0x02	; 2
    2c14:	91 05       	cpc	r25, r1
    2c16:	10 f4       	brcc	.+4      	; 0x2c1c <malloc+0xe>
    2c18:	82 e0       	ldi	r24, 0x02	; 2
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	e0 91 80 01 	lds	r30, 0x0180
    2c20:	f0 91 81 01 	lds	r31, 0x0181
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	a0 e0       	ldi	r26, 0x00	; 0
    2c2a:	b0 e0       	ldi	r27, 0x00	; 0
    2c2c:	30 97       	sbiw	r30, 0x00	; 0
    2c2e:	39 f1       	breq	.+78     	; 0x2c7e <malloc+0x70>
    2c30:	40 81       	ld	r20, Z
    2c32:	51 81       	ldd	r21, Z+1	; 0x01
    2c34:	48 17       	cp	r20, r24
    2c36:	59 07       	cpc	r21, r25
    2c38:	b8 f0       	brcs	.+46     	; 0x2c68 <malloc+0x5a>
    2c3a:	48 17       	cp	r20, r24
    2c3c:	59 07       	cpc	r21, r25
    2c3e:	71 f4       	brne	.+28     	; 0x2c5c <malloc+0x4e>
    2c40:	82 81       	ldd	r24, Z+2	; 0x02
    2c42:	93 81       	ldd	r25, Z+3	; 0x03
    2c44:	10 97       	sbiw	r26, 0x00	; 0
    2c46:	29 f0       	breq	.+10     	; 0x2c52 <malloc+0x44>
    2c48:	13 96       	adiw	r26, 0x03	; 3
    2c4a:	9c 93       	st	X, r25
    2c4c:	8e 93       	st	-X, r24
    2c4e:	12 97       	sbiw	r26, 0x02	; 2
    2c50:	2c c0       	rjmp	.+88     	; 0x2caa <malloc+0x9c>
    2c52:	90 93 81 01 	sts	0x0181, r25
    2c56:	80 93 80 01 	sts	0x0180, r24
    2c5a:	27 c0       	rjmp	.+78     	; 0x2caa <malloc+0x9c>
    2c5c:	21 15       	cp	r18, r1
    2c5e:	31 05       	cpc	r19, r1
    2c60:	31 f0       	breq	.+12     	; 0x2c6e <malloc+0x60>
    2c62:	42 17       	cp	r20, r18
    2c64:	53 07       	cpc	r21, r19
    2c66:	18 f0       	brcs	.+6      	; 0x2c6e <malloc+0x60>
    2c68:	a9 01       	movw	r20, r18
    2c6a:	db 01       	movw	r26, r22
    2c6c:	01 c0       	rjmp	.+2      	; 0x2c70 <malloc+0x62>
    2c6e:	ef 01       	movw	r28, r30
    2c70:	9a 01       	movw	r18, r20
    2c72:	bd 01       	movw	r22, r26
    2c74:	df 01       	movw	r26, r30
    2c76:	02 80       	ldd	r0, Z+2	; 0x02
    2c78:	f3 81       	ldd	r31, Z+3	; 0x03
    2c7a:	e0 2d       	mov	r30, r0
    2c7c:	d7 cf       	rjmp	.-82     	; 0x2c2c <malloc+0x1e>
    2c7e:	21 15       	cp	r18, r1
    2c80:	31 05       	cpc	r19, r1
    2c82:	f9 f0       	breq	.+62     	; 0x2cc2 <malloc+0xb4>
    2c84:	28 1b       	sub	r18, r24
    2c86:	39 0b       	sbc	r19, r25
    2c88:	24 30       	cpi	r18, 0x04	; 4
    2c8a:	31 05       	cpc	r19, r1
    2c8c:	80 f4       	brcc	.+32     	; 0x2cae <malloc+0xa0>
    2c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c90:	9b 81       	ldd	r25, Y+3	; 0x03
    2c92:	61 15       	cp	r22, r1
    2c94:	71 05       	cpc	r23, r1
    2c96:	21 f0       	breq	.+8      	; 0x2ca0 <malloc+0x92>
    2c98:	fb 01       	movw	r30, r22
    2c9a:	93 83       	std	Z+3, r25	; 0x03
    2c9c:	82 83       	std	Z+2, r24	; 0x02
    2c9e:	04 c0       	rjmp	.+8      	; 0x2ca8 <malloc+0x9a>
    2ca0:	90 93 81 01 	sts	0x0181, r25
    2ca4:	80 93 80 01 	sts	0x0180, r24
    2ca8:	fe 01       	movw	r30, r28
    2caa:	32 96       	adiw	r30, 0x02	; 2
    2cac:	44 c0       	rjmp	.+136    	; 0x2d36 <malloc+0x128>
    2cae:	fe 01       	movw	r30, r28
    2cb0:	e2 0f       	add	r30, r18
    2cb2:	f3 1f       	adc	r31, r19
    2cb4:	81 93       	st	Z+, r24
    2cb6:	91 93       	st	Z+, r25
    2cb8:	22 50       	subi	r18, 0x02	; 2
    2cba:	31 09       	sbc	r19, r1
    2cbc:	39 83       	std	Y+1, r19	; 0x01
    2cbe:	28 83       	st	Y, r18
    2cc0:	3a c0       	rjmp	.+116    	; 0x2d36 <malloc+0x128>
    2cc2:	20 91 7e 01 	lds	r18, 0x017E
    2cc6:	30 91 7f 01 	lds	r19, 0x017F
    2cca:	23 2b       	or	r18, r19
    2ccc:	41 f4       	brne	.+16     	; 0x2cde <malloc+0xd0>
    2cce:	20 91 02 01 	lds	r18, 0x0102
    2cd2:	30 91 03 01 	lds	r19, 0x0103
    2cd6:	30 93 7f 01 	sts	0x017F, r19
    2cda:	20 93 7e 01 	sts	0x017E, r18
    2cde:	20 91 00 01 	lds	r18, 0x0100
    2ce2:	30 91 01 01 	lds	r19, 0x0101
    2ce6:	21 15       	cp	r18, r1
    2ce8:	31 05       	cpc	r19, r1
    2cea:	41 f4       	brne	.+16     	; 0x2cfc <malloc+0xee>
    2cec:	2d b7       	in	r18, 0x3d	; 61
    2cee:	3e b7       	in	r19, 0x3e	; 62
    2cf0:	40 91 04 01 	lds	r20, 0x0104
    2cf4:	50 91 05 01 	lds	r21, 0x0105
    2cf8:	24 1b       	sub	r18, r20
    2cfa:	35 0b       	sbc	r19, r21
    2cfc:	e0 91 7e 01 	lds	r30, 0x017E
    2d00:	f0 91 7f 01 	lds	r31, 0x017F
    2d04:	e2 17       	cp	r30, r18
    2d06:	f3 07       	cpc	r31, r19
    2d08:	a0 f4       	brcc	.+40     	; 0x2d32 <malloc+0x124>
    2d0a:	2e 1b       	sub	r18, r30
    2d0c:	3f 0b       	sbc	r19, r31
    2d0e:	28 17       	cp	r18, r24
    2d10:	39 07       	cpc	r19, r25
    2d12:	78 f0       	brcs	.+30     	; 0x2d32 <malloc+0x124>
    2d14:	ac 01       	movw	r20, r24
    2d16:	4e 5f       	subi	r20, 0xFE	; 254
    2d18:	5f 4f       	sbci	r21, 0xFF	; 255
    2d1a:	24 17       	cp	r18, r20
    2d1c:	35 07       	cpc	r19, r21
    2d1e:	48 f0       	brcs	.+18     	; 0x2d32 <malloc+0x124>
    2d20:	4e 0f       	add	r20, r30
    2d22:	5f 1f       	adc	r21, r31
    2d24:	50 93 7f 01 	sts	0x017F, r21
    2d28:	40 93 7e 01 	sts	0x017E, r20
    2d2c:	81 93       	st	Z+, r24
    2d2e:	91 93       	st	Z+, r25
    2d30:	02 c0       	rjmp	.+4      	; 0x2d36 <malloc+0x128>
    2d32:	e0 e0       	ldi	r30, 0x00	; 0
    2d34:	f0 e0       	ldi	r31, 0x00	; 0
    2d36:	cf 01       	movw	r24, r30
    2d38:	df 91       	pop	r29
    2d3a:	cf 91       	pop	r28
    2d3c:	08 95       	ret

00002d3e <free>:
    2d3e:	cf 93       	push	r28
    2d40:	df 93       	push	r29
    2d42:	00 97       	sbiw	r24, 0x00	; 0
    2d44:	09 f4       	brne	.+2      	; 0x2d48 <free+0xa>
    2d46:	87 c0       	rjmp	.+270    	; 0x2e56 <free+0x118>
    2d48:	fc 01       	movw	r30, r24
    2d4a:	32 97       	sbiw	r30, 0x02	; 2
    2d4c:	13 82       	std	Z+3, r1	; 0x03
    2d4e:	12 82       	std	Z+2, r1	; 0x02
    2d50:	c0 91 80 01 	lds	r28, 0x0180
    2d54:	d0 91 81 01 	lds	r29, 0x0181
    2d58:	20 97       	sbiw	r28, 0x00	; 0
    2d5a:	81 f4       	brne	.+32     	; 0x2d7c <free+0x3e>
    2d5c:	20 81       	ld	r18, Z
    2d5e:	31 81       	ldd	r19, Z+1	; 0x01
    2d60:	28 0f       	add	r18, r24
    2d62:	39 1f       	adc	r19, r25
    2d64:	80 91 7e 01 	lds	r24, 0x017E
    2d68:	90 91 7f 01 	lds	r25, 0x017F
    2d6c:	82 17       	cp	r24, r18
    2d6e:	93 07       	cpc	r25, r19
    2d70:	79 f5       	brne	.+94     	; 0x2dd0 <free+0x92>
    2d72:	f0 93 7f 01 	sts	0x017F, r31
    2d76:	e0 93 7e 01 	sts	0x017E, r30
    2d7a:	6d c0       	rjmp	.+218    	; 0x2e56 <free+0x118>
    2d7c:	de 01       	movw	r26, r28
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	ae 17       	cp	r26, r30
    2d84:	bf 07       	cpc	r27, r31
    2d86:	50 f4       	brcc	.+20     	; 0x2d9c <free+0x5e>
    2d88:	12 96       	adiw	r26, 0x02	; 2
    2d8a:	4d 91       	ld	r20, X+
    2d8c:	5c 91       	ld	r21, X
    2d8e:	13 97       	sbiw	r26, 0x03	; 3
    2d90:	9d 01       	movw	r18, r26
    2d92:	41 15       	cp	r20, r1
    2d94:	51 05       	cpc	r21, r1
    2d96:	09 f1       	breq	.+66     	; 0x2dda <free+0x9c>
    2d98:	da 01       	movw	r26, r20
    2d9a:	f3 cf       	rjmp	.-26     	; 0x2d82 <free+0x44>
    2d9c:	b3 83       	std	Z+3, r27	; 0x03
    2d9e:	a2 83       	std	Z+2, r26	; 0x02
    2da0:	40 81       	ld	r20, Z
    2da2:	51 81       	ldd	r21, Z+1	; 0x01
    2da4:	84 0f       	add	r24, r20
    2da6:	95 1f       	adc	r25, r21
    2da8:	8a 17       	cp	r24, r26
    2daa:	9b 07       	cpc	r25, r27
    2dac:	71 f4       	brne	.+28     	; 0x2dca <free+0x8c>
    2dae:	8d 91       	ld	r24, X+
    2db0:	9c 91       	ld	r25, X
    2db2:	11 97       	sbiw	r26, 0x01	; 1
    2db4:	84 0f       	add	r24, r20
    2db6:	95 1f       	adc	r25, r21
    2db8:	02 96       	adiw	r24, 0x02	; 2
    2dba:	91 83       	std	Z+1, r25	; 0x01
    2dbc:	80 83       	st	Z, r24
    2dbe:	12 96       	adiw	r26, 0x02	; 2
    2dc0:	8d 91       	ld	r24, X+
    2dc2:	9c 91       	ld	r25, X
    2dc4:	13 97       	sbiw	r26, 0x03	; 3
    2dc6:	93 83       	std	Z+3, r25	; 0x03
    2dc8:	82 83       	std	Z+2, r24	; 0x02
    2dca:	21 15       	cp	r18, r1
    2dcc:	31 05       	cpc	r19, r1
    2dce:	29 f4       	brne	.+10     	; 0x2dda <free+0x9c>
    2dd0:	f0 93 81 01 	sts	0x0181, r31
    2dd4:	e0 93 80 01 	sts	0x0180, r30
    2dd8:	3e c0       	rjmp	.+124    	; 0x2e56 <free+0x118>
    2dda:	d9 01       	movw	r26, r18
    2ddc:	13 96       	adiw	r26, 0x03	; 3
    2dde:	fc 93       	st	X, r31
    2de0:	ee 93       	st	-X, r30
    2de2:	12 97       	sbiw	r26, 0x02	; 2
    2de4:	4d 91       	ld	r20, X+
    2de6:	5d 91       	ld	r21, X+
    2de8:	a4 0f       	add	r26, r20
    2dea:	b5 1f       	adc	r27, r21
    2dec:	ea 17       	cp	r30, r26
    2dee:	fb 07       	cpc	r31, r27
    2df0:	79 f4       	brne	.+30     	; 0x2e10 <free+0xd2>
    2df2:	80 81       	ld	r24, Z
    2df4:	91 81       	ldd	r25, Z+1	; 0x01
    2df6:	84 0f       	add	r24, r20
    2df8:	95 1f       	adc	r25, r21
    2dfa:	02 96       	adiw	r24, 0x02	; 2
    2dfc:	d9 01       	movw	r26, r18
    2dfe:	11 96       	adiw	r26, 0x01	; 1
    2e00:	9c 93       	st	X, r25
    2e02:	8e 93       	st	-X, r24
    2e04:	82 81       	ldd	r24, Z+2	; 0x02
    2e06:	93 81       	ldd	r25, Z+3	; 0x03
    2e08:	13 96       	adiw	r26, 0x03	; 3
    2e0a:	9c 93       	st	X, r25
    2e0c:	8e 93       	st	-X, r24
    2e0e:	12 97       	sbiw	r26, 0x02	; 2
    2e10:	e0 e0       	ldi	r30, 0x00	; 0
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    2e14:	8a 81       	ldd	r24, Y+2	; 0x02
    2e16:	9b 81       	ldd	r25, Y+3	; 0x03
    2e18:	00 97       	sbiw	r24, 0x00	; 0
    2e1a:	19 f0       	breq	.+6      	; 0x2e22 <free+0xe4>
    2e1c:	fe 01       	movw	r30, r28
    2e1e:	ec 01       	movw	r28, r24
    2e20:	f9 cf       	rjmp	.-14     	; 0x2e14 <free+0xd6>
    2e22:	ce 01       	movw	r24, r28
    2e24:	02 96       	adiw	r24, 0x02	; 2
    2e26:	28 81       	ld	r18, Y
    2e28:	39 81       	ldd	r19, Y+1	; 0x01
    2e2a:	82 0f       	add	r24, r18
    2e2c:	93 1f       	adc	r25, r19
    2e2e:	20 91 7e 01 	lds	r18, 0x017E
    2e32:	30 91 7f 01 	lds	r19, 0x017F
    2e36:	28 17       	cp	r18, r24
    2e38:	39 07       	cpc	r19, r25
    2e3a:	69 f4       	brne	.+26     	; 0x2e56 <free+0x118>
    2e3c:	30 97       	sbiw	r30, 0x00	; 0
    2e3e:	29 f4       	brne	.+10     	; 0x2e4a <free+0x10c>
    2e40:	10 92 81 01 	sts	0x0181, r1
    2e44:	10 92 80 01 	sts	0x0180, r1
    2e48:	02 c0       	rjmp	.+4      	; 0x2e4e <free+0x110>
    2e4a:	13 82       	std	Z+3, r1	; 0x03
    2e4c:	12 82       	std	Z+2, r1	; 0x02
    2e4e:	d0 93 7f 01 	sts	0x017F, r29
    2e52:	c0 93 7e 01 	sts	0x017E, r28
    2e56:	df 91       	pop	r29
    2e58:	cf 91       	pop	r28
    2e5a:	08 95       	ret

00002e5c <__itoa_ncheck>:
    2e5c:	bb 27       	eor	r27, r27
    2e5e:	4a 30       	cpi	r20, 0x0A	; 10
    2e60:	31 f4       	brne	.+12     	; 0x2e6e <__itoa_ncheck+0x12>
    2e62:	99 23       	and	r25, r25
    2e64:	22 f4       	brpl	.+8      	; 0x2e6e <__itoa_ncheck+0x12>
    2e66:	bd e2       	ldi	r27, 0x2D	; 45
    2e68:	90 95       	com	r25
    2e6a:	81 95       	neg	r24
    2e6c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e6e:	0c 94 6b 17 	jmp	0x2ed6	; 0x2ed6 <__utoa_common>

00002e72 <__ltoa_ncheck>:
    2e72:	bb 27       	eor	r27, r27
    2e74:	2a 30       	cpi	r18, 0x0A	; 10
    2e76:	51 f4       	brne	.+20     	; 0x2e8c <__ltoa_ncheck+0x1a>
    2e78:	99 23       	and	r25, r25
    2e7a:	42 f4       	brpl	.+16     	; 0x2e8c <__ltoa_ncheck+0x1a>
    2e7c:	bd e2       	ldi	r27, 0x2D	; 45
    2e7e:	90 95       	com	r25
    2e80:	80 95       	com	r24
    2e82:	70 95       	com	r23
    2e84:	61 95       	neg	r22
    2e86:	7f 4f       	sbci	r23, 0xFF	; 255
    2e88:	8f 4f       	sbci	r24, 0xFF	; 255
    2e8a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e8c:	0c 94 49 17 	jmp	0x2e92	; 0x2e92 <__ultoa_common>

00002e90 <__ultoa_ncheck>:
    2e90:	bb 27       	eor	r27, r27

00002e92 <__ultoa_common>:
    2e92:	fa 01       	movw	r30, r20
    2e94:	a6 2f       	mov	r26, r22
    2e96:	62 17       	cp	r22, r18
    2e98:	71 05       	cpc	r23, r1
    2e9a:	81 05       	cpc	r24, r1
    2e9c:	91 05       	cpc	r25, r1
    2e9e:	33 0b       	sbc	r19, r19
    2ea0:	30 fb       	bst	r19, 0
    2ea2:	66 f0       	brts	.+24     	; 0x2ebc <__ultoa_common+0x2a>
    2ea4:	aa 27       	eor	r26, r26
    2ea6:	66 0f       	add	r22, r22
    2ea8:	77 1f       	adc	r23, r23
    2eaa:	88 1f       	adc	r24, r24
    2eac:	99 1f       	adc	r25, r25
    2eae:	aa 1f       	adc	r26, r26
    2eb0:	a2 17       	cp	r26, r18
    2eb2:	10 f0       	brcs	.+4      	; 0x2eb8 <__ultoa_common+0x26>
    2eb4:	a2 1b       	sub	r26, r18
    2eb6:	63 95       	inc	r22
    2eb8:	38 50       	subi	r19, 0x08	; 8
    2eba:	a9 f7       	brne	.-22     	; 0x2ea6 <__ultoa_common+0x14>
    2ebc:	a0 5d       	subi	r26, 0xD0	; 208
    2ebe:	aa 33       	cpi	r26, 0x3A	; 58
    2ec0:	08 f0       	brcs	.+2      	; 0x2ec4 <__ultoa_common+0x32>
    2ec2:	a9 5d       	subi	r26, 0xD9	; 217
    2ec4:	a1 93       	st	Z+, r26
    2ec6:	36 f7       	brtc	.-52     	; 0x2e94 <__ultoa_common+0x2>
    2ec8:	b1 11       	cpse	r27, r1
    2eca:	b1 93       	st	Z+, r27
    2ecc:	10 82       	st	Z, r1
    2ece:	ca 01       	movw	r24, r20
    2ed0:	0c 94 84 17 	jmp	0x2f08	; 0x2f08 <strrev>

00002ed4 <__utoa_ncheck>:
    2ed4:	bb 27       	eor	r27, r27

00002ed6 <__utoa_common>:
    2ed6:	fb 01       	movw	r30, r22
    2ed8:	55 27       	eor	r21, r21
    2eda:	aa 27       	eor	r26, r26
    2edc:	88 0f       	add	r24, r24
    2ede:	99 1f       	adc	r25, r25
    2ee0:	aa 1f       	adc	r26, r26
    2ee2:	a4 17       	cp	r26, r20
    2ee4:	10 f0       	brcs	.+4      	; 0x2eea <__utoa_common+0x14>
    2ee6:	a4 1b       	sub	r26, r20
    2ee8:	83 95       	inc	r24
    2eea:	50 51       	subi	r21, 0x10	; 16
    2eec:	b9 f7       	brne	.-18     	; 0x2edc <__utoa_common+0x6>
    2eee:	a0 5d       	subi	r26, 0xD0	; 208
    2ef0:	aa 33       	cpi	r26, 0x3A	; 58
    2ef2:	08 f0       	brcs	.+2      	; 0x2ef6 <__utoa_common+0x20>
    2ef4:	a9 5d       	subi	r26, 0xD9	; 217
    2ef6:	a1 93       	st	Z+, r26
    2ef8:	00 97       	sbiw	r24, 0x00	; 0
    2efa:	79 f7       	brne	.-34     	; 0x2eda <__utoa_common+0x4>
    2efc:	b1 11       	cpse	r27, r1
    2efe:	b1 93       	st	Z+, r27
    2f00:	11 92       	st	Z+, r1
    2f02:	cb 01       	movw	r24, r22
    2f04:	0c 94 84 17 	jmp	0x2f08	; 0x2f08 <strrev>

00002f08 <strrev>:
    2f08:	dc 01       	movw	r26, r24
    2f0a:	fc 01       	movw	r30, r24
    2f0c:	67 2f       	mov	r22, r23
    2f0e:	71 91       	ld	r23, Z+
    2f10:	77 23       	and	r23, r23
    2f12:	e1 f7       	brne	.-8      	; 0x2f0c <strrev+0x4>
    2f14:	32 97       	sbiw	r30, 0x02	; 2
    2f16:	04 c0       	rjmp	.+8      	; 0x2f20 <strrev+0x18>
    2f18:	7c 91       	ld	r23, X
    2f1a:	6d 93       	st	X+, r22
    2f1c:	70 83       	st	Z, r23
    2f1e:	62 91       	ld	r22, -Z
    2f20:	ae 17       	cp	r26, r30
    2f22:	bf 07       	cpc	r27, r31
    2f24:	c8 f3       	brcs	.-14     	; 0x2f18 <strrev+0x10>
    2f26:	08 95       	ret

00002f28 <_exit>:
    2f28:	f8 94       	cli

00002f2a <__stop_program>:
    2f2a:	ff cf       	rjmp	.-2      	; 0x2f2a <__stop_program>
